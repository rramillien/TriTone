Opal.queue(function(Opal) {/* Generated by Opal 1.7.3 */
  var $gvars = Opal.gvars, nil = Opal.nil;

  return ($gvars.host = "browser")
});

Opal.modules["application/fake_data"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $hash2 = Opal.hash2, $def = Opal.def, self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('[]');
  
  
  $def(self, '$get_icon', function $$get_icon(icon_name) {
    var load = nil, clear = nil, settings = nil, edition = nil, select = nil, group = nil, copy = nil, paste = nil, undo = nil, midi = nil, icons = nil;

    
    load = "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"   xml:space=\"preserve\" viewBox=\"0 0 1024 1024\">\n" + "    <path id=\"folderCanvas-p1\" stroke=\"none\" fill=\"rgb(170, 170, 170)\" d=\"M 848.62,922 L 186.38,922 C 125.42,922 76,871.39 76,808.99 L 76,243.87 C 76,181.5 125.42,130.89 186.38,130.89 L 344.58,130.89 344.05,130.89 C 386.9,130.89 425.87,155.91 443.98,195.05 L 466.73,243.89 848.62,243.89 C 909.58,243.89 959,294.5 959,356.92 L 959,808.99 C 959,871.39 909.58,922 848.62,922 Z M 149.58,461.65 L 149.58,808.99 C 149.58,829.79 166.07,846.65 186.38,846.65 L 848.62,846.65 C 868.93,846.65 885.42,829.79 885.42,808.99 L 885.42,461.65 149.58,461.65 Z M 149.58,386.29 L 885.42,386.29 885.42,356.92 C 885.42,336.11 868.93,319.25 848.63,319.25 L 443.92,319.25 444.15,319.25 C 429.87,319.25 416.89,310.91 410.85,297.87 L 378.06,227.7 378.02,227.62 C 371.99,214.58 359,206.24 344.72,206.24 L 186.38,206.24 C 166.07,206.24 149.58,223.1 149.58,243.89 L 149.58,386.29 Z M 149.58,386.29\" />\n" + "</svg>\n" + "\n";
    clear = "<svg class=\"svg-icon\" style=\"width: 1em; height: 1em;vertical-align: middle;fill: currentColor;overflow: hidden;\"\n" + "     viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n" + "  <path id=\"path1\" d=\"M772.096 368.64H654.336V153.6c0-78.848-63.488-142.336-142.336-142.336S369.664 74.752 369.664 153.6v215.04H251.904c-94.208 0-171.008 76.8-171.008 171.008v59.392c0 53.248 44.032 97.28 97.28 97.28h4.096l-51.2 121.856c-18.432 43.008-13.312 92.16 12.288 132.096 25.6 38.912 69.632 62.464 116.736 62.464h501.76c48.128 0 92.16-23.552 117.76-64.512 25.6-39.936 29.696-90.112 9.216-133.12L833.536 696.32h12.288c53.248 0 97.28-44.032 97.28-97.28v-59.392c0-95.232-76.8-171.008-171.008-171.008zM451.584 153.6c0-32.768 26.624-60.416 60.416-60.416 32.768 0 60.416 26.624 60.416 60.416v215.04H451.584V153.6zM808.96 904.192c-11.264 16.384-28.672 26.624-49.152 26.624h-501.76c-19.456 0-36.864-9.216-48.128-25.6s-12.288-35.84-5.12-54.272l63.488-150.528h12.288v124.928c0 22.528 18.432 40.96 40.96 40.96s40.96-18.432 40.96-40.96v-122.88-2.048h40.96v124.928c0 22.528 18.432 40.96 40.96 40.96s40.96-18.432 40.96-40.96v-122.88-3.072h40.96v125.952c0 22.528 18.432 40.96 40.96 40.96s40.96-18.432 40.96-40.96v-122.88-4.096h40.96v126.976c0 22.528 18.432 40.96 40.96 40.96s40.96-18.432 40.96-40.96v-122.88-5.12h14.336L815.104 849.92c6.144 16.384 5.12 36.864-6.144 54.272z m52.224-306.176c0 8.192-7.168 15.36-15.36 15.36H178.176c-8.192 0-15.36-7.168-15.36-15.36v-59.392c0-49.152 39.936-89.088 89.088-89.088h520.192c49.152 0 89.088 39.936 89.088 89.088v59.392z\"\n" + "        fill=\"#333C4F\"/>\n" + "</svg>\n";
    settings = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n" + "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n" + "<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 800 800\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10;\">\n" + "    <path id=\"settingsCanvas-settingsbezier\" d=\"M464.37,112.09C477.93,150.24 521.5,168.28 558.07,150.9C616.12,123.31 676.69,183.88 649.1,241.93C631.72,278.5 649.76,322.07 687.91,335.63C748.48,357.17 748.48,442.83 687.91,464.37C649.76,477.93 631.72,521.5 649.1,558.07C676.69,616.12 616.12,676.69 558.07,649.1C521.5,631.72 477.93,649.76 464.37,687.91C442.83,748.48 357.17,748.48 335.63,687.91C322.07,649.76 278.5,631.72 241.93,649.1C183.88,676.69 123.31,616.12 150.9,558.07C168.28,521.5 150.24,477.93 112.09,464.37C51.52,442.83 51.52,357.17 112.09,335.63C150.24,322.07 168.28,278.5 150.9,241.93C123.31,183.88 183.88,123.31 241.93,150.9C278.5,168.28 322.07,150.24 335.63,112.09C357.17,51.52 442.83,51.52 464.37,112.09ZM400,300C390.8,300 381.9,301.24 373.44,303.57C331.1,315.2 300,353.97 300,400C300,455.23 344.77,500 400,500C455.23,500 500,455.23 500,400C500,344.77 455.23,300 400,300Z\" style=\"fill:none;fill-rule:nonzero;stroke-width:60px;\"/>\n" + "</svg>\n" + "\n";
    edition = "<svg class=\"svg-icon\" style=\"width: 1em; height: 1em;vertical-align: middle;fill: currentColor;overflow: hidden;\"\n" + "     viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n" + "  <path id=\"p1\" d=\"M257.7 752c2 0 4-0.2 6-0.5L431.9 722c2-0.4 3.9-1.3 5.3-2.8l423.9-423.9c3.9-3.9 3.9-10.2 0-14.1L694.9 114.9c-1.9-1.9-4.4-2.9-7.1-2.9s-5.2 1-7.1 2.9L256.8 538.8c-1.5 1.5-2.4 3.3-2.8 5.3l-29.5 168.2c-1.9 11.1 1.5 21.9 9.4 29.8 6.6 6.4 14.9 9.9 23.8 9.9z m67.4-174.4L687.8 215l73.3 73.3-362.7 362.6-88.9 15.7 15.6-89zM880 836H144c-17.7 0-32 14.3-32 32v36c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-36c0-17.7-14.3-32-32-32z\"/>\n" + "</svg>\n";
    select = "<svg class=\"svg-icon\" style=\"width: 1em; height: 1em;vertical-align: middle;fill: currentColor;overflow: hidden;\"\n" + "     viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n" + "  <path id=\"path\" d=\"M281.6 137.813333a128 128 0 0 0-128 128v469.333334a128 128 0 0 0 128 128h213.333333a42.666667 42.666667 0 1 0 0-85.333334h-213.333333a42.666667 42.666667 0 0 1-42.666667-42.666666v-469.333334a42.666667 42.666667 0 0 1 42.666667-42.666666h469.333333a42.666667 42.666667 0 0 1 42.666667 42.666666v213.333334a42.666667 42.666667 0 1 0 85.333333 0v-213.333334a128 128 0 0 0-128-128h-469.333333z m294.613333 380.544l42.154667 365.184a21.333333 21.333333 0 0 0 38.357333 10.24l80.213334-108.629333 114.048 169.941333a42.666667 42.666667 0 1 0 70.826666-47.573333l-114.048-169.941333 124.416-36.693334a21.333333 21.333333 0 0 0 3.498667-39.552l-328.746667-164.522666a21.333333 21.333333 0 0 0-30.72 21.546666z\"/>\n" + "</svg>\n";
    group = "<svg width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n" + "  <path id=\"p1\" d=\"M5 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4ZM19 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4ZM21 19a2 2 0 1 1-4 0 2 2 0 0 1 4 0ZM5 21a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z\"\n" + "        fill=\"#212121\"/>\n" + "  <path id=\"p2\" d=\"M7.83 6a2.995 2.995 0 0 0 0-2h4.67A2.5 2.5 0 0 1 15 6.5V9h2.5a2.5 2.5 0 0 1 2.5 2.5v4.67a2.997 2.997 0 0 0-2 0V11.5a.5.5 0 0 0-.5-.5H15v1.5a2.5 2.5 0 0 1-2.5 2.5H11v2.5a.5.5 0 0 0 .5.5h4.67a2.997 2.997 0 0 0 0 2H11.5A2.5 2.5 0 0 1 9 17.5V15H6.5A2.5 2.5 0 0 1 4 12.5V7.83a2.995 2.995 0 0 0 2 0v4.67a.5.5 0 0 0 .5.5H9v-1.5A2.5 2.5 0 0 1 11.5 9H13V6.5a.5.5 0 0 0-.5-.5H7.83ZM13 12.5V11h-1.5a.5.5 0 0 0-.5.5V13h1.5a.5.5 0 0 0 .5-.5Z\"\n" + "        fill=\"#212121\"/>\n" + "</svg>\n";
    copy = "<svg class=\"svg-icon\" style=\"width: 1em; height: 1em;vertical-align: middle;fill: currentColor;overflow: hidden;\"\n" + "     viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n" + "  <path id=\"p1\" d=\"M672 832 224 832c-52.928 0-96-43.072-96-96L128 160c0-52.928 43.072-96 96-96l448 0c52.928 0 96 43.072 96 96l0 576C768 788.928 724.928 832 672 832zM224 128C206.368 128 192 142.368 192 160l0 576c0 17.664 14.368 32 32 32l448 0c17.664 0 32-14.336 32-32L704 160c0-17.632-14.336-32-32-32L224 128z\"/>\n" + "  <path id=\"p2\" d=\"M800 960 320 960c-17.664 0-32-14.304-32-32s14.336-32 32-32l480 0c17.664 0 32-14.336 32-32L832 256c0-17.664 14.304-32 32-32s32 14.336 32 32l0 608C896 916.928 852.928 960 800 960z\"/>\n" + "  <path id=\"p3\" d=\"M544 320 288 320c-17.664 0-32-14.336-32-32s14.336-32 32-32l256 0c17.696 0 32 14.336 32 32S561.696 320 544 320z\"/>\n" + "  <path id=\"p4\" d=\"M608 480 288.032 480c-17.664 0-32-14.336-32-32s14.336-32 32-32L608 416c17.696 0 32 14.336 32 32S625.696 480 608 480z\"/>\n" + "  <path id=\"p5\" d=\"M608 640 288 640c-17.664 0-32-14.304-32-32s14.336-32 32-32l320 0c17.696 0 32 14.304 32 32S625.696 640 608 640z\"/>\n" + "</svg>\n";
    paste = "<svg class=\"svg-icon\" style=\"width: 1em; height: 1em;vertical-align: middle;fill: currentColor;overflow: hidden;\"\n" + "     viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n" + "  <path id=\"path1\" d=\"M810.666667 85.333333l-178.56 0c-17.493333-49.493333-64.426667-85.333333-120.106667-85.333333s-102.613333 35.84-120.106667 85.333333l-178.56 0c-47.146667 0-85.333333 38.186667-85.333333 85.333333l0 682.666667c0 47.146667 38.186667 85.333333 85.333333 85.333333l597.333333 0c47.146667 0 85.333333-38.186667 85.333333-85.333333l0-682.666667c0-47.146667-38.186667-85.333333-85.333333-85.333333zM512 85.333333c23.466667 0 42.666667 18.986667 42.666667 42.666667s-19.2 42.666667-42.666667 42.666667-42.666667-18.986667-42.666667-42.666667 19.2-42.666667 42.666667-42.666667zM810.666667 853.333333l-597.333333 0 0-682.666667 85.333333 0 0 128 426.666667 0 0-128 85.333333 0 0 682.666667z\"/>\n" + "</svg>\n";
    undo = "<svg xmlns=\"http://www.w3.org/2000/svg\"\n" + "     viewBox=\"0 0 512 512\"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) -->\n" + "  <path id=\"p\" d=\"M255.545 8c-66.269.119-126.438 26.233-170.86 68.685L48.971 40.971C33.851 25.851 8 36.559 8 57.941V192c0 13.255 10.745 24 24 24h134.059c21.382 0 32.09-25.851 16.971-40.971l-41.75-41.75c30.864-28.899 70.801-44.907 113.23-45.273 92.398-.798 170.283 73.977 169.484 169.442C423.236 348.009 349.816 424 256 424c-41.127 0-79.997-14.678-110.63-41.556-4.743-4.161-11.906-3.908-16.368.553L89.34 422.659c-4.872 4.872-4.631 12.815.482 17.433C133.798 479.813 192.074 504 256 504c136.966 0 247.999-111.033 248-247.998C504.001 119.193 392.354 7.755 255.545 8z\"/>\n" + "</svg>\n";
    midi = "<svg width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M21.25 4.002a.75.75 0 0 1 .743.648l.007.102v14.5a.75.75 0 0 1-.648.743l-.102.007H2.75a.75.75 0 0 1-.743-.648L2 19.252v-14.5a.75.75 0 0 1 .648-.743l.102-.007h18.5ZM6 12.5H3.5v6h17v-6H18v3.749a.75.75 0 0 1-1.493.102l-.007-.102V12.5h-2v3.749a.75.75 0 0 1-1.493.102L13 16.25V12.5h-2v3.749a.75.75 0 0 1-1.493.102L9.5 16.25V12.5h-2v3.749a.75.75 0 0 1-1.493.102L6 16.25V12.5Zm14.5-7h-17v5.5h17V5.5Zm-11.25 2a.75.75 0 1 1 0 1.5.75.75 0 0 1 0-1.5Zm8 0a.75.75 0 0 1 .102 1.493l-.102.007h-2.5a.75.75 0 0 1-.102-1.493l.102-.007h2.5Zm-11-.001a.75.75 0 1 1 0 1.5.75.75 0 0 1 0-1.5Z\" fill=\"#212121\"/></svg>\n";
    icons = $hash2(["load", "clear", "settings", "edition", "select", "group", "copy", "paste", "undo", "midi"], {"load": load, "clear": clear, "settings": settings, "edition": edition, "select": select, "group": group, "copy": copy, "paste": paste, "undo": undo, "midi": midi});
    return icons['$[]'](icon_name);
  });
  
  $def(self, '$fake_project_list_data', function $$fake_project_list_data() {
    
    return [$hash2(["name", "id"], {"name": "the song", "id": "project_1"}), $hash2(["name", "id"], {"name": "mon projet2", "id": "project_2"}), $hash2(["name", "id"], {"name": "autre projet", "id": "project_3"}), $hash2(["name", "id"], {"name": "my great song", "id": "project_4"})]
  });
  
  $def(self, '$fake_modules_list', function $$fake_modules_list() {
    
    return $hash2(["t1", "t2", "t3", "t4", "t5", "t6", "t7", "t8", "t9", "t10", "t11", "t12"], {"t1": $hash2(["id", "action", "label", "type", "icon"], {"id": "t1", "action": "add_module", "label": "saw", "type": "oscillator", "icon": "wave-saw"}), "t2": $hash2(["id", "action", "label", "type", "icon"], {"id": "t2", "action": "add_module", "label": "sin", "type": "oscillator", "icon": "wave-sine"}), "t3": $hash2(["id", "action", "label", "type", "icon"], {"id": "t3", "action": "add_module", "label": "square", "type": "oscillator", "icon": "wave-square"}), "t4": $hash2(["id", "action", "label", "type", "icon"], {"id": "t4", "action": "add_module", "label": "triangle", "type": "oscillator", "icon": "wave-triangle"}), "t5": $hash2(["id", "action", "label", "type", "icon"], {"id": "t5", "action": "add_module", "label": "audio in", "type": "io", "icon": "microphone"}), "t6": $hash2(["id", "action", "label", "type", "icon"], {"id": "t6", "action": "add_module", "label": "audio out", "type": "io", "icon": "speaker"}), "t7": $hash2(["id", "action", "label", "type", "icon"], {"id": "t7", "action": "add_module", "label": "midi in", "type": "io", "icon": "midi_in"}), "t8": $hash2(["id", "action", "label", "type", "icon"], {"id": "t8", "action": "add_module", "label": "midi out", "type": "io", "icon": "midi_out"}), "t9": $hash2(["id", "action", "label", "type", "icon"], {"id": "t9", "action": "add_module", "label": "sample", "type": "waveform", "icon": "waveform"}), "t10": $hash2(["id", "action", "label", "type", "icon"], {"id": "t10", "action": "add_module", "label": "low pass", "type": "filter", "icon": "low_pass"}), "t11": $hash2(["id", "action", "label", "type", "icon"], {"id": "t11", "action": "add_module", "label": "high pass", "type": "filter", "icon": "high_pass"}), "t12": $hash2(["id", "action", "label", "type", "icon"], {"id": "t12", "action": "add_module", "label": "bandpass", "type": "io", "icon": "band_pass"})})
  });
  
  $def(self, '$fake_new_project_data', function $$fake_new_project_data() {
    
    return $hash2(["name", "id"], {"name": "new project", "id": "project_x"})
  });
  
  $def(self, '$fake_project_data', function $$fake_project_data() {
    
    return $hash2(["modules", "links"], {"modules": [$hash2(["id", "name", "type_id", "active", "input_slots", "output_slots", "position"], {"id": 0, "name": "Midi", "type_id": "midi", "active": "true", "input_slots": [$hash2(["id", "name", "unit", "value"], {"id": 0, "name": "on", "unit": "", "value": 1})], "output_slots": [$hash2(["id", "name", "unit"], {"id": 0, "name": "xxx", "unit": ""})], "position": $hash2(["x", "y", "z"], {"x": 2, "y": 2, "z": 0})})], "links": [$hash2(["id", "sourceComponentId", "sourceOutputSlotId", "targetComponentId", "targetInputSlotId", "active"], {"id": "GUID", "sourceComponentId": 0, "sourceOutputSlotId": 2, "targetComponentId": 1, "targetInputSlotId": 0, "active": "true"})]})
  });
  return $def(self, '$module_list', function $$module_list() {
    
    return Opal.large_array_unpack("Audio_input,Audio_output,Midi_input,Midi_output,Oscillator,Sample,Noise,Envelope,Timeline,Markers,Group,Event,Play,Record,Stop,Delete,Loop,Label,Id,Ramp,Filter,Volume,Link,Select,Saturation,Position,Load,module,Save,Module,If,Else,equal,Superior,Inferior,Divide,Plus,Multiply")
  });
};

Opal.modules["application/experimental_api"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $hash2 = Opal.hash2, $send = Opal.send, $rb_times = Opal.rb_times, $rb_plus = Opal.rb_plus, $truthy = Opal.truthy, $slice = Opal.slice, $def = Opal.def, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new_default_params,new,merge,[],default_params,each_with_index,box,*,+,text,[]=,touch,send');
  
  $$('Essentials').$new_default_params($hash2(["list"], {"list": $hash2(["colors", "sort", "height", "width", "margin", "spacing", "view", "listing", "items"], {"colors": ["red", "blue"], "sort": "alphabetically", "height": 18, "width": "auto", "margin": 0, "spacing": 3, "view": "data", "listing": $hash2([], {}), "items": $hash2(["color", "size", "align", "margin"], {"color": "orange", "size": 36, "align": "left", "margin": 3})})}));
  self.$new($hash2(["particle"], {"particle": "list"}));
  $send(self, 'new', [$hash2(["post"], {"post": "list"})], function $$1(params){var self = $$1.$$s == null ? this : $$1.$$s, list_style = nil, list_code = nil, list_listing = nil, line_height = nil, line_width = nil, line_margin = nil, line_spacing = nil;

    
    if (params == null) params = nil;
    list_style = $$('Essentials').$default_params()['$[]']("list").$merge(params);
    list_code = params['$[]']("code");
    list_listing = params['$[]']("listing");
    line_height = list_style['$[]']("height");
    line_width = list_style['$[]']("width");
    line_margin = list_style['$[]']("margin");
    line_spacing = list_style['$[]']("spacing");
    return $send(list_listing, 'each_with_index', [], function $$2(item, index){var $a, self = $$2.$$s == null ? this : $$2.$$s, support = nil, code = nil, $ret_or_1 = nil;

      
      if (item == null) item = nil;
      if (index == null) index = nil;
      support = self.$box($hash2(["top", "height", "width", "left", "right"], {"top": $rb_times($rb_plus(line_height, line_spacing), index), "height": line_height, "width": line_width, "left": line_margin, "right": line_margin}));
      support.$text($hash2(["data", "visual"], {"data": item['$[]']("name"), "visual": $hash2(["size"], {"size": 12})}));
      code = ($truthy(($ret_or_1 = item['$[]']("code"))) ? ($ret_or_1) : (($a = ["code", list_code], $send(item, '[]=', $a), $a[$a.length - 1])));
      return $send(support, 'touch', [true], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s;

        if ($truthy(code)) {
          return self.$send(code, item)
        } else {
          return nil
        }}, {$$s: self});}, {$$s: self});}, {$$s: self});
  
  $def(self, '$svg_fetch', function $$svg_fetch(svg_name, $a, $b) {
    var $post_args, svg_color, target;

    
    $post_args = $slice(arguments, 1);
    
    if ($post_args.length > 1) svg_color = $post_args.shift();if (svg_color == null) svg_color = "lightgray";
    
    target = $post_args.shift();if (target == null) target = nil;
    
 fetch("./medias/images/icons/" +svg_name +".svg")
    .then(response => response.text())
   .then(svgText => {
        let svgContainer = document.getElementById(target);
        let parser = new DOMParser();
        let svgDoc = parser.parseFromString(svgText, "image/svg+xml");
        let importedSVG = svgDoc.getElementsByTagName("svg")[0];
        importedSVG.style.width =  "100%";
        importedSVG.style.height =  "100%";
        let elements = importedSVG.getElementsByTagName("path");
        Array.from(elements).forEach(el => {
            el.setAttribute("fill", svg_color);
            el.setAttribute("stroke", svg_color);
        });
        svgContainer.appendChild(importedSVG);
    });

;
  }, -3);
  return $def(self, '$display_svg', function $$display_svg(svg_content, $a, $b) {
    var $post_args, svg_color, target;

    
    $post_args = $slice(arguments, 1);
    
    if ($post_args.length > 1) svg_color = $post_args.shift();if (svg_color == null) svg_color = "lightgray";
    
    target = $post_args.shift();if (target == null) target = nil;
    
       let svgContainer = document.getElementById(target);
        let parser = new DOMParser();
        let svgDoc = parser.parseFromString(svg_content, "image/svg+xml");
        let importedSVG = svgDoc.getElementsByTagName("svg")[0];
        importedSVG.style.width =  "100%";
        importedSVG.style.height =  "100%";
        let elements = importedSVG.getElementsByTagName("path");
        Array.from(elements).forEach(el => {
            el.setAttribute("fill", svg_color);
            el.setAttribute("stroke", svg_color);
        });
        svgContainer.appendChild(importedSVG);
;
  }, -3);
};

Opal.modules["application/version"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('puts');
  
  self.$puts("vie version: 0.001");
  return self.$puts("v-UIe version: 0.005\n");
};

Opal.modules["application/styles"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $hash2 = Opal.hash2, $rb_divide = Opal.rb_divide, $rb_plus = Opal.rb_plus, $rb_times = Opal.rb_times, $rb_minus = Opal.rb_minus, $def = Opal.def, self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('/,+,*,-,color,[],vie_styles,shadow');
  
  
  $def(self, '$vie_styles', function $$vie_styles() {
    var action_height = nil, toolbox_with = nil, inspector_with = nil, navigation_height = nil, margin = nil, smooth = nil;

    
    action_height = 39;
    toolbox_with = 52;
    inspector_with = 120;
    navigation_height = 30;
    margin = 9;
    smooth = 3;
    return $hash2(["margin", "toolbox_with", "module_label", "inspector_with", "navigation_height", "text_color", "list_style", "back_color", "title", "toolbox_color", "center_color", "action_color", "inspector_color", "active_color", "inactive_color", "dark_color", "invisible_color", "darker_color", "cell_color", "cell_over", "cell_selected", "cell_connected", "cell_shadow", "invert_shadow", "toolbox_style", "inspector_style", "action_style", "filer", "support_style", "center_style", "matrix_style"], {"margin": margin, "toolbox_with": 60, "module_label": $hash2(["left", "top", "visual", "attached"], {"left": 3, "top": 33, "visual": $hash2(["size"], {"size": 9}), "attached": ["active_color"]}), "inspector_with": inspector_with, "navigation_height": 30, "text_color": $hash2(["red", "green", "blue", "id"], {"red": 0.6, "green": 0.6, "blue": 0.6, "id": "text_color"}), "list_style": $hash2(["colors", "width", "left", "right", "height", "items"], {"colors": ["gray", "white"], "width": "auto", "left": 0, "right": 0, "height": 15, "items": $hash2(["color", "size", "align", "margin"], {"color": "orange", "size": 36, "align": "left", "margin": 3})}), "back_color": $hash2(["red", "green", "blue", "id"], {"red": 0.1, "green": 0.1, "blue": 0.1, "id": "back_color"}), "title": $hash2(["id", "visual", "width", "left", "center", "top", "attached"], {"id": "title", "visual": $hash2(["size"], {"size": 21}), "width": "auto", "left": 25, "center": "horizontal", "top": 9, "attached": ["inactive_color"]}), "toolbox_color": $hash2(["red", "green", "blue", "id"], {"red": 0.1, "green": 0.1, "blue": 0.1, "id": "toolbox_color"}), "center_color": $hash2(["red", "green", "blue", "alpha", "id"], {"red": 0, "green": 0, "blue": 0, "alpha": 0, "id": "center_color"}), "action_color": $hash2(["red", "green", "blue", "alpha", "id"], {"red": 0, "green": 0, "blue": 0, "alpha": 0, "id": "action_color"}), "inspector_color": $hash2(["red", "green", "blue", "id"], {"red": 0.09, "green": 0.09, "blue": 0.09, "id": "inspector_color"}), "active_color": $hash2(["red", "green", "blue", "id"], {"red": 0.8, "green": 0.8, "blue": 0.8, "id": "active_color"}), "inactive_color": $hash2(["red", "green", "blue", "id"], {"red": 0.3, "green": 0.3, "blue": 0.3, "id": "inactive_color"}), "dark_color": $hash2(["red", "green", "blue", "id"], {"red": 0.127, "green": 0.127, "blue": 0.127, "id": "dark_color"}), "invisible_color": $hash2(["red", "green", "blue", "alpha", "id"], {"red": 0, "green": 0, "blue": 0, "alpha": 0, "id": "invisible_color"}), "darker_color": $hash2(["red", "green", "blue", "id"], {"red": 0.127, "green": 0.127, "blue": 0.127, "id": "darker_color"}), "cell_color": $hash2(["red", "green", "blue", "id"], {"red": 0.17, "green": 0.15, "blue": 0.13, "id": "cell_color"}), "cell_over": $hash2(["red", "green", "blue", "id"], {"red": 0.23, "green": 0.27, "blue": 0.15, "id": "cell_over"}), "cell_selected": $hash2(["red", "green", "blue", "id"], {"red": 1, "green": 1, "blue": 0, "id": "cell_selected"}), "cell_connected": $hash2(["red", "green", "blue", "id"], {"red": $rb_divide(154, 255), "green": $rb_divide(205, 255), "blue": $rb_divide(50, 255), "id": "cell_connected"}), "cell_shadow": $hash2(["blur", "left", "top", "id", "red", "green", "blue", "alpha", "direction"], {"blur": 9, "left": 3, "top": 3, "id": "cell_shadow", "red": 0, "green": 0, "blue": 0, "alpha": 0.3, "direction": "inset"}), "invert_shadow": $hash2(["blur", "left", "top", "id", "red", "green", "blue", "alpha", "direction"], {"blur": 9, "left": 3, "top": 3, "id": "invert_shadow", "red": 0, "green": 0, "blue": 0, "alpha": 0.3, "direction": "inset"}), "toolbox_style": $hash2(["id", "overflow", "left", "top", "smooth", "width", "bottom", "height", "attached"], {"id": "toolbox", "overflow": "hidden", "left": margin, "top": $rb_plus(action_height, margin), "smooth": smooth, "width": toolbox_with, "bottom": 30, "height": 420, "attached": ["toolbox_color"]}), "inspector_style": $hash2(["id", "left", "top", "smooth", "width", "bottom", "height", "overflow", "attached"], {"id": "inspector", "left": $rb_plus(toolbox_with, $rb_times(margin, 2)), "top": $rb_plus(action_height, margin), "smooth": smooth, "width": inspector_with, "bottom": 0, "height": 420, "overflow": "auto", "attached": ["invert_shadow", "inspector_color"]}), "action_style": $hash2(["id", "left", "top", "width", "right", "height", "attached"], {"id": "action", "left": toolbox_with, "top": 0, "width": "auto", "right": 0, "height": action_height, "attached": ["action_color"]}), "filer": $hash2(["id", "top", "bottom", "left", "width", "overflow", "height", "attached", "smooth"], {"id": "filer", "top": 12, "bottom": 36, "left": 6, "width": $rb_minus(inspector_with, 12), "overflow": "auto", "height": "auto", "attached": ["darker_color"], "smooth": 6}), "support_style": $hash2(["left", "width", "height", "attached"], {"left": 6, "width": 23, "height": 23, "attached": ["invisible_color"]}), "center_style": $hash2(["id", "left", "bottom", "top", "right", "width", "height", "attached"], {"id": "center", "left": $rb_plus($rb_plus(toolbox_with, inspector_with), $rb_times(margin, 3)), "bottom": navigation_height, "top": action_height, "right": 0, "width": "auto", "height": "auto", "attached": ["center_color"]}), "matrix_style": $hash2(["top", "left", "smooth", "columns", "rows", "width", "height", "color"], {"top": 0, "left": 0, "smooth": 0, "columns": $hash2(["count"], {"count": 8}), "rows": $hash2(["count"], {"count": 8}), "width": 440, "height": 440, "color": $hash2(["alpha"], {"alpha": 0})})});
  });
  self.$color(self.$vie_styles()['$[]']("cell_selected"));
  self.$color(self.$vie_styles()['$[]']("cell_over"));
  self.$color(self.$vie_styles()['$[]']("back_color"));
  self.$color(self.$vie_styles()['$[]']("toolbox_color"));
  self.$color(self.$vie_styles()['$[]']("action_color"));
  self.$color(self.$vie_styles()['$[]']("inspector_color"));
  self.$color(self.$vie_styles()['$[]']("center_color"));
  self.$color(self.$vie_styles()['$[]']("darker_color"));
  self.$color(self.$vie_styles()['$[]']("dark_color"));
  self.$color(self.$vie_styles()['$[]']("text_color"));
  self.$color(self.$vie_styles()['$[]']("active_color"));
  self.$color(self.$vie_styles()['$[]']("inactive_color"));
  self.$color(self.$vie_styles()['$[]']("cell_connected"));
  self.$color(self.$vie_styles()['$[]']("invisible_color"));
  self.$shadow(self.$vie_styles()['$[]']("cell_shadow"));
  return self.$shadow(self.$vie_styles()['$[]']("invert_shadow"));
};

Opal.modules["application/ui_template"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $hash2 = Opal.hash2, $rb_plus = Opal.rb_plus, $rb_times = Opal.rb_times, $def = Opal.def, $send = Opal.send, self = Opal.top, nil = Opal.nil, logo_color = nil, logo = nil;

  Opal.add_stubs('box,grab,display_svg,[],vie_styles,element,merge,+,*,get_icon,id,tool_events,each_with_index,add_icons_to_tool_zone,matrix,each,cells,tag,data');
  
  logo_color = "rgba(99, 255, 99, 0.3)";
  self.$grab("action").$box($hash2(["id", "width", "height", "left", "top", "right", "attached"], {"id": "logo_support", "width": 33, "height": 33, "left": "auto", "top": 7, "right": 15, "attached": "invisible_color"}));
  logo = "<svg  xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 256 256\" >\n" + "<path id=\"vieCanvas-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1\" stroke-miterlimit=\"10\" fill=\"rgb(255, 0, 0)\" d=\"M 73.04,26.41 C 50.57,12.14 15.77,53.39 15.81,85.33 15.83,107.68 23.49,124.45 35.37,139.38 97.06,203.55 73.1,232.52 109.61,231.71 134.09,231.16 181.15,134.57 220.5,138.31 232.63,123.3 240.52,106.7 240.5,85.07 240.5,84.51 240.49,83.95 240.47,83.4 211.52,29.92 146.74,182.8 114.45,179.38 69.64,174.65 90.68,37.61 73.04,26.41 Z M 172.32,76.13 C 172.32,94.63 157.34,109.64 138.85,109.64 120.36,109.64 105.37,94.63 105.37,76.13 105.37,57.62 120.36,42.62 138.85,42.62 157.34,42.62 172.32,57.62 172.32,76.13 Z M 172.32,76.13\" />\n" + "</svg>\n";
  self.$display_svg(logo, logo_color, "logo_support");
  self.$box(self.$vie_styles()['$[]']("center_style"));
  self.$box(self.$vie_styles()['$[]']("action_style"));
  self.$box(self.$vie_styles()['$[]']("toolbox_style"));
  self.$box(self.$vie_styles()['$[]']("inspector_style"));
  self.$element($hash2(["id", "data"], {"id": "connection", "data": []}));
  self.$element($hash2(["id", "data"], {"id": "selected", "data": []}));
  self.$element($hash2(["id", "data"], {"id": "context", "data": $hash2(["mode", "event"], {"mode": "default", "event": "released"})}));
  self.$element($hash2(["id"], {"id": "current_project"}));
  self.$element($hash2(["id", "data"], {"id": "project_matrix", "data": $hash2([], {})}));
  self.$element($hash2(["id"], {"id": "active_matrix"}));
  self.$element($hash2(["id", "data"], {"id": "debug", "data": $hash2(["debug"], {"debug": false})}));
  
  $def(self, '$add_icons_to_tool_zone', function $$add_icons_to_tool_zone(tool, index, tool_style) {
    var self = this, tool_name = nil, svg_color = nil, support_style = nil, icon_spacing = nil, margin = nil, support = nil, options = nil;

    
    tool_name = tool['$[]'](0);
    svg_color = tool_style['$[]']("color");
    support_style = tool_style['$[]']("style");
    icon_spacing = tool_style['$[]']("spacing");
    margin = tool_style['$[]']("margin");
    support = self.$grab("toolbox").$box(support_style.$merge($hash2(["top", "id"], {"top": $rb_plus($rb_times(icon_spacing, index), margin), "id": "tool_support_" + (tool_name)})));
    self.$display_svg(self.$get_icon(tool_name), svg_color, support.$id());
    options = tool['$[]'](1);
    return self.$tool_events(support, tool_name, options);
  });
  
  $def(self, '$fill_tool_zone', function $$fill_tool_zone(tools_list) {
    var self = this, svg_color = nil, margin = nil, support_style = nil, icon_spacing = nil, tool_style = nil;

    
    svg_color = "rgba(180, 120, 50, 1)";
    margin = self.$vie_styles()['$[]']("margin");
    support_style = self.$vie_styles()['$[]']("support_style");
    icon_spacing = $rb_plus(self.$vie_styles()['$[]']("support_style")['$[]']("height"), $rb_times(margin, 2));
    tool_style = $hash2(["color", "style", "spacing", "margin"], {"color": svg_color, "style": support_style, "spacing": icon_spacing, "margin": margin});
    return $send(tools_list, 'each_with_index', [], function $$1(tool, index){var self = $$1.$$s == null ? this : $$1.$$s;

      
      if (tool == null) tool = nil;
      if (index == null) index = nil;
      return self.$add_icons_to_tool_zone(tool, index, tool_style);}, {$$s: self});
  });
  
  $def(self, '$build_matrix', function $$build_matrix() {
    var self = this, center = nil, matrix_id = nil, matrix_style = nil, new_matrix = nil;

    
    center = self.$grab("center");
    matrix_id = "vie_matrix";
    matrix_style = self.$vie_styles()['$[]']("matrix_style").$merge($hash2(["id", "cells"], {"id": matrix_id, "cells": $hash2(["particles"], {"particles": $hash2(["margin", "smooth", "color", "shadow"], {"margin": 9, "smooth": 3, "color": self.$vie_styles()['$[]']("cell_color"), "shadow": $hash2(["blur", "left", "top", "id", "red", "green", "blue", "alpha"], {"blur": 9, "left": 3, "top": 3, "id": "default_cell_shadow", "red": 0, "green": 0, "blue": 0, "alpha": 0.3})})})}));
    new_matrix = center.$matrix(matrix_style);
    $send(new_matrix.$cells(), 'each', [], function $$2(cell){var self = $$2.$$s == null ? this : $$2.$$s;

      
      if (cell == null) cell = nil;
      return self.$grab(cell).$tag($hash2([], {}));}, {$$s: self});
    return new_matrix;
  });
  return $def(self, '$set_title', function $$set_title() {
    var self = this, project_name = nil;

    
    project_name = self.$grab("current_project").$data();
    return self.$grab("title").$data(project_name);
  });
};

Opal.modules["application/utilities"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $def = Opal.def, $truthy = Opal.truthy, self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('data,grab,[],debug,puts');
  
  
  $def(self, '$context', function $$context() {
    var self = this;

    return self.$grab("context").$data()
  });
  
  $def(self, '$debug', function $$debug() {
    var self = this;

    return self.$grab("debug").$data()['$[]']("debug")
  });
  return $def(self, '$log', function $$log(val) {
    var self = this;

    if ($truthy(self.$debug())) {
      return self.$puts("=> " + (val))
    } else {
      return nil
    }
  });
};

Opal.modules["application/communication"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $def = Opal.def, $hash2 = Opal.hash2, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('controller_listener,send,controller_sender,log,data,grab');
  
  $$('Atome').$controller_listener();
  
  $def(self, '$response_listener', function $$response_listener(hashed_msg) {
    var self = this, js_action = nil, js_body = nil;

    
    js_action = hashed_msg["action"];
    js_body = hashed_msg["body"];
    return self.$send(js_action, js_body);
  });
  
  $def(self, '$load_modules', function $$load_modules(_module_id) {
    
    return $$('Atome').$controller_sender($hash2(["action"], {"action": "get_modules"}))
  });
  
  $def(self, '$rename_project', function $$rename_project() {
    
    return $$('Atome').$controller_sender($hash2(["action"], {"action": "new_project"}))
  });
  
  $def(self, '$delete_project', function $$delete_project() {
    var self = this;

    return self.$log("delete : " + (self.$grab("current_project").$data()))
  });
  return $def(self, '$duplicate_project', function $$duplicate_project() {
    var self = this;

    return self.$log("duplicate : " + (self.$grab("current_project").$data()))
  });
};

Opal.modules["application/callbacks"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $def = Opal.def, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $rb_divide = Opal.rb_divide, self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('log,grab,concat,list,[],data,set_title,clear_all_matrix,each,add_module,add_link,display_svg,text,empty?,box,id,/,width,height');
  
  
  $def(self, '$get_settings_callback', function $$get_settings_callback() {
    var self = this;

    return self.$log("viewing setings now")
  });
  
  $def(self, '$get_projects_callback', function $$get_projects_callback(msg_body) {
    var self = this, inspector = nil;

    
    inspector = self.$grab("inspector");
    msg_body = [$hash2(["name", "id", "code"], {"name": "new", "id": "project_0", "code": "new_project"})].$concat(msg_body);
    return inspector.$list($hash2(["listing", "code", "height"], {"listing": msg_body, "code": "get_project", "height": 23}));
  });
  
  $def(self, '$new_project_callback', function $$new_project_callback(msg_body) {
    var self = this, new_project_name = nil;

    
    new_project_name = msg_body['$[]']("name");
    self.$grab("current_project").$data(new_project_name);
    return self.$set_title();
  });
  
  $def(self, '$load_project_callback', function $$load_project_callback(msg_body) {
    var self = this, modules_found = nil, links_found = nil;

    
    modules_found = msg_body['$[]']("modules");
    links_found = msg_body['$[]']("links");
    self.$clear_all_matrix();
    $send(modules_found, 'each', [], function $$1(module_data){var self = $$1.$$s == null ? this : $$1.$$s;

      
      if (module_data == null) module_data = nil;
      return self.$add_module(module_data);}, {$$s: self});
    return $send(links_found, 'each', [], function $$2(link_data){var self = $$2.$$s == null ? this : $$2.$$s;

      
      if (link_data == null) link_data = nil;
      return self.$add_link(link_data);}, {$$s: self});
  });
  
  $def(self, '$get_modules_callback', function $$get_modules_callback(body) {
    var self = this;

    
    self.$log("getting_display_svg");
    $send(body, 'each', [], function $$3(module_found){var self = $$3.$$s == null ? this : $$3.$$s, content = nil;

      
      if (module_found == null) module_found = nil;
      content = "module is : " + (module_found["name"]) + "\nid:  " + (module_found["id"]) + "}";
      self.$display_svg(module_found["icon"], "lightgray", "get_modules_box");
      return self.$grab("inspector").$text($hash2(["data", "top", "visual"], {"data": content, "top": 60, "visual": $hash2(["size"], {"size": 12})}));}, {$$s: self});
    if (!$truthy(body['$empty?']())) {
      return nil
    };
    return self.$grab("inspector").$text($hash2(["data", "top", "visual", "width"], {"data": "no project", "top": 60, "visual": $hash2(["size"], {"size": 12}), "width": 333}));
  });
  return $def(self, '$place_module_on_slot', function $$place_module_on_slot(module_found) {
    
    return module_found.$box($hash2(["id", "width", "height", "center", "attached"], {"id": "" + (module_found.$id()) + "_svg_support", "width": $rb_divide(module_found.$width(), 2), "height": $rb_divide(module_found.$height(), 2), "center": true, "attached": "invisible_color"}))
  });
};

Opal.modules["application/events"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $send = Opal.send, $return_val = Opal.return_val, $def = Opal.def, $eqeq = Opal.eqeq, $hash2 = Opal.hash2, $truthy = Opal.truthy, self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('touch,log,data,grab,[]=,over,==,[],tag,detached,attached,wait,cell,attach_cell_color,context,request_link_cell,delete,id,include?,<<,drop,each_with_index,cells,cells_over,cell_touch_down,cells_long_touch,cells_up_touch,cells_dropped_item,action_router');
  
  
  $def(self, '$cells_long_touch', function $$cells_long_touch(module_slot) {
    
    return $send(module_slot, 'touch', ["long"], $return_val(nil))
  });
  
  $def(self, '$cell_touch_down', function $$cell_touch_down(module_slot, index) {
    var self = this;

    return $send(module_slot, 'touch', ["down"], function $$1(){var $a, self = $$1.$$s == null ? this : $$1.$$s;

      
      self.$log("down context is: " + (self.$grab("context").$data()));
      return ($a = [0, index], $send(self.$grab("connection").$data(), '[]=', $a), $a[$a.length - 1]);}, {$$s: self})
  });
  
  $def(self, '$cells_over', function $$cells_over(module_slot) {
    
    
    $send(module_slot, 'over', ["enter"], function $$2(){
      if ($eqeq(module_slot.$tag()['$[]']("selected"), true)) {
        return nil
      } else {
        
        module_slot.$detached("cell_color");
        return module_slot.$attached("cell_over");
      }});
    return $send(module_slot, 'over', ["leave"], function $$3(){
      if ($eqeq(module_slot.$tag()['$[]']("selected"), true)) {
        return nil
      } else {
        
        module_slot.$detached("cell_over");
        return module_slot.$attached("cell_color");
      }});
  });
  
  $def(self, '$attach_cell_color', function $$attach_cell_color(current_matrix, source_cell, target_cell) {
    var self = this;

    return $send(self, 'wait', [0.6], function $$4(){
      
      current_matrix.$cell(source_cell).$attached("cell_color");
      current_matrix.$cell(target_cell).$attached("cell_color");
      current_matrix.$cell(source_cell).$detached("cell_connected");
      return current_matrix.$cell(target_cell).$detached("cell_connected");})
  });
  
  $def(self, '$detach_cell_color', function $$detach_cell_color(current_matrix, source_cell, target_cell) {
    var self = this;

    
    current_matrix.$cell(source_cell).$detached("cell_color");
    current_matrix.$cell(target_cell).$detached("cell_color");
    current_matrix.$cell(source_cell).$attached("cell_connected");
    current_matrix.$cell(target_cell).$attached("cell_connected");
    return self.$attach_cell_color(current_matrix, source_cell, target_cell);
  });
  
  $def(self, '$cells_up_touch', function $$cells_up_touch(module_slot, current_matrix, inspector, index) {
    var self = this;

    return $send(module_slot, 'touch', ["up"], function $$5(){var self = $$5.$$s == null ? this : $$5.$$s, selection = nil;

      
      switch (self.$context()['$[]']("mode")) {
        case "default":
          return self.$request_link_cell(current_matrix, inspector, index)
        case "edit":
          return nil
        case "select":
          
          selection = self.$grab("selected").$data();
          if ($eqeq(module_slot.$tag()['$[]']("selected"), true)) {
            
            module_slot.$detached("active_color");
            module_slot.$attached("cell_over");
            module_slot.$tag($hash2(["selected"], {"selected": false}));
            selection.$delete(module_slot.$id());
          } else {
            
            module_slot.$detached("cell_color");
            module_slot.$detached("cell_over");
            module_slot.$attached("active_color");
            module_slot.$tag($hash2(["selected"], {"selected": true}));
            if (!$truthy(selection['$include?'](module_slot.$id()))) {
              selection['$<<'](module_slot.$id())
            };
          };
          return self.$log("selection : " + (selection));
        default:
          return self.$log("else for mouse up ")
      }}, {$$s: self})
  });
  
  $def(self, '$cells_dropped_item', function $$cells_dropped_item(module_slot) {
    var self = this;

    return $send(module_slot, 'drop', [true], function $$6(event_content){var self = $$6.$$s == null ? this : $$6.$$s;

      
      if (event_content == null) event_content = nil;
      return self.$log("received : " + (event_content) + " , on : " + (self.$id()));}, {$$s: self})
  });
  
  $def(self, '$matrix_events', function $$matrix_events(current_matrix) {
    var self = this, inspector = nil;

    
    inspector = self.$grab("inspector");
    return $send(current_matrix.$cells(), 'each_with_index', [], function $$7(module_slot_id, index){var self = $$7.$$s == null ? this : $$7.$$s, module_slot = nil;

      
      if (module_slot_id == null) module_slot_id = nil;
      if (index == null) index = nil;
      module_slot = self.$grab(module_slot_id);
      self.$cells_over(module_slot);
      self.$cell_touch_down(module_slot, index);
      self.$cells_long_touch(module_slot);
      self.$cells_up_touch(module_slot, current_matrix, inspector, index);
      return self.$cells_dropped_item(module_slot);}, {$$s: self});
  });
  return $def(self, '$tool_events', function $$tool_events(support, tool_name, options) {
    var self = this;

    return $send(support, 'touch', [true], function $$8(){var self = $$8.$$s == null ? this : $$8.$$s;

      return self.$action_router(tool_name, options)}, {$$s: self})
  });
};

Opal.modules["application/actions"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $truthy = Opal.truthy, $def = Opal.def, $hash2 = Opal.hash2, $send = Opal.send, $return_val = Opal.return_val, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('grab,[],clear_zone,send,[]=,data,log,controller_sender,each,materials,delete');
  
  
  $def(self, '$action_router', function $$action_router(id_found, options) {
    var self = this, result_zone = nil;

    
    result_zone = self.$grab(options['$[]']("result_zone"));
    if ($truthy(result_zone)) {
      self.$clear_zone(result_zone)
    };
    self.$send("action_" + (id_found), result_zone);
    self.$grab("context").$data()['$[]=']("mode", id_found);
    return self.$log("action_router say, call :  action_" + (id_found) + "\nNew  context: " + (self.$grab("context").$data()));
  });
  
  $def(self, '$action_load', function $$action_load(_targeted_zone) {
    
    return $$('Atome').$controller_sender($hash2(["action"], {"action": "get_projects"}))
  });
  
  $def(self, '$action_clear', function $$action_clear(_targeted_zone) {
    var self = this;

    return $send(self.$grab("selected").$data(), 'each', [], function $$1(selected_slot){var self = $$1.$$s == null ? this : $$1.$$s;

      
      if (selected_slot == null) selected_slot = nil;
      return $send(self.$grab(selected_slot).$materials(), 'each', [], function $$2(child_found){var $a, self = $$2.$$s == null ? this : $$2.$$s;

        
        if (child_found == null) child_found = nil;
        return ($a = self.$grab(child_found), ($a === nil || $a == null) ? nil : $a.$delete(true));}, {$$s: self});}, {$$s: self})
  });
  
  $def(self, '$action_settings', function $$action_settings(_targeted_zone) {
    
    return $$('Atome').$controller_sender($hash2(["action"], {"action": "get_settings"}))
  });
  
  $def(self, '$action_edition', function $$action_edition(_targeted_zone) {
    
    return $$('Atome').$controller_sender($hash2(["action"], {"action": "get_modules"}))
  });
  
  $def(self, '$action_select', $return_val(nil));
  
  $def(self, '$action_group', $return_val(nil));
  
  $def(self, '$action_copy', $return_val(nil));
  
  $def(self, '$action_paste', $return_val(nil));
  
  $def(self, '$action_undo', $return_val(nil));
  return $def(self, '$action_get_modules', function $$action_get_modules(_targeted_zone) {
    
    return $$('Atome').$controller_sender($hash2(["action"], {"action": "get_modules"}))
  });
};

Opal.modules["application/tool_methods"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $hash2 = Opal.hash2, $def = Opal.def, $send = Opal.send, $return_val = Opal.return_val, $rb_plus = Opal.rb_plus, $rb_times = Opal.rb_times, $eqeq = Opal.eqeq, $rb_divide = Opal.rb_divide, $truthy = Opal.truthy, $hash = Opal.hash, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('[],data,grab,set_title,controller_sender,id,clear_all_matrix,each,cells,physical,delete,alert,log,+,*,==,box,width,height,merge,vie_styles,text,/,circle,[]=,materials,detached,attached,detach_cell_color,add_link,clear_zone,link_cells');
  
  
  $def(self, '$get_project', function $$get_project(params) {
    var self = this, new_project_name = nil;

    
    new_project_name = params['$[]']("name");
    self.$grab("current_project").$data(new_project_name);
    self.$set_title();
    return $$('Atome').$controller_sender($hash2(["action", "id"], {"action": "load_project", "id": self.$id()}));
  });
  
  $def(self, '$new_project', function $$new_project() {
    var self = this;

    
    self.$clear_all_matrix();
    return $$('Atome').$controller_sender($hash2(["action"], {"action": "new_project"}));
  });
  
  $def(self, '$clear_all_matrix', function $$clear_all_matrix() {
    var self = this;

    return $send(self.$grab("vie_matrix").$cells(), 'each', [], function $$1(cell_id){var self = $$1.$$s == null ? this : $$1.$$s, cell_found = nil;

      
      if (cell_id == null) cell_id = nil;
      cell_found = self.$grab(cell_id);
      return $send(cell_found.$physical(), 'each', [], function $$2(attached_atome_id){
        
        if (attached_atome_id == null) attached_atome_id = nil;
        return cell_found.$delete($hash2(["id"], {"id": attached_atome_id}));});}, {$$s: self})
  });
  
  $def(self, '$clear_current_matrix', function $$clear_current_matrix() {
    var self = this;

    return self.$alert("terminator")
  });
  
  $def(self, '$clear_slot', function $$clear_slot() {
    var self = this;

    return self.$alert("clearing_the_slot")
  });
  
  $def(self, '$new_matrix', $return_val(nil));
  
  $def(self, '$view_matrix', $return_val(nil));
  
  $def(self, '$add_module', function $$add_module(module_data) {
    var $a, self = this, project_matrix = nil, matrix_found = nil, module_position = nil, active_matrix = nil, current_slot = nil, current_module = nil, module_properties = nil, icon_id = nil;

    
    self.$log("build module: " + (module_data));
    project_matrix = self.$grab("project_matrix");
    matrix_found = module_data['$[]']("position")['$[]']("z");
    module_position = $rb_plus($rb_times(module_data['$[]']("position")['$[]']("y"), 8), module_data['$[]']("position")['$[]']("x"));
    active_matrix = self.$grab("active_matrix").$data();
    if ($eqeq(active_matrix, matrix_found)) {
      
      current_slot = self.$grab("vie_matrix_" + (module_position));
      current_module = current_slot.$box($hash2(["id", "attached", "width", "height", "left", "top"], {"id": module_data['$[]']("id"), "attached": ["invisible_color"], "width": current_slot.$width(), "height": current_slot.$height(), "left": 0, "top": 0}));
      module_properties = self.$vie_styles()['$[]']("module_label").$merge($hash2(["data"], {"data": module_data['$[]']("name")}));
      current_module.$text(module_properties);
      icon_id = "icon_for_" + (module_data['$[]']("id"));
      current_module.$box($hash2(["id", "width", "height", "center"], {"id": icon_id, "width": $rb_divide(current_slot.$width(), 1.7), "height": $rb_divide(current_slot.$height(), 1.7), "center": true}));
      current_module.$circle($hash2(["width", "height", "center"], {"width": 9, "height": 8, "center": true}));
    };
    if ($truthy(project_matrix.$data()['$[]'](matrix_found))) {
      return nil
    } else {
      return ($a = [matrix_found, $hash(module_position, module_data)], $send(project_matrix.$data(), '[]=', $a), $a[$a.length - 1])
    };
  });
  
  $def(self, '$add_link', function $$add_link(link_data) {
    var self = this;

    return self.$log("build link_data: " + (link_data))
  });
  
  $def(self, '$clear_zone', function $$clear_zone(zone) {
    var self = this;

    
    $send(zone.$materials(), 'each', [], function $$3(child_found){var $a, self = $$3.$$s == null ? this : $$3.$$s;

      
      if (child_found == null) child_found = nil;
      return ($a = self.$grab(child_found), ($a === nil || $a == null) ? nil : $a.$delete(true));}, {$$s: self});
    return zone.$delete("materials");
  });
  
  $def(self, '$remove_active', function $$remove_active(items) {
    var self = this;

    return $send(items, 'each', [], function $$4(id_found, _properties){var $a, $b, self = $$4.$$s == null ? this : $$4.$$s;

      
      if (id_found == null) id_found = nil;
      if (_properties == null) _properties = nil;
      ($a = self.$grab(id_found), ($a === nil || $a == null) ? nil : $a.$detached("active_color"));
      return ($b = self.$grab(id_found), ($b === nil || $b == null) ? nil : $b.$attached("inactive_color"));}, {$$s: self})
  });
  
  $def(self, '$link_cells', function $$link_cells(current_matrix, inspector, source_cell, target_cell) {
    var self = this, new_connection = nil;

    
    new_connection = self.$grab("connection").$data();
    inspector.$text($hash2(["data", "visual"], {"data": "linking : " + (new_connection['$[]'](0)) + " and " + (new_connection['$[]'](1)), "visual": $hash2(["size"], {"size": 12})}));
    self.$detach_cell_color(current_matrix, source_cell, target_cell);
    return self.$add_link($hash2(["id", "sourceComponentId", "sourceOutputSlotId", "targetComponentId", "targetInputSlotId", "active"], {"id": "GUID", "sourceComponentId": 0, "sourceOutputSlotId": 2, "targetComponentId": 1, "targetInputSlotId": 0, "active": "true"}));
  });
  return $def(self, '$request_link_cell', function $$request_link_cell(current_matrix, inspector, index) {
    var self = this, source_cell = nil, target_cell = nil;

    
    self.$grab("connection").$data()['$[]='](1, index);
    source_cell = self.$grab("connection").$data()['$[]'](0);
    target_cell = self.$grab("connection").$data()['$[]'](1);
    if ($eqeq(source_cell, target_cell)) {
      return nil
    };
    self.$clear_zone(inspector);
    return self.$link_cells(current_matrix, inspector, source_cell, target_cell);
  });
};

Opal.modules["application/demo_methods"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $klass = Opal.klass, $rb_plus = Opal.rb_plus, $rb_times = Opal.rb_times, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy, $defs = Opal.defs, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('log,[],vie_styles,+,*,each_value,fake_modules_list,box,grab,merge,svg_fetch,id,depth,drag,touch,left,top,attach,send,new_project_callback,fake_new_project_data,get_projects_callback,fake_project_list_data,load_project_callback,fake_project_data,get_settings_callback,get_modules');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $defs(self, '$get_modules', function $$get_modules() {
      var self = this, svg_color = nil, margin = nil, support_style = nil, icon_spacing = nil, index = nil;

      
      self.$log("create the get_modules callback here");
      svg_color = "rgba(180, 120, 50, 1)";
      margin = self.$vie_styles()['$[]']("margin");
      support_style = self.$vie_styles()['$[]']("support_style");
      icon_spacing = $rb_plus(self.$vie_styles()['$[]']("support_style")['$[]']("height"), $rb_times(margin, 2));
      index = 0;
      return $send(self.$fake_modules_list(), 'each_value', [], function $$1(data){var self = $$1.$$s == null ? this : $$1.$$s, icon_found = nil, action_found = nil, id_found = nil, support = nil;

        
        if (data == null) data = nil;
        icon_found = data['$[]']("icon");
        action_found = data['$[]']("action");
        id_found = data['$[]']("id");
        support = self.$grab("inspector").$box(support_style.$merge($hash2(["top", "id"], {"top": $rb_plus($rb_times(icon_spacing, index), margin), "id": "module_support_" + (index)})));
        self.$svg_fetch(icon_found, svg_color, support.$id());
        index = $rb_plus(index, 1);
        support.$depth(5);
        self.item_moved = false;
        $send(support, 'drag', [$hash2(["move"], {"move": true})], function $$2(_e){var self = $$2.$$s == null ? this : $$2.$$s;

          
          if (_e == null) _e = nil;
          return (self.item_moved = true);}, {$$s: self});
        $send(support, 'touch', ["down"], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s, left_found = nil, top_found = nil;

          
          id_found = support.$id();
          self.prev_pos_left = support.$left();
          self.prev_pos_top = support.$top();
          left_found = 0;
          top_found = 0;
          
      let element_id=id_found
    let elem = document.getElementById(element_id);
      let rect = elem.getBoundingClientRect();
      left_found=rect.x
        top_found=rect.y
;
          support.$attach("view");
          support.$left(left_found);
          return support.$top(top_found);}, {$$s: self});
        return $send(support, 'touch', ["up"], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;
          if (self.item_moved == null) self.item_moved = nil;
          if (self.prev_pos_left == null) self.prev_pos_left = nil;
          if (self.prev_pos_top == null) self.prev_pos_top = nil;

          
          if ($truthy(self.item_moved)) {
            
            support.$drag($hash2(["remove"], {"remove": true}));
            
      let element_id=id_found
    let elem = document.getElementById(element_id);
elem.style.transform = "none";
;
            self.$log("1 : " + (self.prev_pos_left));
            $send(support, 'drag', [$hash2(["move"], {"move": true})], function $$5(_e){var self = $$5.$$s == null ? this : $$5.$$s;

              
              if (_e == null) _e = nil;
              return (self.item_moved = true);}, {$$s: self});
          } else {
            
            self.$log("moved  is " + (self.item_moved));
            self.$send(action_found, id_found);
          };
          support.$attach("inspector");
          support.$left(self.prev_pos_left);
          support.$top(self.prev_pos_top);
          self.item_moved = false;
          return self.$log("2 : " + (support.$left()));}, {$$s: self});}, {$$s: self});
    });
    return $defs(self, '$controller_sender', function $$controller_sender(message) {
      var self = this, action_found = nil;

      
      action_found = message['$[]']("action");
      self.$log("controller_sender, received: " + (message));
      
      switch (action_found) {
        case "new_project":
          return self.$new_project_callback(self.$fake_new_project_data())
        case "get_projects":
          return self.$get_projects_callback(self.$fake_project_list_data())
        case "load_project":
          return self.$load_project_callback(self.$fake_project_data())
        case "get_settings":
          return self.$get_settings_callback()
        case "get_modules":
          return $$('Atome').$get_modules()
        default:
          return self.$log("controller_sender say : nothing to get")
      };
    });
  })($nesting[0], null, $nesting)
};

Opal.queue(function(Opal) {/* Generated by Opal 1.7.3 */
  var $hash2 = Opal.hash2, self = Opal.top, nil = Opal.nil, default_project_name = nil, tools_list = nil, current_matrix = nil;

  Opal.add_stubs('require,[]=,data,grab,attached,text,merge,[],vie_styles,fill_tool_zone,build_matrix,matrix_events,data=,log,cell');
  
  self.$require("application/fake_data");
  self.$require("application/experimental_api");
  self.$require("application/version");
  self.$require("application/styles");
  self.$require("application/ui_template");
  self.$require("application/utilities");
  self.$require("application/communication");
  self.$require("application/callbacks");
  self.$require("application/events");
  self.$require("application/actions");
  self.$require("application/tool_methods");
  self.$require("application/demo_methods");
  self.$grab("debug").$data()['$[]=']("debug", true);
  self.$grab("view").$attached("back_color");
  default_project_name = "untitled";
  self.$grab("action").$text(self.$vie_styles()['$[]']("title").$merge($hash2(["data"], {"data": default_project_name})));
  tools_list = $hash2(["load", "clear", "settings", "edition", "select", "group", "copy", "paste", "undo"], {"load": $hash2(["result_zone"], {"result_zone": "inspector"}), "clear": $hash2(["result_zone"], {"result_zone": nil}), "settings": $hash2(["result_zone"], {"result_zone": "inspector"}), "edition": $hash2(["result_zone"], {"result_zone": "inspector"}), "select": $hash2(["result_zone"], {"result_zone": nil}), "group": $hash2(["result_zone"], {"result_zone": nil}), "copy": $hash2(["result_zone"], {"result_zone": nil}), "paste": $hash2(["result_zone"], {"result_zone": nil}), "undo": $hash2(["result_zone"], {"result_zone": nil})});
  self.$fill_tool_zone(tools_list);
  current_matrix = self.$build_matrix();
  self.$matrix_events(current_matrix);
  self.$grab("active_matrix")['$data='](0);
  self.$log("active matrix is " + (self.$grab("active_matrix").$data()));
  current_matrix.$cell(1).$text($hash2(["data", "visual"], {"data": "hello", "visual": $hash2(["size"], {"size": 12})}));
  return current_matrix.$cell(9).$text($hash2(["data", "visual"], {"data": "cool", "visual": $hash2(["size"], {"size": 12})}));
});
