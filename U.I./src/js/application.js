Opal.queue(function(Opal) {/* Generated by Opal 1.7.3 */
  var $gvars = Opal.gvars, nil = Opal.nil;

  return ($gvars.host = "browser")
});

Opal.modules["application/fake_data"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $hash2 = Opal.hash2, $def = Opal.def, self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('[]');
  
  
  $def(self, '$get_icon', function $$get_icon(icon_name) {
    var load = nil, clear = nil, settings = nil, edition = nil, select = nil, group = nil, copy = nil, paste = nil, undo = nil, midi = nil, saw = nil, sin = nil, square = nil, triangle = nil, microphone = nil, speaker = nil, midi_in = nil, midi_out = nil, waveform = nil, low_pass = nil, high_pass = nil, band_pass = nil, icons = nil;

    
    load = "<path  d=\"M 848.62,922 L 186.38,922 C 125.42,922 76,871.39 76,808.99 L 76,243.87 C 76,181.5 125.42,130.89 186.38,130.89 L 344.58,130.89 344.05,130.89 C 386.9,130.89 425.87,155.91 443.98,195.05 L 466.73,243.89 848.62,243.89 C 909.58,243.89 959,294.5 959,356.92 L 959,808.99 C 959,871.39 909.58,922 848.62,922 Z M 149.58,461.65 L 149.58,808.99 C 149.58,829.79 166.07,846.65 186.38,846.65 L 848.62,846.65 C 868.93,846.65 885.42,829.79 885.42,808.99 L 885.42,461.65 149.58,461.65 Z M 149.58,386.29 L 885.42,386.29 885.42,356.92 C 885.42,336.11 868.93,319.25 848.63,319.25 L 443.92,319.25 444.15,319.25 C 429.87,319.25 416.89,310.91 410.85,297.87 L 378.06,227.7 378.02,227.62 C 371.99,214.58 359,206.24 344.72,206.24 L 186.38,206.24 C 166.07,206.24 149.58,223.1 149.58,243.89 L 149.58,386.29 Z M 149.58,386.29\" />\n";
    clear = "<path  d=\"M772.096 368.64H654.336V153.6c0-78.848-63.488-142.336-142.336-142.336S369.664 74.752 369.664 153.6v215.04H251.904c-94.208 0-171.008 76.8-171.008 171.008v59.392c0 53.248 44.032 97.28 97.28 97.28h4.096l-51.2 121.856c-18.432 43.008-13.312 92.16 12.288 132.096 25.6 38.912 69.632 62.464 116.736 62.464h501.76c48.128 0 92.16-23.552 117.76-64.512 25.6-39.936 29.696-90.112 9.216-133.12L833.536 696.32h12.288c53.248 0 97.28-44.032 97.28-97.28v-59.392c0-95.232-76.8-171.008-171.008-171.008zM451.584 153.6c0-32.768 26.624-60.416 60.416-60.416 32.768 0 60.416 26.624 60.416 60.416v215.04H451.584V153.6zM808.96 904.192c-11.264 16.384-28.672 26.624-49.152 26.624h-501.76c-19.456 0-36.864-9.216-48.128-25.6s-12.288-35.84-5.12-54.272l63.488-150.528h12.288v124.928c0 22.528 18.432 40.96 40.96 40.96s40.96-18.432 40.96-40.96v-122.88-2.048h40.96v124.928c0 22.528 18.432 40.96 40.96 40.96s40.96-18.432 40.96-40.96v-122.88-3.072h40.96v125.952c0 22.528 18.432 40.96 40.96 40.96s40.96-18.432 40.96-40.96v-122.88-4.096h40.96v126.976c0 22.528 18.432 40.96 40.96 40.96s40.96-18.432 40.96-40.96v-122.88-5.12h14.336L815.104 849.92c6.144 16.384 5.12 36.864-6.144 54.272z m52.224-306.176c0 8.192-7.168 15.36-15.36 15.36H178.176c-8.192 0-15.36-7.168-15.36-15.36v-59.392c0-49.152 39.936-89.088 89.088-89.088h520.192c49.152 0 89.088 39.936 89.088 89.088v59.392z\"/>\n";
    settings = "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1024\" height=\"1024\"  xml:space=\"preserve\" id=\"canvas1\">\n" + "    <path d=\"M 633.21,85.33 C 646.87,123.75 690.75,141.93 727.6,124.42 837.06,72.39 951.27,186.6 899.25,296.06 881.74,332.91 899.91,376.8 938.34,390.45 1052.55,431.07 1052.55,592.59 938.34,633.21 899.91,646.87 881.74,690.75 899.25,727.6 951.27,837.06 837.06,951.27 727.6,899.25 690.75,881.74 646.87,899.91 633.21,938.34 592.59,1052.55 431.07,1052.55 390.45,938.34 376.8,899.91 332.91,881.74 296.06,899.25 186.6,951.27 72.39,837.06 124.42,727.6 141.93,690.75 123.75,646.87 85.33,633.21 -28.89,592.59 -28.89,431.07 85.32,390.45 123.75,376.8 141.93,332.91 124.42,296.06 72.39,186.6 186.6,72.39 296.06,124.42 332.91,141.93 376.8,123.75 390.45,85.33 393.59,76.51 397.52,68.22 402.21,60.5 428.03,18.04 475.26,-4.19 523.8,0.2 573.31,4.68 615.66,35.97 633.21,85.32 L 633.21,85.33 Z M 576.68,105.42 C 567.16,78.67 545.11,62.37 518.39,59.96 492.05,57.58 467.06,69.34 453.48,91.67 450.93,95.87 448.75,100.46 446.99,105.42 421.42,177.35 339.26,211.38 270.31,178.61 211.83,150.81 150.81,211.83 178.61,270.31 211.38,339.26 177.35,421.42 105.42,446.99 44.41,468.69 44.41,554.98 105.42,576.68 177.35,602.24 211.38,684.4 178.61,753.35 150.81,811.83 211.83,872.85 270.31,845.06 339.26,812.28 421.42,846.31 446.99,918.24 468.69,979.25 554.98,979.25 576.68,918.24 602.24,846.31 684.4,812.28 753.35,845.06 811.83,872.85 872.85,811.83 845.06,753.36 812.28,684.4 846.31,602.24 918.24,576.67 979.25,554.98 979.25,468.69 918.24,446.99 846.31,421.42 812.28,339.26 845.06,270.31 872.85,211.83 811.83,150.81 753.36,178.61 684.4,211.38 602.24,177.35 576.67,105.42 L 576.68,105.42 Z M 576.68,105.42\" />\n" + "    <path d=\"M 701,511.5 C 701,616.16 616.16,701 511.5,701 406.84,701 322,616.16 322,511.5 322,406.84 406.84,322 511.5,322 616.16,322 701,406.84 701,511.5 Z M 641,511.5 C 641,439.98 583.02,382 511.5,382 439.98,382 382,439.98 382,511.5 382,583.02 439.98,641 511.5,641 583.02,641 641,583.02 641,511.5 Z M 641,511.5\" />\n" + "</svg>\n";
    edition = "<path  d=\"M257.7 752c2 0 4-0.2 6-0.5L431.9 722c2-0.4 3.9-1.3 5.3-2.8l423.9-423.9c3.9-3.9 3.9-10.2 0-14.1L694.9 114.9c-1.9-1.9-4.4-2.9-7.1-2.9s-5.2 1-7.1 2.9L256.8 538.8c-1.5 1.5-2.4 3.3-2.8 5.3l-29.5 168.2c-1.9 11.1 1.5 21.9 9.4 29.8 6.6 6.4 14.9 9.9 23.8 9.9z m67.4-174.4L687.8 215l73.3 73.3-362.7 362.6-88.9 15.7 15.6-89zM880 836H144c-17.7 0-32 14.3-32 32v36c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-36c0-17.7-14.3-32-32-32z\"/>\n";
    select = "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1024\" height=\"1024\"  xml:space=\"preserve\" id=\"canvas1\">\n" + "    <path d=\"M 156.22,-0.19 L 156.22,-0.19 C 69.72,-0.19 -0.4,69.96 -0.4,156.48 L -0.4,730.93 -0.4,730.93 C -0.4,817.46 69.72,887.6 156.22,887.6 L 417.25,887.6 417.25,887.6 C 446.09,887.6 469.46,864.22 469.46,835.38 469.46,806.54 446.09,783.16 417.25,783.16 L 156.22,783.16 156.22,783.16 C 127.39,783.16 104.01,759.78 104.01,730.93 L 104.01,156.48 104.01,156.48 C 104.01,127.64 127.39,104.26 156.22,104.26 L 730.49,104.26 730.49,104.26 C 759.33,104.26 782.7,127.64 782.7,156.48 L 782.7,417.6 782.7,417.6 C 782.7,446.44 806.07,469.82 834.91,469.82 863.74,469.82 887.11,446.44 887.11,417.6 L 887.11,156.48 887.11,156.48 C 887.11,69.96 816.99,-0.19 730.49,-0.19 L 156.22,-0.19 Z M 516.71,465.59 L 568.29,912.56 568.31,912.77 C 570.07,927.09 583.09,937.26 597.4,935.51 604.59,934.62 611.08,930.8 615.34,924.94 L 713.37,792.14 852.92,1000.14 852.96,1000.21 C 868.67,1024.4 901,1031.28 925.18,1015.57 949.36,999.86 956.23,967.52 940.53,943.33 940.2,942.82 939.86,942.31 939.51,941.82 L 800.03,733.91 952.27,689 952.09,689.05 C 965.94,685.08 973.96,670.62 969.98,656.75 967.99,649.79 963.19,643.97 956.74,640.69 L 554.3,439.22 554.49,439.31 C 541.64,432.77 525.92,437.87 519.38,450.72 517.09,455.22 516.15,460.29 516.68,465.31 L 516.71,465.59 Z M 516.71,465.59\" />\n" + "</svg>\n";
    group = "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1024\" height=\"1024\"  xml:space=\"preserve\" id=\"canvas1\">\n" + "    <path  d=\"M 653,85 L 155,85 C 121.86,85 95,111.86 95,145 L 95,628 C 95,661.14 121.86,688 155,688 L 653,688 C 686.14,688 713,661.14 713,628 L 713,145 C 713,111.86 686.14,85 653,85 Z M 807,90 L 807,683 C 807,732.71 766.71,773 717,773 L 90,773 C 40.29,773 -0,732.71 0,683 L 0,90 0,89.7 C 0.16,40.13 40.4,-0 90,-0 L 717,-0 C 766.71,0 807,40.29 807,90 Z M 807,90\" />\n" + "    <path  d=\"M 900.53,462.39 L 501.27,462.39 C 474.7,462.39 453.16,484.31 453.16,511.36 L 453.16,905.64 C 453.16,932.69 474.7,954.61 501.27,954.61 L 900.53,954.61 C 927.1,954.61 948.64,932.69 948.64,905.64 L 948.64,511.36 C 948.64,484.31 927.1,462.39 900.53,462.39 Z M 1024,466.47 L 1024,950.53 C 1024,991.11 991.69,1024 951.84,1024 L 449.16,1024 C 409.31,1024 377,991.11 377,950.53 L 377,466.47 377,466.22 C 377.13,425.76 409.39,393 449.16,393 L 951.84,393 C 991.69,393 1024,425.89 1024,466.47 Z M 1024,466.47\" />\n" + "</svg>\n";
    copy = "<path  d=\"M672 832 224 832c-52.928 0-96-43.072-96-96L128 160c0-52.928 43.072-96 96-96l448 0c52.928 0 96 43.072 96 96l0 576C768 788.928 724.928 832 672 832zM224 128C206.368 128 192 142.368 192 160l0 576c0 17.664 14.368 32 32 32l448 0c17.664 0 32-14.336 32-32L704 160c0-17.632-14.336-32-32-32L224 128z\"/>\n" + "<path  d=\"M800 960 320 960c-17.664 0-32-14.304-32-32s14.336-32 32-32l480 0c17.664 0 32-14.336 32-32L832 256c0-17.664 14.304-32 32-32s32 14.336 32 32l0 608C896 916.928 852.928 960 800 960z\"/>\n" + "<path  d=\"M544 320 288 320c-17.664 0-32-14.336-32-32s14.336-32 32-32l256 0c17.696 0 32 14.336 32 32S561.696 320 544 320z\"/>\n" + "<path  d=\"M608 480 288.032 480c-17.664 0-32-14.336-32-32s14.336-32 32-32L608 416c17.696 0 32 14.336 32 32S625.696 480 608 480z\"/>\n" + "<path  d=\"M608 640 288 640c-17.664 0-32-14.304-32-32s14.336-32 32-32l320 0c17.696 0 32 14.304 32 32S625.696 640 608 640z\"/>\n";
    paste = "<path  d=\"M810.666667 85.333333l-178.56 0c-17.493333-49.493333-64.426667-85.333333-120.106667-85.333333s-102.613333 35.84-120.106667 85.333333l-178.56 0c-47.146667 0-85.333333 38.186667-85.333333 85.333333l0 682.666667c0 47.146667 38.186667 85.333333 85.333333 85.333333l597.333333 0c47.146667 0 85.333333-38.186667 85.333333-85.333333l0-682.666667c0-47.146667-38.186667-85.333333-85.333333-85.333333zM512 85.333333c23.466667 0 42.666667 18.986667 42.666667 42.666667s-19.2 42.666667-42.666667 42.666667-42.666667-18.986667-42.666667-42.666667 19.2-42.666667 42.666667-42.666667zM810.666667 853.333333l-597.333333 0 0-682.666667 85.333333 0 0 128 426.666667 0 0-128 85.333333 0 0 682.666667z\"/>\n";
    undo = "<path d=\"M 514.58,7 C 380.84,7.24 259.41,59.94 169.76,145.62 L 97.69,73.54 C 67.17,43.03 15,64.64 15,107.79 L 15,378.34 C 15,405.09 36.68,426.77 63.44,426.77 L 333.99,426.77 C 377.14,426.77 398.75,374.6 368.24,344.09 L 283.98,259.83 C 346.27,201.51 426.87,169.2 512.49,168.46 698.97,166.85 856.15,317.76 854.54,510.42 853.01,693.19 704.83,846.55 515.5,846.55 432.5,846.55 354.05,816.93 292.23,762.68 282.66,754.28 268.2,754.8 259.2,763.8 L 179.16,843.84 C 169.32,853.67 169.81,869.7 180.13,879.02 268.88,959.19 386.49,1008 515.5,1008 791.92,1008 1016,783.92 1016,507.5 1016,231.4 790.68,6.51 514.58,7 Z M 514.58,7\" />\n";
    midi = "<path d=\"M21.25 4.002a.75.75 0 0 1 .743.648l.007.102v14.5a.75.75 0 0 1-.648.743l-.102.007H2.75a.75.75 0 0 1-.743-.648L2 19.252v-14.5a.75.75 0 0 1 .648-.743l.102-.007h18.5ZM6 12.5H3.5v6h17v-6H18v3.749a.75.75 0 0 1-1.493.102l-.007-.102V12.5h-2v3.749a.75.75 0 0 1-1.493.102L13 16.25V12.5h-2v3.749a.75.75 0 0 1-1.493.102L9.5 16.25V12.5h-2v3.749a.75.75 0 0 1-1.493.102L6 16.25V12.5Zm14.5-7h-17v5.5h17V5.5Zm-11.25 2a.75.75 0 1 1 0 1.5.75.75 0 0 1 0-1.5Zm8 0a.75.75 0 0 1 .102 1.493l-.102.007h-2.5a.75.75 0 0 1-.102-1.493l.102-.007h2.5Zm-11-.001a.75.75 0 1 1 0 1.5.75.75 0 0 1 0-1.5Z\" fill=\"#212121\"/>\n";
    saw = "    <path id=\"wavesawCanvas-wavesawtoothCanvasbezier\" stroke=\"none\" fill=\"rgb(0, 0, 0)\" d=\"M 981.05,520.98 L 537.56,793.87 537.64,793.82 C 527.11,800.39 513.85,800.73 503.02,794.72 L 502.8,794.59 C 492.1,788.41 485.53,777.02 485.53,764.7 L 485.53,280.07 94.06,520.98 93.93,521.02 C 77.47,530.19 56.71,524.22 47.58,507.76 39.01,492.28 43.66,472.84 58.33,462.95 L 501.74,190.1 501.57,190.19 C 517.56,180.21 538.58,185.07 548.56,201.06 551.97,206.48 553.76,212.74 553.76,219.14 L 553.76,703.9 945.23,462.99 945.36,462.95 C 961.82,453.78 982.59,459.75 991.72,476.21 1000.29,491.69 995.64,511.13 980.97,521.02 L 981.05,520.98 Z M 981.05,520.98\" />\n";
    sin = "    <path id=\"wavesineCanvas-path\" stroke=\"none\" fill=\"rgb(0, 0, 0)\" d=\"M 1022.03,477.15 C 921.8,692.27 833.41,793 742.74,793 628.39,793 557.32,639.4 481.69,477.15 422.46,348.62 355.03,203.22 287.14,203.22 219.26,203.22 121.76,374.6 74.38,477.15 L 74.34,477.27 C 67.7,496.55 46.7,506.8 27.43,500.16 8.16,493.52 -2.09,472.51 4.55,453.23 5.39,450.79 6.48,448.45 7.81,446.24 108.09,231.03 196.48,130.3 287.14,130.3 401.5,130.3 472.57,283.9 548.2,446.15 607.43,574.68 674.86,720.08 742.74,720.08 817.46,720.08 908.13,548.7 955.51,446.15 L 955.46,446.24 C 965.96,428.76 988.63,423.11 1006.1,433.61 1021.03,442.58 1027.66,460.79 1021.99,477.27 L 1022.03,477.15 Z M 1022.03,477.15\" />\n" + "\n";
    square = "    <path id=\"wavesquareCanvas-path\" stroke=\"none\" fill=\"rgb(0, 0, 0)\" d=\"M 1024,462.5 L 1024,706.68 1024,706.68 C 1024,735.57 1000.29,759 971.03,759 L 512,759 512,759 C 482.75,759 459.03,735.57 459.03,706.68 L 459.03,270.65 105.93,270.65 105.93,462.5 105.93,462.5 C 105.93,491.4 82.22,514.82 52.97,514.82 23.71,514.82 0,491.4 0,462.5 L 0,218.32 0,218.32 C 0,189.43 23.71,166 52.97,166 L 512,166 512,166 C 541.25,166 564.97,189.43 564.97,218.32 L 564.97,654.35 918.07,654.35 918.07,462.5 918.07,462.5 C 918.07,433.6 941.78,410.18 971.03,410.18 1000.29,410.18 1024,433.6 1024,462.5 Z M 1024,462.5\" />\n";
    triangle = "    <path id=\"wavetriangleCanvas-path\" stroke=\"none\" fill=\"rgb(0, 0, 0)\" d=\"M 1005.46,537.79 L 780.3,849.33 780.51,849.04 C 764.18,872.33 732.05,877.99 708.74,861.68 704.07,858.41 699.97,854.39 696.61,849.77 L 287.98,284.65 104.82,537.79 104.95,537.59 C 90.17,562.17 58.24,570.12 33.65,555.35 9.05,540.58 1.09,508.68 15.87,484.1 17.27,481.77 18.85,479.55 20.6,477.47 L 245.98,165.66 245.77,165.95 C 262.1,142.66 294.23,137 317.54,153.31 322.21,156.58 326.31,160.61 329.67,165.22 L 738.3,730.34 921.45,477.21 921.23,477.47 C 939.68,455.5 972.45,452.63 994.44,471.07 1014.02,487.48 1018.74,515.69 1005.58,537.59 L 1005.46,537.79 Z M 1005.46,537.79\" />\n";
    microphone = "    <path id=\"microphoneCanvas-xMLID_57_\" stroke=\"none\" fill=\"rgb(0, 0, 0)\" d=\"M 754.14,976.78 C 754.14,1001.1 734.23,1021 708.79,1021 L 304,1021 C 278.56,1021 258.65,1001.1 258.65,976.78 258.65,952.46 278.56,932.57 304,932.57 L 467.68,932.57 467.68,857.4 C 467.68,836.39 485.38,818.71 507.5,818.71 529.62,818.71 547.32,836.39 547.32,857.4 L 547.32,932.57 709.9,932.57 C 734.23,932.57 754.14,952.46 754.14,976.78 Z M 744.18,324.58 L 744.18,324.58 C 722.06,324.58 704.37,342.26 704.37,363.27 L 704.37,650.68 C 704.37,667.26 697.73,682.74 686.67,693.79 675.61,704.85 661.23,711.48 645.75,711.48 L 645.75,711.48 369.25,711.48 C 353.77,711.48 339.39,704.85 328.33,693.79 317.27,681.63 310.63,667.26 310.63,650.68 L 310.63,363.27 C 310.63,342.26 292.94,324.58 270.82,324.58 L 270.82,324.58 C 248.7,324.58 231,342.26 231,363.27 L 231,650.68 C 231,687.16 245.38,722.53 270.82,747.96 297.36,774.49 331.65,788.86 369.25,788.86 L 645.75,788.86 645.75,788.86 C 683.35,788.86 717.64,774.49 744.18,747.96 769.62,721.43 784,687.16 784,650.68 L 784,363.27 C 784,342.26 766.3,324.58 744.18,324.58 Z M 388.05,626.36 C 372.57,607.57 363.72,585.46 363.72,563.35 L 363.72,102.38 C 363.72,80.27 372.57,57.06 389.16,38.27 406.85,16.16 430.08,4 453.31,4 L 453.31,4 560.59,4 C 611.46,4 651.28,57.06 651.28,101.28 L 651.28,561.14 C 651.28,605.36 611.46,656.21 561.69,656.21 L 561.69,656.21 454.41,658.42 C 430.08,658.42 405.75,647.36 388.05,626.36 Z M 453.31,563.35 C 453.31,565.56 456.62,569.98 458.84,572.19 L 555.06,572.19 C 557.27,569.98 560.59,565.56 560.59,562.24 L 560.59,101.28 C 560.59,99.07 557.27,94.65 555.06,92.43 L 458.84,92.43 C 456.62,94.65 453.31,100.17 453.31,102.38 L 453.31,563.35 Z M 453.31,563.35\" />\n";
    speaker = "  <path id=\"path\" d=\"M522.24 56.32a153.6 153.6 0 0 1 215.04 30.72l1.6896 2.304A153.6 153.6 0 0 1 768 179.2v665.6a153.6 153.6 0 0 1-245.76 122.88l-232.0896-174.08H153.6a153.6 153.6 0 0 1-153.6-151.04V384a153.6 153.6 0 0 1 153.6-153.6h136.5504z m477.7984 84.6848C1150.7712 235.776 1228.8 362.496 1228.8 517.12c0 154.624-78.0288 281.344-228.7616 376.1664a51.2 51.2 0 0 1-54.4768-86.7328C1067.8784 729.6512 1126.4 634.5216 1126.4 517.12c0-117.4016-58.5216-212.48-180.8384-289.4336a51.2 51.2 0 1 1 54.4768-86.6816zM655.36 148.48a51.2 51.2 0 0 0-71.68-10.24L324.2496 332.8H153.6a51.2 51.2 0 0 0-51.2 51.2v256a51.2 51.2 0 0 0 51.2 51.2h170.6496l259.4304 194.56a51.2 51.2 0 0 0 81.92-40.96v-665.6a51.2 51.2 0 0 0-10.24-30.72z m267.5712 171.52c82.2784 50.944 126.6688 117.504 126.6688 197.12 0 79.616-44.3904 146.2272-126.6688 197.12a51.2 51.2 0 0 1-53.8624-87.04c54.272-33.6384 78.1312-69.4272 78.1312-110.08 0-40.6528-23.8592-76.4416-78.1312-110.08a51.2 51.2 0 1 1 53.8624-87.04z\"/>\n" + "\n";
    midi_in = "     <g id=\"midi_outCanvas-group\">\n" + "        <path id=\"midi_outCanvas-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"90\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"rgb(128, 128, 128)\" d=\"M 0,0 C 0,273.33 0,271.39 0,271.39\" transform=\"translate(521, 977.39) rotate(180)\"  />\n" + "        <path id=\"midi_outCanvas-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"90\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"rgb(128, 128, 128)\" d=\"M 0,-233.88 C 0,-144.87 0,-145.5 0,-145.5\" transform=\"translate(519.77, 960.88)\"  />\n" + "        <path id=\"midi_outCanvas-bezier3\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"90\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"rgb(128, 128, 128)\" d=\"M 0,-93 C -0,0.67 0,-0 0,-0\" transform=\"translate(519.88, 727) rotate(-135)\"  />\n" + "        <path id=\"midi_outCanvas-bezier4\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"90\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"rgb(128, 128, 128)\" d=\"M 209.92,144.87 C 209.92,238.54 209.92,237.87 209.92,237.87\" transform=\"translate(837.52, 746.77) rotate(135)\"  />\n" + "    </g>\n" + "    <g id=\"midi_outCanvas-group3\">\n" + "        <path id=\"midi_outCanvas-oval\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"90\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 206.57,611.75 C 106.46,438.37 165.87,216.67 339.25,116.57 512.63,16.46 734.33,75.87 834.43,249.25 901.45,365.33 898.95,508.92 827.92,622.6\" />\n" + "        <ellipse id=\"midi_outCanvas-oval2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"50\" stroke-miterlimit=\"10\" fill=\"rgb(0, 0, 0)\" cx=\"276\" cy=\"430.5\" rx=\"43\" ry=\"43.5\" />\n" + "        <ellipse id=\"midi_outCanvas-oval3\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"50\" stroke-miterlimit=\"10\" fill=\"rgb(0, 0, 0)\" cx=\"362\" cy=\"269.5\" rx=\"43\" ry=\"43.5\" />\n" + "        <circle id=\"midi_outCanvas-oval4\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"50\" stroke-miterlimit=\"10\" fill=\"rgb(0, 0, 0)\" cx=\"520.5\" cy=\"204.5\" r=\"43.5\" />\n" + "        <ellipse id=\"midi_outCanvas-oval5\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"50\" stroke-miterlimit=\"10\" fill=\"rgb(0, 0, 0)\" cx=\"679\" cy=\"252.5\" rx=\"43\" ry=\"43.5\" />\n" + "        <ellipse id=\"midi_outCanvas-oval6\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"50\" stroke-miterlimit=\"10\" fill=\"rgb(0, 0, 0)\" cx=\"765\" cy=\"430.5\" rx=\"43\" ry=\"43.5\" />\n" + "    </g>\n";
    midi_out = "    <g id=\"midi_outCanvas-group\" transform=\"translate(520.38, 841.69) rotate(-180)\" >\n" + "        <path id=\"midi_outCanvas-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"90\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"rgb(128, 128, 128)\" d=\"M 0,0 C 0,273.33 0,271.39 0,271.39\" transform=\"translate(0.62, 135.69) rotate(180)\"  />\n" + "        <path id=\"midi_outCanvas-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"90\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"rgb(128, 128, 128)\" d=\"M 0,-233.88 C 0,-144.87 0,-145.5 0,-145.5\" transform=\"translate(-0.62, 119.19)\"  />\n" + "        <path id=\"midi_outCanvas-bezier3\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"90\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"rgb(128, 128, 128)\" d=\"M 0,-93 C -0,0.67 0,-0 0,-0\" transform=\"translate(-0.5, -114.69) rotate(-135)\"  />\n" + "        <path id=\"midi_outCanvas-bezier4\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"90\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"rgb(128, 128, 128)\" d=\"M 209.92,144.87 C 209.92,238.54 209.92,237.87 209.92,237.87\" transform=\"translate(317.13, -94.93) rotate(135)\"  />\n" + "    </g>\n" + "    <g id=\"midi_outCanvas-group3\">\n" + "        <path id=\"midi_outCanvas-oval\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"90\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 206.57,611.75 C 106.46,438.37 165.87,216.67 339.25,116.57 512.63,16.46 734.33,75.87 834.43,249.25 901.45,365.33 898.95,508.92 827.92,622.6\" />\n" + "        <ellipse id=\"midi_outCanvas-oval2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"50\" stroke-miterlimit=\"10\" fill=\"rgb(0, 0, 0)\" cx=\"276\" cy=\"430.5\" rx=\"43\" ry=\"43.5\" />\n" + "        <ellipse id=\"midi_outCanvas-oval3\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"50\" stroke-miterlimit=\"10\" fill=\"rgb(0, 0, 0)\" cx=\"362\" cy=\"269.5\" rx=\"43\" ry=\"43.5\" />\n" + "        <circle id=\"midi_outCanvas-oval4\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"50\" stroke-miterlimit=\"10\" fill=\"rgb(0, 0, 0)\" cx=\"520.5\" cy=\"204.5\" r=\"43.5\" />\n" + "        <ellipse id=\"midi_outCanvas-oval5\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"50\" stroke-miterlimit=\"10\" fill=\"rgb(0, 0, 0)\" cx=\"679\" cy=\"252.5\" rx=\"43\" ry=\"43.5\" />\n" + "        <ellipse id=\"midi_outCanvas-oval6\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"50\" stroke-miterlimit=\"10\" fill=\"rgb(0, 0, 0)\" cx=\"765\" cy=\"430.5\" rx=\"43\" ry=\"43.5\" />\n" + "    </g>\n";
    waveform = "  <path id=\"path\" d=\"M584.1 851.5l-145-592.7-111.8 441.9-75.2-209.5H64v-40h216.3l40.3 112.6L439.8 93.2l143.9 588.1L697 207.4l74.9 243.8h187.4v40H742.4l-40.6-132z\"\n" + "        fill=\"#606266\"/>\n" + "  <path id=\"path1\" d=\"M584.1 866.5c-6.9 0-12.9-4.7-14.6-11.4L438.9 320.9l-97.1 383.4c-1.6 6.4-7.2 11-13.8 11.3-6.6 0.3-12.6-3.7-14.8-9.9l-71.6-199.5H64c-8.3 0-15-6.7-15-15v-40c0-8.3 6.7-15 15-15h216.2c6.3 0 12 4 14.1 9.9l23.8 66.3 107.1-423c1.7-6.7 7.7-11.3 14.5-11.3h0.1c6.9 0 12.9 4.7 14.5 11.4l129.1 527.9 98.9-413.6c1.6-6.6 7.4-11.3 14.1-11.5 6.8-0.2 12.8 4.1 14.8 10.6L783 436.2h176.3c8.3 0 15 6.7 15 15v40c0 8.3-6.7 15-15 15H742.4c-6.6 0-12.4-4.3-14.3-10.6l-24.4-79.4-105 438.8c-1.6 6.7-7.6 11.5-14.6 11.5z m-145-622.7s0.1 0 0 0c7 0 12.9 4.7 14.6 11.4l130.2 532.4 103.3-431.9c1.6-6.6 7.4-11.3 14.1-11.5 6.8-0.2 12.8 4.1 14.8 10.6l37.3 121.4h190.9v-10H771.9c-6.6 0-12.4-4.3-14.3-10.6l-58.8-191.2-100.6 420.4c-1.6 6.7-7.6 11.5-14.6 11.5-6.9 0-12.9-4.7-14.6-11.4L439.6 155.3 335.2 567.5c-1.6 6.4-7.2 11-13.8 11.3-6.6 0.3-12.6-3.7-14.8-9.9l-36.8-102.7H79v10h173.1c6.3 0 12 4 14.1 9.9l58.5 163.2 99.8-394.2c1.8-6.7 7.8-11.3 14.6-11.3z\"\n" + "        fill=\"#606266\"/>\n";
    low_pass = " <g id=\"lowpassCanvas-group\">\n" + "        <path id=\"lowpassCanvas-p1\" fill-rule=\"evenodd\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"90\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"7\" fill=\"none\" d=\"M 44.92,185.5 L 668.01,185.5 979,666\" />\n" + "    </g>\n";
    high_pass = "  <g id=\"high_passCanvas-group\">\n" + "        <path id=\"high_passCanvas-p1\" fill-rule=\"evenodd\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"90\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"7\" fill=\"none\" d=\"M 979,216.69 L 355.97,216.69 45,697\" />\n" + "    </g>\n";
    band_pass = "    <g id=\"band_passCanvas-group\">\n" + "    </g>\n" + "    <g id=\"band_passCanvas-group2\">\n" + "        <path id=\"band_passCanvas-p1\" fill-rule=\"evenodd\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"90\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"7\" fill=\"none\" d=\"M 304.13,247.49 L 745.28,247.49 965.46,587.38\" />\n" + "        <path id=\"band_passCanvas-p2\" fill-rule=\"evenodd\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"90\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"7\" fill=\"none\" d=\"M 718.06,248 L 276.92,248 56.73,587.89\" />\n" + "    </g>\n";
    icons = $hash2(["load", "clear", "settings", "edition", "select", "group", "copy", "paste", "undo", "midi", "saw", "sin", "square", "triangle", "microphone", "speaker", "midi_in", "midi_out", "waveform", "low_pass", "high_pass", "band_pass"], {"load": load, "clear": clear, "settings": settings, "edition": edition, "select": select, "group": group, "copy": copy, "paste": paste, "undo": undo, "midi": midi, "saw": saw, "sin": sin, "square": square, "triangle": triangle, "microphone": microphone, "speaker": speaker, "midi_in": midi_in, "midi_out": midi_out, "waveform": waveform, "low_pass": low_pass, "high_pass": high_pass, "band_pass": band_pass});
    return icons['$[]'](icon_name);
  });
  
  $def(self, '$fake_project_list_data', function $$fake_project_list_data() {
    
    return [$hash2(["name", "id"], {"name": "the song", "id": "project_1"}), $hash2(["name", "id"], {"name": "mon projet2", "id": "project_2"}), $hash2(["name", "id"], {"name": "autre projet", "id": "project_3"}), $hash2(["name", "id"], {"name": "my great song", "id": "project_4"})]
  });
  
  $def(self, '$fake_modules_list', function $$fake_modules_list() {
    
    return $hash2(["t1", "t2", "t3", "t4", "t5", "t6", "t7", "t8", "t9", "t10", "t11", "t12"], {"t1": $hash2(["id", "action", "label", "type", "icon"], {"id": "t1", "action": "add_module", "label": "saw", "type": "oscillator", "icon": "saw"}), "t2": $hash2(["id", "action", "label", "type", "icon"], {"id": "t2", "action": "add_module", "label": "sin", "type": "oscillator", "icon": "sin"}), "t3": $hash2(["id", "action", "label", "type", "icon"], {"id": "t3", "action": "add_module", "label": "square", "type": "oscillator", "icon": "square"}), "t4": $hash2(["id", "action", "label", "type", "icon"], {"id": "t4", "action": "add_module", "label": "triangle", "type": "oscillator", "icon": "triangle"}), "t5": $hash2(["id", "action", "label", "type", "icon"], {"id": "t5", "action": "add_module", "label": "audio in", "type": "io", "icon": "microphone"}), "t6": $hash2(["id", "action", "label", "type", "icon"], {"id": "t6", "action": "add_module", "label": "audio out", "type": "io", "icon": "speaker"}), "t7": $hash2(["id", "action", "label", "type", "icon"], {"id": "t7", "action": "add_module", "label": "midi in", "type": "io", "icon": "midi_in"}), "t8": $hash2(["id", "action", "label", "type", "icon"], {"id": "t8", "action": "add_module", "label": "midi out", "type": "io", "icon": "midi_out"}), "t9": $hash2(["id", "action", "label", "type", "icon"], {"id": "t9", "action": "add_module", "label": "sample", "type": "waveform", "icon": "waveform"}), "t10": $hash2(["id", "action", "label", "type", "icon"], {"id": "t10", "action": "add_module", "label": "low pass", "type": "filter", "icon": "low_pass"}), "t11": $hash2(["id", "action", "label", "type", "icon"], {"id": "t11", "action": "add_module", "label": "high pass", "type": "filter", "icon": "high_pass"}), "t12": $hash2(["id", "action", "label", "type", "icon"], {"id": "t12", "action": "add_module", "label": "bandpass", "type": "io", "icon": "band_pass"})})
  });
  
  $def(self, '$fake_new_project_data', function $$fake_new_project_data() {
    
    return $hash2(["name", "id"], {"name": "new project", "id": "project_x"})
  });
  
  $def(self, '$fake_project_data', function $$fake_project_data() {
    
    return $hash2(["modules", "links"], {"modules": [$hash2(["id", "name", "type_id", "active", "input_slots", "output_slots", "position"], {"id": 0, "name": "Midi", "type_id": "midi", "active": "true", "input_slots": [$hash2(["id", "name", "unit", "value"], {"id": 0, "name": "on", "unit": "", "value": 1})], "output_slots": [$hash2(["id", "name", "unit"], {"id": 0, "name": "xxx", "unit": ""})], "position": $hash2(["x", "y", "z"], {"x": 2, "y": 2, "z": 0})})], "links": [$hash2(["id", "sourceComponentId", "sourceOutputSlotId", "targetComponentId", "targetInputSlotId", "active"], {"id": "GUID", "sourceComponentId": 0, "sourceOutputSlotId": 2, "targetComponentId": 1, "targetInputSlotId": 0, "active": "true"})]})
  });
  return $def(self, '$module_list', function $$module_list() {
    
    return Opal.large_array_unpack("Audio_input,Audio_output,Midi_input,Midi_output,Oscillator,Sample,Noise,Envelope,Timeline,Markers,Group,Event,Play,Record,Stop,Delete,Loop,Label,Id,Ramp,Filter,Volume,Link,Select,Saturation,Position,Load,module,Save,Module,If,Else,equal,Superior,Inferior,Divide,Plus,Multiply")
  });
};

Opal.modules["application/experimental_api"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $hash2 = Opal.hash2, $send = Opal.send, $rb_times = Opal.rb_times, $rb_plus = Opal.rb_plus, $truthy = Opal.truthy, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('new_default_params,new,merge,[],default_params,each_with_index,box,*,+,text,[]=,touch,send');
  
  $$('Essentials').$new_default_params($hash2(["list"], {"list": $hash2(["colors", "sort", "height", "width", "margin", "spacing", "view", "listing", "items"], {"colors": ["red", "blue"], "sort": "alphabetically", "height": 18, "width": "auto", "margin": 0, "spacing": 3, "view": "data", "listing": $hash2([], {}), "items": $hash2(["color", "size", "align", "margin"], {"color": "orange", "size": 36, "align": "left", "margin": 3})})}));
  self.$new($hash2(["particle"], {"particle": "list"}));
  return $send(self, 'new', [$hash2(["post"], {"post": "list"})], function $$1(params){var self = $$1.$$s == null ? this : $$1.$$s, list_style = nil, list_code = nil, list_listing = nil, line_height = nil, line_width = nil, line_margin = nil, line_spacing = nil;

    
    if (params == null) params = nil;
    list_style = $$('Essentials').$default_params()['$[]']("list").$merge(params);
    list_code = params['$[]']("code");
    list_listing = params['$[]']("listing");
    line_height = list_style['$[]']("height");
    line_width = list_style['$[]']("width");
    line_margin = list_style['$[]']("margin");
    line_spacing = list_style['$[]']("spacing");
    return $send(list_listing, 'each_with_index', [], function $$2(item, index){var $a, self = $$2.$$s == null ? this : $$2.$$s, support = nil, code = nil, $ret_or_1 = nil;

      
      if (item == null) item = nil;
      if (index == null) index = nil;
      support = self.$box($hash2(["top", "height", "width", "left", "right"], {"top": $rb_times($rb_plus(line_height, line_spacing), index), "height": line_height, "width": line_width, "left": line_margin, "right": line_margin}));
      support.$text($hash2(["data", "visual"], {"data": item['$[]']("name"), "visual": $hash2(["size"], {"size": 12})}));
      code = ($truthy(($ret_or_1 = item['$[]']("code"))) ? ($ret_or_1) : (($a = ["code", list_code], $send(item, '[]=', $a), $a[$a.length - 1])));
      return $send(support, 'touch', [true], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s;

        if ($truthy(code)) {
          return self.$send(code, item)
        } else {
          return nil
        }}, {$$s: self});}, {$$s: self});}, {$$s: self});
};

Opal.modules["application/version"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('puts');
  
  self.$puts("vie version: 0.001");
  return self.$puts("v-UIe version: 0.005\n");
};

Opal.modules["application/styles"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $hash2 = Opal.hash2, $rb_divide = Opal.rb_divide, $rb_plus = Opal.rb_plus, $rb_times = Opal.rb_times, $rb_minus = Opal.rb_minus, $def = Opal.def, self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('/,+,*,-,color,[],vie_styles,shadow');
  
  
  $def(self, '$vie_styles', function $$vie_styles() {
    var action_height = nil, toolbox_with = nil, inspector_with = nil, navigation_height = nil, margin = nil, smooth = nil;

    
    action_height = 39;
    toolbox_with = 52;
    inspector_with = 120;
    navigation_height = 30;
    margin = 9;
    smooth = 3;
    return $hash2(["margin", "toolbox_with", "module_label", "inspector_with", "navigation_height", "text_color", "list_style", "back_color", "title", "toolbox_color", "center_color", "action_color", "module_color", "inspector_color", "active_color", "select_color", "inactive_color", "dark_color", "invisible_color", "darker_color", "cell_color", "cell_over", "cell_selected", "cell_connected", "cell_shadow", "invert_shadow", "toolbox_style", "inspector_style", "action_style", "filer", "support_style", "module_style", "center_style", "matrix_style", "active_state", "default_state", "select_state"], {"margin": margin, "toolbox_with": 60, "module_label": $hash2(["left", "top", "visual", "attached"], {"left": 3, "top": 33, "visual": $hash2(["size"], {"size": 9}), "attached": ["active_color"]}), "inspector_with": inspector_with, "navigation_height": 30, "text_color": $hash2(["red", "green", "blue", "id"], {"red": 0.6, "green": 0.6, "blue": 0.6, "id": "text_color"}), "list_style": $hash2(["colors", "width", "left", "right", "height", "items"], {"colors": ["gray", "white"], "width": "auto", "left": 0, "right": 0, "height": 15, "items": $hash2(["color", "size", "align", "margin"], {"color": "orange", "size": 36, "align": "left", "margin": 3})}), "back_color": $hash2(["red", "green", "blue", "id"], {"red": 0.1, "green": 0.1, "blue": 0.1, "id": "back_color"}), "title": $hash2(["id", "visual", "width", "left", "center", "top", "attached"], {"id": "title", "visual": $hash2(["size"], {"size": 21}), "width": "auto", "left": 25, "center": "horizontal", "top": 9, "attached": ["inactive_color"]}), "toolbox_color": $hash2(["red", "green", "blue", "id"], {"red": 0.1, "green": 0.1, "blue": 0.1, "id": "toolbox_color"}), "center_color": $hash2(["red", "green", "blue", "alpha", "id"], {"red": 0, "green": 0, "blue": 0, "alpha": 0, "id": "center_color"}), "action_color": $hash2(["red", "green", "blue", "alpha", "id"], {"red": 0, "green": 0, "blue": 0, "alpha": 0, "id": "action_color"}), "module_color": $hash2(["red", "green", "blue", "alpha", "id"], {"red": 0.7, "green": 0.3, "blue": 0, "alpha": 1, "id": "module_color"}), "inspector_color": $hash2(["red", "green", "blue", "id"], {"red": 0.09, "green": 0.09, "blue": 0.09, "id": "inspector_color"}), "active_color": $hash2(["red", "green", "blue", "id"], {"red": 0.8, "green": 0.8, "blue": 0.8, "id": "active_color"}), "select_color": $hash2(["red", "green", "blue", "id"], {"red": 0.8, "green": 0, "blue": 0.3, "id": "select_color"}), "inactive_color": $hash2(["red", "green", "blue", "id"], {"red": 0.3, "green": 0.3, "blue": 0.3, "id": "inactive_color"}), "dark_color": $hash2(["red", "green", "blue", "id"], {"red": 0.127, "green": 0.127, "blue": 0.127, "id": "dark_color"}), "invisible_color": $hash2(["red", "green", "blue", "alpha", "id"], {"red": 0, "green": 0, "blue": 0, "alpha": 0, "id": "invisible_color"}), "darker_color": $hash2(["red", "green", "blue", "id"], {"red": 0.127, "green": 0.127, "blue": 0.127, "id": "darker_color"}), "cell_color": $hash2(["red", "green", "blue", "id"], {"red": 0.17, "green": 0.15, "blue": 0.13, "id": "cell_color"}), "cell_over": $hash2(["red", "green", "blue", "id"], {"red": 0.23, "green": 0.27, "blue": 0.15, "id": "cell_over"}), "cell_selected": $hash2(["red", "green", "blue", "id"], {"red": 1, "green": 1, "blue": 0, "id": "cell_selected"}), "cell_connected": $hash2(["red", "green", "blue", "id"], {"red": $rb_divide(154, 255), "green": $rb_divide(205, 255), "blue": $rb_divide(50, 255), "id": "cell_connected"}), "cell_shadow": $hash2(["blur", "left", "top", "id", "red", "green", "blue", "alpha", "direction"], {"blur": 9, "left": 3, "top": 3, "id": "cell_shadow", "red": 0, "green": 0, "blue": 0, "alpha": 0.3, "direction": "inset"}), "invert_shadow": $hash2(["blur", "left", "top", "id", "red", "green", "blue", "alpha", "direction"], {"blur": 9, "left": 3, "top": 3, "id": "invert_shadow", "red": 0, "green": 0, "blue": 0, "alpha": 0.3, "direction": "inset"}), "toolbox_style": $hash2(["id", "overflow", "left", "top", "smooth", "width", "bottom", "height", "attached"], {"id": "toolbox", "overflow": "hidden", "left": margin, "top": $rb_plus(action_height, margin), "smooth": smooth, "width": toolbox_with, "bottom": 30, "height": 420, "attached": ["toolbox_color"]}), "inspector_style": $hash2(["id", "left", "top", "smooth", "width", "bottom", "height", "overflow", "attached"], {"id": "inspector", "left": $rb_plus(toolbox_with, $rb_times(margin, 2)), "top": $rb_plus(action_height, margin), "smooth": smooth, "width": inspector_with, "bottom": 0, "height": 420, "overflow": "auto", "attached": ["invert_shadow", "inspector_color"]}), "action_style": $hash2(["id", "left", "top", "width", "right", "height", "attached"], {"id": "action", "left": toolbox_with, "top": 0, "width": "auto", "right": 0, "height": action_height, "attached": ["action_color"]}), "filer": $hash2(["id", "top", "bottom", "left", "width", "overflow", "height", "attached", "smooth"], {"id": "filer", "top": 12, "bottom": 36, "left": 6, "width": $rb_minus(inspector_with, 12), "overflow": "auto", "height": "auto", "attached": ["darker_color"], "smooth": 6}), "support_style": $hash2(["left", "width", "height", "attached"], {"left": 6, "width": 23, "height": 23, "attached": ["invisible_color"]}), "module_style": $hash2(["left", "width", "height", "attached"], {"left": 6, "width": 23, "height": 23, "attached": ["module_color"]}), "center_style": $hash2(["id", "left", "bottom", "top", "right", "width", "height", "attached"], {"id": "center", "left": $rb_plus($rb_plus(toolbox_with, inspector_with), $rb_times(margin, 3)), "bottom": navigation_height, "top": action_height, "right": 0, "width": "auto", "height": "auto", "attached": ["center_color"]}), "matrix_style": $hash2(["top", "left", "smooth", "columns", "rows", "width", "height", "color"], {"top": 0, "left": 0, "smooth": 0, "columns": $hash2(["count"], {"count": 8}), "rows": $hash2(["count"], {"count": 8}), "width": 440, "height": 440, "color": $hash2(["alpha"], {"alpha": 0})}), "active_state": $hash2(["attached"], {"attached": "active_color"}), "default_state": $hash2(["detached"], {"detached": ["select_color", "active_color"]}), "select_state": $hash2(["attached"], {"attached": "active_color"})});
  });
  self.$color(self.$vie_styles()['$[]']("cell_selected"));
  self.$color(self.$vie_styles()['$[]']("cell_over"));
  self.$color(self.$vie_styles()['$[]']("back_color"));
  self.$color(self.$vie_styles()['$[]']("toolbox_color"));
  self.$color(self.$vie_styles()['$[]']("action_color"));
  self.$color(self.$vie_styles()['$[]']("inspector_color"));
  self.$color(self.$vie_styles()['$[]']("center_color"));
  self.$color(self.$vie_styles()['$[]']("darker_color"));
  self.$color(self.$vie_styles()['$[]']("dark_color"));
  self.$color(self.$vie_styles()['$[]']("text_color"));
  self.$color(self.$vie_styles()['$[]']("active_color"));
  self.$color(self.$vie_styles()['$[]']("inactive_color"));
  self.$color(self.$vie_styles()['$[]']("cell_connected"));
  self.$color(self.$vie_styles()['$[]']("invisible_color"));
  self.$color(self.$vie_styles()['$[]']("module_color"));
  self.$shadow(self.$vie_styles()['$[]']("cell_shadow"));
  self.$shadow(self.$vie_styles()['$[]']("invert_shadow"));
  return self.$color(self.$vie_styles()['$[]']("select_color"));
};

Opal.modules["application/ui_template"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $hash2 = Opal.hash2, $def = Opal.def, $rb_plus = Opal.rb_plus, $rb_times = Opal.rb_times, $send = Opal.send, self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('box,[],vie_styles,element,tools_list,get_icon,vector,grab,merge,+,*,definition,attached,tool_events,color,each_with_index,add_icons_to_tool_zone,matrix,each,cells,tag,data');
  
  
  $def(self, '$tools_list', function $$tools_list() {
    
    return $hash2(["load", "clear", "settings", "edition", "select", "group", "copy", "paste", "undo"], {"load": $hash2(["result_zone"], {"result_zone": "inspector"}), "clear": $hash2(["result_zone"], {"result_zone": nil}), "settings": $hash2(["result_zone"], {"result_zone": "inspector"}), "edition": $hash2(["result_zone"], {"result_zone": "inspector"}), "select": $hash2(["result_zone"], {"result_zone": nil}), "group": $hash2(["result_zone"], {"result_zone": nil}), "copy": $hash2(["result_zone"], {"result_zone": nil}), "paste": $hash2(["result_zone"], {"result_zone": nil}), "undo": $hash2(["result_zone"], {"result_zone": nil})})
  });
  self.$box(self.$vie_styles()['$[]']("center_style"));
  self.$box(self.$vie_styles()['$[]']("action_style"));
  self.$box(self.$vie_styles()['$[]']("toolbox_style"));
  self.$box(self.$vie_styles()['$[]']("inspector_style"));
  self.$element($hash2(["id", "data"], {"id": "tools", "data": self.$tools_list()}));
  self.$element($hash2(["id", "data"], {"id": "connection", "data": []}));
  self.$element($hash2(["id", "data"], {"id": "selected", "data": []}));
  self.$element($hash2(["id", "data"], {"id": "context", "data": $hash2(["mode", "event"], {"mode": "default", "event": "released"})}));
  self.$element($hash2(["id"], {"id": "current_project"}));
  self.$element($hash2(["id", "data"], {"id": "project_matrix", "data": $hash2([], {})}));
  self.$element($hash2(["id"], {"id": "active_matrix"}));
  self.$element($hash2(["id", "data"], {"id": "debug", "data": $hash2(["debug"], {"debug": false})}));
  
  $def(self, '$add_icons_to_tool_zone', function $$add_icons_to_tool_zone(tool, index, tool_style) {
    var self = this, tool_name = nil, support_style = nil, icon_spacing = nil, margin = nil, vector_data = nil, support = nil, options = nil;

    
    tool_name = tool['$[]'](0);
    support_style = tool_style['$[]']("style");
    icon_spacing = tool_style['$[]']("spacing");
    margin = tool_style['$[]']("margin");
    vector_data = self.$get_icon(tool_name);
    support = self.$grab("toolbox").$vector(support_style.$merge($hash2(["top", "id"], {"top": $rb_plus($rb_times(icon_spacing, index), margin), "id": tool_name})));
    support.$definition(vector_data);
    support.$attached("inactive_color");
    options = tool['$[]'](1);
    return self.$tool_events(support, tool_name, options);
  });
  
  $def(self, '$fill_tool_zone', function $$fill_tool_zone(tools_list) {
    var self = this, tool_base__color = nil, margin = nil, support_style = nil, icon_spacing = nil, tool_style = nil, tool_default_color = nil, tool_color = nil;

    
    tool_base__color = $hash2(["red", "green", "blue"], {"red": 0.8, "green": 0.6, "blue": 0.5});
    margin = self.$vie_styles()['$[]']("margin");
    support_style = self.$vie_styles()['$[]']("support_style");
    icon_spacing = $rb_plus(self.$vie_styles()['$[]']("support_style")['$[]']("height"), $rb_times(margin, 2));
    tool_style = $hash2(["color", "style", "spacing", "margin"], {"color": tool_base__color, "style": support_style, "spacing": icon_spacing, "margin": margin});
    tool_default_color = tool_style['$[]']("color");
    tool_color = self.$color(tool_default_color);
    return $send(tools_list, 'each_with_index', [], function $$1(tool, index){var self = $$1.$$s == null ? this : $$1.$$s;

      
      if (tool == null) tool = nil;
      if (index == null) index = nil;
      return self.$add_icons_to_tool_zone(tool, index, tool_style);}, {$$s: self});
  });
  
  $def(self, '$build_matrix', function $$build_matrix() {
    var self = this, center = nil, matrix_id = nil, matrix_style = nil, new_matrix = nil;

    
    center = self.$grab("center");
    matrix_id = "vie_matrix";
    matrix_style = self.$vie_styles()['$[]']("matrix_style").$merge($hash2(["id", "cells"], {"id": matrix_id, "cells": $hash2(["particles"], {"particles": $hash2(["margin", "smooth", "color", "shadow"], {"margin": 9, "smooth": 3, "color": self.$vie_styles()['$[]']("cell_color"), "shadow": $hash2(["blur", "left", "top", "id", "red", "green", "blue", "alpha"], {"blur": 9, "left": 3, "top": 3, "id": "default_cell_shadow", "red": 0, "green": 0, "blue": 0, "alpha": 0.3})})})}));
    new_matrix = center.$matrix(matrix_style);
    $send(new_matrix.$cells(), 'each', [], function $$2(cell){var self = $$2.$$s == null ? this : $$2.$$s;

      
      if (cell == null) cell = nil;
      return self.$grab(cell).$tag($hash2([], {}));}, {$$s: self});
    return new_matrix;
  });
  return $def(self, '$set_title', function $$set_title() {
    var self = this, project_name = nil;

    
    project_name = self.$grab("current_project").$data();
    return self.$grab("title").$data(project_name);
  });
};

Opal.modules["application/utilities"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $def = Opal.def, $truthy = Opal.truthy, self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('data,grab,[],debug,puts');
  
  
  $def(self, '$context', function $$context() {
    var self = this;

    return self.$grab("context").$data()
  });
  
  $def(self, '$debug', function $$debug() {
    var self = this;

    return self.$grab("debug").$data()['$[]']("debug")
  });
  return $def(self, '$log', function $$log(val) {
    var self = this;

    if ($truthy(self.$debug())) {
      return self.$puts("=> " + (val))
    } else {
      return nil
    }
  });
};

Opal.modules["application/communication"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $def = Opal.def, $hash2 = Opal.hash2, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('controller_listener,send,controller_sender,log,data,grab');
  
  $$('Atome').$controller_listener();
  
  $def(self, '$response_listener', function $$response_listener(hashed_msg) {
    var self = this, js_action = nil, js_body = nil;

    
    js_action = hashed_msg["action"];
    js_body = hashed_msg["body"];
    return self.$send(js_action, js_body);
  });
  
  $def(self, '$load_modules', function $$load_modules(_module_id) {
    
    return $$('Atome').$controller_sender($hash2(["action"], {"action": "get_modules"}))
  });
  
  $def(self, '$rename_project', function $$rename_project() {
    
    return $$('Atome').$controller_sender($hash2(["action"], {"action": "new_project"}))
  });
  
  $def(self, '$delete_project', function $$delete_project() {
    var self = this;

    return self.$log("delete : " + (self.$grab("current_project").$data()))
  });
  return $def(self, '$duplicate_project', function $$duplicate_project() {
    var self = this;

    return self.$log("duplicate : " + (self.$grab("current_project").$data()))
  });
};

Opal.modules["application/callbacks"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $def = Opal.def, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $rb_divide = Opal.rb_divide, self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('log,grab,concat,list,[],data,set_title,clear_all_matrix,each,add_module,add_link,display_svg,text,empty?,box,id,/,width,height');
  
  
  $def(self, '$get_settings_callback', function $$get_settings_callback() {
    var self = this;

    return self.$log("viewing setings now")
  });
  
  $def(self, '$get_projects_callback', function $$get_projects_callback(msg_body) {
    var self = this, inspector = nil;

    
    inspector = self.$grab("inspector");
    msg_body = [$hash2(["name", "id", "code"], {"name": "new", "id": "project_0", "code": "new_project"})].$concat(msg_body);
    return inspector.$list($hash2(["listing", "code", "height"], {"listing": msg_body, "code": "get_project", "height": 23}));
  });
  
  $def(self, '$new_project_callback', function $$new_project_callback(msg_body) {
    var self = this, new_project_name = nil;

    
    new_project_name = msg_body['$[]']("name");
    self.$grab("current_project").$data(new_project_name);
    return self.$set_title();
  });
  
  $def(self, '$load_project_callback', function $$load_project_callback(msg_body) {
    var self = this, modules_found = nil, links_found = nil;

    
    modules_found = msg_body['$[]']("modules");
    links_found = msg_body['$[]']("links");
    self.$clear_all_matrix();
    $send(modules_found, 'each', [], function $$1(module_data){var self = $$1.$$s == null ? this : $$1.$$s;

      
      if (module_data == null) module_data = nil;
      return self.$add_module(module_data);}, {$$s: self});
    return $send(links_found, 'each', [], function $$2(link_data){var self = $$2.$$s == null ? this : $$2.$$s;

      
      if (link_data == null) link_data = nil;
      return self.$add_link(link_data);}, {$$s: self});
  });
  
  $def(self, '$get_modules_callback', function $$get_modules_callback(body) {
    var self = this;

    
    $send(body, 'each', [], function $$3(module_found){var self = $$3.$$s == null ? this : $$3.$$s, content = nil;

      
      if (module_found == null) module_found = nil;
      content = "module is : " + (module_found["name"]) + "\nid:  " + (module_found["id"]) + "}";
      self.$display_svg(module_found["icon"], "lightgray", "get_modules_box");
      return self.$grab("inspector").$text($hash2(["data", "top", "visual"], {"data": content, "top": 60, "visual": $hash2(["size"], {"size": 12})}));}, {$$s: self});
    if (!$truthy(body['$empty?']())) {
      return nil
    };
    return self.$grab("inspector").$text($hash2(["data", "top", "visual", "width"], {"data": "no project", "top": 60, "visual": $hash2(["size"], {"size": 12}), "width": 333}));
  });
  return $def(self, '$place_module_on_slot', function $$place_module_on_slot(module_found) {
    
    return module_found.$box($hash2(["id", "width", "height", "center", "attached"], {"id": "" + (module_found.$id()) + "_svg_support", "width": $rb_divide(module_found.$width(), 2), "height": $rb_divide(module_found.$height(), 2), "center": true, "attached": "invisible_color"}))
  });
};

Opal.modules["application/events"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $send = Opal.send, $eqeq = Opal.eqeq, $def = Opal.def, $hash2 = Opal.hash2, $rb_divide = Opal.rb_divide, self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('touch,[],context,grab,data,each,cells,==,tag,log,deselect_cell,select_cell,[]=,over,detached,attached,wait,cell,attach_cell_color,request_link_cell,drop,definition,vector,/,height,width,color,each_with_index,cells_over,cell_touch_down,cells_long_touch,cells_up_touch,cells_dropped_item,action_touch_router,action_long_touch_router');
  
  
  $def(self, '$cells_long_touch', function $$cells_long_touch(module_slot) {
    var self = this;

    return $send(module_slot, 'touch', ["long"], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s, current_matrix = nil, selection = nil;

      
      switch (self.$context()['$[]']("mode")) {
        case "default":
          return nil
        case "edit":
          return nil
        case "select":
          
          current_matrix = self.$grab("vie_matrix");
          selection = self.$grab("selected").$data();
          return $send(current_matrix.$cells(), 'each', [], function $$2(module_slot_id){var self = $$2.$$s == null ? this : $$2.$$s, slot_found = nil;

            
            if (module_slot_id == null) module_slot_id = nil;
            slot_found = self.$grab(module_slot_id);
            if ($eqeq(slot_found.$tag()['$[]']("selected"), true)) {
              
              self.$log("deselect_cell => " + (module_slot_id));
              return self.$deselect_cell(slot_found, selection);
            } else {
              
              self.$log("select_cell => " + (module_slot_id));
              return self.$select_cell(slot_found, selection);
            };}, {$$s: self});
        default:
          return nil
      }}, {$$s: self})
  });
  
  $def(self, '$cell_touch_down', function $$cell_touch_down(module_slot, index) {
    var self = this;

    return $send(module_slot, 'touch', ["down"], function $$3(){var $a, self = $$3.$$s == null ? this : $$3.$$s;

      
      self.$log("down context is: " + (self.$grab("context").$data()));
      return ($a = [0, index], $send(self.$grab("connection").$data(), '[]=', $a), $a[$a.length - 1]);}, {$$s: self})
  });
  
  $def(self, '$cells_over', function $$cells_over(module_slot) {
    
    
    $send(module_slot, 'over', ["enter"], function $$4(){
      if ($eqeq(module_slot.$tag()['$[]']("selected"), true)) {
        return nil
      } else {
        
        module_slot.$detached("cell_color");
        return module_slot.$attached("cell_over");
      }});
    return $send(module_slot, 'over', ["leave"], function $$5(){
      if ($eqeq(module_slot.$tag()['$[]']("selected"), true)) {
        return nil
      } else {
        
        module_slot.$detached("cell_over");
        return module_slot.$attached("cell_color");
      }});
  });
  
  $def(self, '$attach_cell_color', function $$attach_cell_color(current_matrix, source_cell, target_cell) {
    var self = this;

    return $send(self, 'wait', [0.6], function $$6(){
      
      current_matrix.$cell(source_cell).$attached("cell_color");
      current_matrix.$cell(target_cell).$attached("cell_color");
      current_matrix.$cell(source_cell).$detached("cell_connected");
      return current_matrix.$cell(target_cell).$detached("cell_connected");})
  });
  
  $def(self, '$detach_cell_color', function $$detach_cell_color(current_matrix, source_cell, target_cell) {
    var self = this;

    
    current_matrix.$cell(source_cell).$detached("cell_color");
    current_matrix.$cell(target_cell).$detached("cell_color");
    current_matrix.$cell(source_cell).$attached("cell_connected");
    current_matrix.$cell(target_cell).$attached("cell_connected");
    return self.$attach_cell_color(current_matrix, source_cell, target_cell);
  });
  
  $def(self, '$cells_up_touch', function $$cells_up_touch(module_slot, current_matrix, inspector, index) {
    var self = this;

    return $send(module_slot, 'touch', ["up"], function $$7(){var self = $$7.$$s == null ? this : $$7.$$s, selection = nil;

      
      switch (self.$context()['$[]']("mode")) {
        case "default":
          return self.$request_link_cell(current_matrix, inspector, index)
        case "edit":
          return nil
        case "select":
          
          selection = self.$grab("selected").$data();
          if ($eqeq(module_slot.$tag()['$[]']("selected"), true)) {
            self.$deselect_cell(module_slot, selection)
          } else {
            self.$select_cell(module_slot, selection)
          };
          return self.$log("selection : " + (selection));
        default:
          return self.$log("else for mouse up ")
      }}, {$$s: self})
  });
  
  $def(self, '$cells_dropped_item', function $$cells_dropped_item(module_slot) {
    var self = this;

    return $send(module_slot, 'drop', [true], function $$8(event_content){var self = $$8.$$s == null ? this : $$8.$$s, icon_drop = nil, drop_module = nil;

      
      if (event_content == null) event_content = nil;
      icon_drop = self.$grab(event_content['$[]']("id")).$definition();
      drop_module = self.$vector($hash2(["definition", "height", "width", "center"], {"definition": icon_drop, "height": $rb_divide(self.$height(), 2), "width": $rb_divide(self.$width(), 2), "center": true}));
      return drop_module.$color($hash2(["red"], {"red": 1}));}, {$$s: self})
  });
  
  $def(self, '$matrix_events', function $$matrix_events(current_matrix) {
    var self = this, inspector = nil;

    
    inspector = self.$grab("inspector");
    return $send(current_matrix.$cells(), 'each_with_index', [], function $$9(module_slot_id, index){var self = $$9.$$s == null ? this : $$9.$$s, module_slot = nil;

      
      if (module_slot_id == null) module_slot_id = nil;
      if (index == null) index = nil;
      module_slot = self.$grab(module_slot_id);
      self.$cells_over(module_slot);
      self.$cell_touch_down(module_slot, index);
      self.$cells_long_touch(module_slot);
      self.$cells_up_touch(module_slot, current_matrix, inspector, index);
      return self.$cells_dropped_item(module_slot);}, {$$s: self});
  });
  return $def(self, '$tool_events', function $$tool_events(support, tool_name, options) {
    var self = this;

    
    $send(support, 'touch', [true], function $$10(){var self = $$10.$$s == null ? this : $$10.$$s;

      return self.$action_touch_router(tool_name, options)}, {$$s: self});
    return $send(support, 'touch', ["long"], function $$11(){var self = $$11.$$s == null ? this : $$11.$$s;

      return self.$action_long_touch_router(tool_name, options)}, {$$s: self});
  });
};

Opal.modules["application/actions"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $send = Opal.send, $truthy = Opal.truthy, $def = Opal.def, $hash2 = Opal.hash2, $return_val = Opal.return_val, $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('grab,data,each_key,detached,attached,[],clear_zone,send,[]=,log,controller_sender,each,materials,delete,==,length,cells,select_cell,deselect_cell');
  
  
  $def(self, '$action_touch_router', function $$action_touch_router(id_found, options) {
    var self = this, current_tool = nil, tools = nil, result_zone = nil;

    
    current_tool = self.$grab(id_found);
    tools = self.$grab("tools").$data();
    $send(tools, 'each_key', [], function $$1(tool){var self = $$1.$$s == null ? this : $$1.$$s;

      
      if (tool == null) tool = nil;
      self.$grab(tool).$detached("active_color");
      return self.$grab(tool).$attached("inactive_color");}, {$$s: self});
    current_tool.$detached("inactive_color");
    current_tool.$attached("active_color");
    result_zone = self.$grab(options['$[]']("result_zone"));
    if ($truthy(result_zone)) {
      self.$clear_zone(result_zone)
    };
    self.$send("action_touch_" + (id_found), result_zone);
    self.$grab("context").$data()['$[]=']("mode", id_found);
    return self.$log("action_router say, call :  action_" + (id_found) + "\nNew  context: " + (self.$grab("context").$data()));
  });
  
  $def(self, '$action_long_touch_router', function $$action_long_touch_router(id_found, _options) {
    var self = this;

    return self.$send("action_long_" + (id_found))
  });
  
  $def(self, '$action_touch_load', function $$action_touch_load(_targeted_zone) {
    
    return $$('Atome').$controller_sender($hash2(["action"], {"action": "get_projects"}))
  });
  
  $def(self, '$action_touch_clear', function $$action_touch_clear(_targeted_zone) {
    var self = this;

    return $send(self.$grab("selected").$data(), 'each', [], function $$2(selected_slot){var self = $$2.$$s == null ? this : $$2.$$s;

      
      if (selected_slot == null) selected_slot = nil;
      return $send(self.$grab(selected_slot).$materials(), 'each', [], function $$3(child_found){var $a, self = $$3.$$s == null ? this : $$3.$$s;

        
        if (child_found == null) child_found = nil;
        return ($a = self.$grab(child_found), ($a === nil || $a == null) ? nil : $a.$delete(true));}, {$$s: self});}, {$$s: self})
  });
  
  $def(self, '$action_touch_settings', function $$action_touch_settings(_targeted_zone) {
    
    return $$('Atome').$controller_sender($hash2(["action"], {"action": "get_settings"}))
  });
  
  $def(self, '$action_touch_edition', function $$action_touch_edition(_targeted_zone) {
    
    return $$('Atome').$controller_sender($hash2(["action"], {"action": "get_modules"}))
  });
  
  $def(self, '$action_touch_select', $return_val(nil));
  
  $def(self, '$action_touch_group', $return_val(nil));
  
  $def(self, '$action_touch_copy', $return_val(nil));
  
  $def(self, '$action_touch_paste', $return_val(nil));
  
  $def(self, '$action_touch_undo', $return_val(nil));
  
  $def(self, '$action_long_load', $return_val(nil));
  
  $def(self, '$action_long_clear', $return_val(nil));
  
  $def(self, '$action_long_settings', $return_val(nil));
  
  $def(self, '$action_long_edition', $return_val(nil));
  
  $def(self, '$action_long_select', function $$action_long_select(_targeted_zone) {
    var self = this, selection = nil, current_matrix = nil, select_all = nil;

    
    selection = self.$grab("selected").$data();
    current_matrix = self.$grab("vie_matrix");
    select_all = true;
    if ($eqeq(selection.$length(), 64)) {
      select_all = false
    };
    return $send(current_matrix.$cells(), 'each', [], function $$4(module_slot_id){var self = $$4.$$s == null ? this : $$4.$$s, slot_found = nil;

      
      if (module_slot_id == null) module_slot_id = nil;
      slot_found = self.$grab(module_slot_id);
      if ($truthy(select_all)) {
        return self.$select_cell(slot_found, selection)
      } else {
        return self.$deselect_cell(slot_found, selection)
      };}, {$$s: self});
  });
  
  $def(self, '$action_long_group', $return_val(nil));
  
  $def(self, '$action_long_copy', $return_val(nil));
  
  $def(self, '$action_long_paste', $return_val(nil));
  
  $def(self, '$action_long_undo', $return_val(nil));
  return $def(self, '$action_touch_get_modules', function $$action_touch_get_modules(_targeted_zone) {
    
    return $$('Atome').$controller_sender($hash2(["action"], {"action": "get_modules"}))
  });
};

Opal.modules["application/tool_methods"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $hash2 = Opal.hash2, $def = Opal.def, $send = Opal.send, $return_val = Opal.return_val, $rb_plus = Opal.rb_plus, $rb_times = Opal.rb_times, $eqeq = Opal.eqeq, $rb_divide = Opal.rb_divide, $truthy = Opal.truthy, $hash = Opal.hash, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('[],data,grab,set_title,controller_sender,id,clear_all_matrix,each,cells,physical,delete,alert,log,+,*,==,box,width,height,merge,vie_styles,text,/,circle,[]=,materials,style,detach_cell_color,add_link,clear_zone,link_cells,detached,tag,include?,<<,attached');
  
  
  $def(self, '$get_project', function $$get_project(params) {
    var self = this, new_project_name = nil;

    
    new_project_name = params['$[]']("name");
    self.$grab("current_project").$data(new_project_name);
    self.$set_title();
    return $$('Atome').$controller_sender($hash2(["action", "id"], {"action": "load_project", "id": self.$id()}));
  });
  
  $def(self, '$new_project', function $$new_project() {
    var self = this;

    
    self.$clear_all_matrix();
    return $$('Atome').$controller_sender($hash2(["action"], {"action": "new_project"}));
  });
  
  $def(self, '$clear_all_matrix', function $$clear_all_matrix() {
    var self = this;

    return $send(self.$grab("vie_matrix").$cells(), 'each', [], function $$1(cell_id){var self = $$1.$$s == null ? this : $$1.$$s, cell_found = nil;

      
      if (cell_id == null) cell_id = nil;
      cell_found = self.$grab(cell_id);
      return $send(cell_found.$physical(), 'each', [], function $$2(attached_atome_id){
        
        if (attached_atome_id == null) attached_atome_id = nil;
        return cell_found.$delete($hash2(["id"], {"id": attached_atome_id}));});}, {$$s: self})
  });
  
  $def(self, '$clear_current_matrix', function $$clear_current_matrix() {
    var self = this;

    return self.$alert("terminator")
  });
  
  $def(self, '$clear_slot', function $$clear_slot() {
    var self = this;

    return self.$alert("clearing_the_slot")
  });
  
  $def(self, '$new_matrix', $return_val(nil));
  
  $def(self, '$view_matrix', $return_val(nil));
  
  $def(self, '$add_module', function $$add_module(module_data) {
    var $a, self = this, project_matrix = nil, matrix_found = nil, module_position = nil, active_matrix = nil, current_slot = nil, current_module = nil, module_properties = nil, icon_id = nil;

    
    self.$log("build module: " + (module_data));
    project_matrix = self.$grab("project_matrix");
    matrix_found = module_data['$[]']("position")['$[]']("z");
    module_position = $rb_plus($rb_times(module_data['$[]']("position")['$[]']("y"), 8), module_data['$[]']("position")['$[]']("x"));
    active_matrix = self.$grab("active_matrix").$data();
    if ($eqeq(active_matrix, matrix_found)) {
      
      current_slot = self.$grab("vie_matrix_" + (module_position));
      current_module = current_slot.$box($hash2(["id", "attached", "width", "height", "left", "top"], {"id": module_data['$[]']("id"), "attached": ["invisible_color"], "width": current_slot.$width(), "height": current_slot.$height(), "left": 0, "top": 0}));
      module_properties = self.$vie_styles()['$[]']("module_label").$merge($hash2(["data"], {"data": module_data['$[]']("name")}));
      current_module.$text(module_properties);
      icon_id = "icon_for_" + (module_data['$[]']("id"));
      current_module.$box($hash2(["id", "width", "height", "center"], {"id": icon_id, "width": $rb_divide(current_slot.$width(), 1.7), "height": $rb_divide(current_slot.$height(), 1.7), "center": true}));
      current_module.$circle($hash2(["width", "height", "center"], {"width": 9, "height": 8, "center": true}));
    };
    if ($truthy(project_matrix.$data()['$[]'](matrix_found))) {
      return nil
    } else {
      return ($a = [matrix_found, $hash(module_position, module_data)], $send(project_matrix.$data(), '[]=', $a), $a[$a.length - 1])
    };
  });
  
  $def(self, '$add_link', function $$add_link(link_data) {
    var self = this;

    return self.$log("build link_data: " + (link_data))
  });
  
  $def(self, '$clear_zone', function $$clear_zone(zone) {
    var self = this;

    
    $send(zone.$materials(), 'each', [], function $$3(child_found){var $a, self = $$3.$$s == null ? this : $$3.$$s;

      
      if (child_found == null) child_found = nil;
      return ($a = self.$grab(child_found), ($a === nil || $a == null) ? nil : $a.$delete(true));}, {$$s: self});
    return zone.$delete("materials");
  });
  
  $def(self, '$remove_active', function $$remove_active(items) {
    var self = this;

    return $send(items, 'each', [], function $$4(id_found, _properties){var $a, self = $$4.$$s == null ? this : $$4.$$s;

      
      if (id_found == null) id_found = nil;
      if (_properties == null) _properties = nil;
      return ($a = self.$grab(id_found), ($a === nil || $a == null) ? nil : $a.$style("active_style"));}, {$$s: self})
  });
  
  $def(self, '$link_cells', function $$link_cells(current_matrix, inspector, source_cell, target_cell) {
    var self = this, new_connection = nil;

    
    new_connection = self.$grab("connection").$data();
    inspector.$text($hash2(["data", "visual"], {"data": "linking : " + (new_connection['$[]'](0)) + " and " + (new_connection['$[]'](1)), "visual": $hash2(["size"], {"size": 12})}));
    self.$detach_cell_color(current_matrix, source_cell, target_cell);
    return self.$add_link($hash2(["id", "sourceComponentId", "sourceOutputSlotId", "targetComponentId", "targetInputSlotId", "active"], {"id": "GUID", "sourceComponentId": 0, "sourceOutputSlotId": 2, "targetComponentId": 1, "targetInputSlotId": 0, "active": "true"}));
  });
  
  $def(self, '$request_link_cell', function $$request_link_cell(current_matrix, inspector, index) {
    var self = this, source_cell = nil, target_cell = nil;

    
    self.$grab("connection").$data()['$[]='](1, index);
    source_cell = self.$grab("connection").$data()['$[]'](0);
    target_cell = self.$grab("connection").$data()['$[]'](1);
    if ($eqeq(source_cell, target_cell)) {
      return nil
    };
    self.$clear_zone(inspector);
    return self.$link_cells(current_matrix, inspector, source_cell, target_cell);
  });
  
  $def(self, '$select_cell', function $$select_cell(module_slot, selection) {
    var self = this;

    
    module_slot.$detached("cell_color");
    module_slot.$detached("cell_over");
    module_slot.$style(self.$vie_styles()['$[]']("active_state"));
    module_slot.$tag($hash2(["selected"], {"selected": true}));
    if ($truthy(selection['$include?'](module_slot.$id()))) {
      return nil
    } else {
      return selection['$<<'](module_slot.$id())
    };
  });
  return $def(self, '$deselect_cell', function $$deselect_cell(module_slot, selection) {
    var self = this;

    
    module_slot.$style(self.$vie_styles()['$[]']("default_state"));
    module_slot.$detached("cell_over");
    module_slot.$attached("cell_color");
    module_slot.$tag($hash2(["selected"], {"selected": false}));
    return selection.$delete(module_slot.$id());
  });
};

Opal.modules["application/demo_methods"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $klass = Opal.klass, $rb_plus = Opal.rb_plus, $rb_times = Opal.rb_times, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy, $defs = Opal.defs, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('[],vie_styles,+,*,each_value,fake_modules_list,get_icon,vector,grab,merge,gsub,sub,text,depth,drag,touch,left,top,alert,id,attach,log,new_project_callback,fake_new_project_data,get_projects_callback,fake_project_list_data,load_project_callback,fake_project_data,get_settings_callback,get_modules');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $defs(self, '$get_modules', function $$get_modules() {
      var self = this, margin = nil, module_style = nil, icon_spacing = nil, index = nil;

      
      margin = self.$vie_styles()['$[]']("margin");
      module_style = self.$vie_styles()['$[]']("module_style");
      icon_spacing = $rb_plus(self.$vie_styles()['$[]']("support_style")['$[]']("height"), $rb_times(margin, 2));
      index = 0;
      return $send(self.$fake_modules_list(), 'each_value', [], function $$1(data){var self = $$1.$$s == null ? this : $$1.$$s, module_name = nil, icon_found = nil, module_id = nil, support = nil, label_found = nil, label = nil;

        
        if (data == null) data = nil;
        module_name = data['$[]']("icon");
        icon_found = self.$get_icon(module_name);
        module_id = "module_" + (module_name);
        support = self.$grab("inspector").$vector(module_style.$merge($hash2(["definition", "top", "id"], {"definition": icon_found, "top": $rb_plus($rb_times(icon_spacing, index), margin), "id": module_id})));
        label_found = module_id.$sub("module_", "").$gsub("_", " ");
        label = self.$grab("inspector").$text(module_style.$merge($hash2(["top", "left", "width", "data", "visual", "id"], {"top": $rb_plus($rb_plus($rb_times(icon_spacing, index), margin), 12), "left": 39, "width": "auto", "data": label_found, "visual": $hash2(["size"], {"size": 12}), "id": "" + (module_id) + "_label"})));
        index = $rb_plus(index, 1);
        support.$depth(5);
        self.item_moved = false;
        $send(support, 'drag', [$hash2(["move"], {"move": true})], function $$2(_e){var self = $$2.$$s == null ? this : $$2.$$s;

          
          if (_e == null) _e = nil;
          return (self.item_moved = true);}, {$$s: self});
        $send(support, 'touch', ["down"], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s;

          
          self.prev_pos_left = support.$left();
          return (self.prev_pos_top = support.$top());}, {$$s: self});
        $send(support, 'touch', ["up"], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;
          if (self.item_moved == null) self.item_moved = nil;

          if ($truthy(self.item_moved)) {
            return nil
          } else {
            return self.$alert("populate_selection")
          }}, {$$s: self});
        $send(support, 'drag', ["start"], function $$5(){var id_found = nil, left_found = nil, top_found = nil;

          
          id_found = support.$id();
          left_found = 0;
          top_found = 0;
          
let element_id=id_found
let elem = document.getElementById(element_id);
let rect = elem.getBoundingClientRect();
left_found=rect.x
top_found=rect.y
;
          support.$attach("view");
          support.$left(left_found);
          return support.$top(top_found);});
        return $send(support, 'drag', ["end"], function $$6(){var self = $$6.$$s == null ? this : $$6.$$s;
          if (self.prev_pos_left == null) self.prev_pos_left = nil;
          if (self.prev_pos_top == null) self.prev_pos_top = nil;

          
          support.$attach("inspector");
          support.$left(self.prev_pos_left);
          support.$top(self.prev_pos_top);
          return (self.item_moved = false);}, {$$s: self});}, {$$s: self});
    });
    return $defs(self, '$controller_sender', function $$controller_sender(message) {
      var self = this, action_found = nil;

      
      action_found = message['$[]']("action");
      self.$log("controller_sender, received: " + (message));
      
      switch (action_found) {
        case "new_project":
          return self.$new_project_callback(self.$fake_new_project_data())
        case "get_projects":
          return self.$get_projects_callback(self.$fake_project_list_data())
        case "load_project":
          return self.$load_project_callback(self.$fake_project_data())
        case "get_settings":
          return self.$get_settings_callback()
        case "get_modules":
          return $$('Atome').$get_modules()
        default:
          return self.$log("controller_sender say : nothing to get")
      };
    });
  })($nesting[0], null, $nesting)
};

Opal.queue(function(Opal) {/* Generated by Opal 1.7.3 */
  var $hash2 = Opal.hash2, self = Opal.top, nil = Opal.nil, default_project_name = nil, tools = nil, current_matrix = nil, logo_color = nil, logo = nil, logo2 = nil;

  Opal.add_stubs('require,[]=,data,grab,attached,text,merge,[],vie_styles,fill_tool_zone,build_matrix,matrix_events,data=,log,vector');
  
  self.$require("application/fake_data");
  self.$require("application/experimental_api");
  self.$require("application/version");
  self.$require("application/styles");
  self.$require("application/ui_template");
  self.$require("application/utilities");
  self.$require("application/communication");
  self.$require("application/callbacks");
  self.$require("application/events");
  self.$require("application/actions");
  self.$require("application/tool_methods");
  self.$require("application/demo_methods");
  self.$grab("debug").$data()['$[]=']("debug", true);
  self.$grab("view").$attached("back_color");
  default_project_name = "untitled";
  self.$grab("action").$text(self.$vie_styles()['$[]']("title").$merge($hash2(["data"], {"data": default_project_name})));
  tools = self.$grab("tools").$data();
  self.$fill_tool_zone(tools);
  current_matrix = self.$build_matrix();
  self.$matrix_events(current_matrix);
  self.$grab("active_matrix")['$data='](0);
  self.$log("active matrix is " + (self.$grab("active_matrix").$data()));
  logo_color = $hash2(["red", "green", "blue"], {"red": 0.38, "green": 1, "blue": 0});
  logo = "<path id=\"vieCanvas-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1\" stroke-miterlimit=\"10\" fill=\"rgb(255, 0, 0)\" d=\"M 73.04,26.41 C 50.57,12.14 15.77,53.39 15.81,85.33 15.83,107.68 23.49,124.45 35.37,139.38 97.06,203.55 73.1,232.52 109.61,231.71 134.09,231.16 181.15,134.57 220.5,138.31 232.63,123.3 240.52,106.7 240.5,85.07 240.5,84.51 240.49,83.95 240.47,83.4 211.52,29.92 146.74,182.8 114.45,179.38 69.64,174.65 90.68,37.61 73.04,26.41 Z M 172.32,76.13 C 172.32,94.63 157.34,109.64 138.85,109.64 120.36,109.64 105.37,94.63 105.37,76.13 105.37,57.62 120.36,42.62 138.85,42.62 157.34,42.62 172.32,57.62 172.32,76.13 Z M 172.32,76.13\" />\n";
  return (logo2 = self.$grab("action").$vector($hash2(["width", "height", "left", "top", "right", "id", "definition", "color"], {"width": 133, "height": 133, "left": "auto", "top": 7, "right": 15, "id": "logo", "definition": logo, "color": logo_color})));
});
