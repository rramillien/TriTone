Opal.modules["works/vie"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $def = Opal.def, $rb_plus = Opal.rb_plus, $rb_divide = Opal.rb_divide, $rb_times = Opal.rb_times, $send = Opal.send, $truthy = Opal.truthy, $return_val = Opal.return_val, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, button = nil, slider = nil, cursor = nil, label = nil, support = nil, input_element = nil, view_div = nil, in_box = nil;

  Opal.add_stubs('[],new,+,/,*,[]=,touch,puts,data,component,input_box,controller_sender,box,shadow,controller,circle,left,top,text,drag,createElement,global,addEventListener,Native,querySelector,appendChild,fill_toolzone');
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'EVe');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.atomes = nil;
    
    
    $def(self, '$initialize', function $$initialize() {
      var self = this;

      return (self.atomes = (new Map()))
    });
    
    $def(self, '$atome', function $$atome(atome_to_find) {
      var self = this;

      return self.atomes['$[]'](atome_to_find)
    });
    return $def(self, '$input_box', function $$input_box(params) {
      var bloc = $$input_box.$$p || nil, self = this, height_wanted = nil, width_wanted = nil, input_back = nil, text_input = nil;

      $$input_box.$$p = null;
      
      ;
      if (params == null) params = (new Map());
      height_wanted = 15;
      width_wanted = 222;
      input_back = $$('Atome').$new((new Map([["renderers", ["html"]], ["id", "input_back"], ["type", "shape"], ["attach", "view"], ["apply", ["shape_color"]], ["left", 120], ["top", 120], ["width", width_wanted], ["height", $rb_plus(height_wanted, $rb_divide($rb_times(height_wanted, 20), 100))], ["smooth", 6]])));
      self.atomes['$[]=']("input_back", input_back);
      $$('Atome').$new((new Map([["renderers", ["html"]], ["id", "input_text_color"], ["type", "color"], ["tag", (new Map([["system", true], ["persistent", true]]))], ["red", 0.1], ["green", 0.1], ["blue", 0.1], ["alpha", 1]])));
      text_input = $$('Atome').$new((new Map([["renderers", ["html"]], ["id", "input_text"], ["type", "text"], ["apply", ["input_text_color"]], ["component", (new Map([["size", height_wanted]]))], ["data", "input"], ["left", $rb_divide($rb_times(height_wanted, 20), 100)], ["top", 0], ["edit", true], ["attach", "input_back"], ["height", height_wanted], ["position", "absolute"]])));
      $send(text_input, 'touch', [true], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

        
        self.$puts(text_input.$data());
        return text_input.$component((new Map([["selected", (new Map([["color", "rgba(0,0,0,0.3)"], ["text", "orange"]]))]])));}, {$$s: self});
      self.atomes['$[]=']("input_text", text_input);
      return input_back;
    }, -1);
  })($nesting[0], null, $nesting);
  
  $def(self, '$input_box', function $$input_box(params) {
    var proc = $$input_box.$$p || nil, text_color = nil, text_size = nil, back_color = nil, width = nil, in_b = nil;

    $$input_box.$$p = null;
    
    ;
    if (params == null) params = (new Map());
    text_color = "white";
    text_size = 12;
    back_color = "gray";
    width = 2000;
    in_b = $$('EVe').$new();
    return in_b.$input_box();
  }, -1);
  $send(self, 'new', [(new Map([["particle", "controller"]]))], function $$2(msg){
    
    if (msg == null) msg = nil;
    return $$('Atome').$controller_sender(msg);});
  button = self.$box((new Map([["smooth", 6], ["left", 12], ["top", 120], ["color", (new Map([["red", 0.3], ["green", 0.3], ["blue", 0.3]]))], ["id", "my_box"]])));
  button.$shadow((new Map([["id", "s1"], ["left", 3], ["top", 3], ["blur", 9], ["invert", true], ["red", 0], ["green", 0], ["blue", 0], ["alpha", 0.7]])));
  $send(button, 'touch', [true], function $$3(){
    return button.$controller("hello")});
  slider = self.$box((new Map([["width", 333], ["height", 25], ["top", 45], ["left", 12], ["smooth", 9], ["color", (new Map([["red", 0.3], ["green", 0.3], ["blue", 0.3]]))]])));
  slider.$shadow((new Map([["id", "s2"], ["left", 3], ["top", 3], ["blur", 9], ["invert", true], ["red", 0], ["green", 0], ["blue", 0], ["alpha", 0.7]])));
  cursor = slider.$circle((new Map([["width", 30], ["height", 30], ["left", 2], ["top", 1], ["color", (new Map([["red", 0.3], ["green", 0.3], ["blue", 0.3]]))]])));
  cursor.$left(0);
  cursor.$top(0);
  cursor.$shadow((new Map([["id", "s4"], ["left", 1], ["top", 1], ["blur", 3], ["option", "natural"], ["red", 0], ["green", 0], ["blue", 0], ["alpha", 0.6]])));
  label = self.$text((new Map([["data", 0], ["top", 69], ["left", 30], ["component", (new Map([["size", 12]]))], ["color", "gray"]])));
  $send(cursor, 'drag', [(new Map([["restrict", (new Map([["max", (new Map([["left", 309], ["top", 0]]))]]))]]))], function $$4(event){var self = $$4.$$s == null ? this : $$4.$$s, value = nil;

    
    if (event == null) event = nil;
    self.$puts(cursor.$left());
    value = $rb_times($rb_divide(cursor.$left(), 309), 100);
    label.$data(value);
    return cursor.$controller((new Map([["action", "setModuleParameterValue"], ["params", (new Map([["moduleId", 6456549897], ["parameterId", 9846546], ["value", value]]))]])));}, {$$s: self});
  support = self.$box((new Map([["top", 250], ["left", 12], ["width", 300], ["height", 40], ["smooth", 9], ["color", (new Map([["red", 0.3], ["green", 0.3], ["blue", 0.3]]))], ["id", "support"]])));
  support.$shadow((new Map([["id", "s3"], ["left", 3], ["top", 3], ["blur", 9], ["invert", true], ["red", 0], ["green", 0], ["blue", 0], ["alpha", 0.7]])));
  input_element = $$('JS').$global()['$[]']("document").$createElement("input");
  input_element['$[]=']("type", "file");
  $send(input_element, 'addEventListener', ["change"], function $$5(native_event){var self = $$5.$$s == null ? this : $$5.$$s, event = nil, file = nil;

    
    if (native_event == null) native_event = nil;
    event = self.$Native(native_event);
    file = event['$[]']("target")['$[]']("files")['$[]'](0);
    if ($truthy(file)) {
      
      self.$puts("file requested: " + (file['$[]']("name")));
      return support.$controller((new Map([["action", "loadProject"], ["params", (new Map([["path", file['$[]']("name")]]))]])));
    } else {
      return nil
    };}, {$$s: self});
  view_div = $$('JS').$global()['$[]']("document").$querySelector("#support");
  view_div.$appendChild(input_element);
  
  $def(self, '$fill_toolzone', $return_val(nil));
  self.$fill_toolzone(["files", "edition", "select", "group", "link", "copy", "undo", "settings"]);
  return (in_box = self.$input_box());
};

Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('require');
  return self.$require("works/vie")
});
