Opal.modules["version"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('puts');
  
  self.$puts("vie version: 0.002");
  return self.$puts("v-UIe version: 0.001");
};

Opal.modules["eVe_add_on"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $def = Opal.def, $rb_plus = Opal.rb_plus, $rb_divide = Opal.rb_divide, $rb_times = Opal.rb_times, $send = Opal.send, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('[],new,+,/,*,[]=,touch,puts,data,component,input_box');
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'EVe');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.atomes = nil;
    
    
    $def(self, '$initialize', function $$initialize() {
      var self = this;

      return (self.atomes = (new Map()))
    });
    
    $def(self, '$atome', function $$atome(atome_to_find) {
      var self = this;

      return self.atomes['$[]'](atome_to_find)
    });
    return $def(self, '$input_box', function $$input_box(params) {
      var bloc = $$input_box.$$p || nil, self = this, height_wanted = nil, width_wanted = nil, input_back = nil, text_input = nil;

      $$input_box.$$p = null;
      
      ;
      if (params == null) params = (new Map());
      height_wanted = 15;
      width_wanted = 222;
      input_back = $$('Atome').$new((new Map([["renderers", ["html"]], ["id", "input_back"], ["type", "shape"], ["attach", "view"], ["apply", ["shape_color"]], ["left", 120], ["top", 120], ["width", width_wanted], ["height", $rb_plus(height_wanted, $rb_divide($rb_times(height_wanted, 20), 100))], ["smooth", 6]])));
      self.atomes['$[]=']("input_back", input_back);
      $$('Atome').$new((new Map([["renderers", ["html"]], ["id", "input_text_color"], ["type", "color"], ["tag", (new Map([["system", true], ["persistent", true]]))], ["red", 0.1], ["green", 0.1], ["blue", 0.1], ["alpha", 1]])));
      text_input = $$('Atome').$new((new Map([["renderers", ["html"]], ["id", "input_text"], ["type", "text"], ["apply", ["input_text_color"]], ["component", (new Map([["size", height_wanted]]))], ["data", "input"], ["left", $rb_divide($rb_times(height_wanted, 20), 100)], ["top", 0], ["edit", true], ["attach", "input_back"], ["height", height_wanted], ["position", "absolute"]])));
      $send(text_input, 'touch', [true], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

        
        self.$puts(text_input.$data());
        return text_input.$component((new Map([["selected", (new Map([["color", "rgba(0,0,0,0.3)"], ["text", "orange"]]))]])));}, {$$s: self});
      self.atomes['$[]=']("input_text", text_input);
      return input_back;
    }, -1);
  })($nesting[0], null, $nesting);
  return $def(self, '$input_box', function $$input_box(params) {
    var proc = $$input_box.$$p || nil, text_color = nil, text_size = nil, back_color = nil, width = nil, in_b = nil;

    $$input_box.$$p = null;
    
    ;
    if (params == null) params = (new Map());
    text_color = "white";
    text_size = 12;
    back_color = "gray";
    width = 2000;
    in_b = $$('EVe').$new();
    return in_b.$input_box();
  }, -1);
};

Opal.modules["styles"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $rb_divide = Opal.rb_divide, $rb_plus = Opal.rb_plus, $rb_times = Opal.rb_times, $rb_minus = Opal.rb_minus, $def = Opal.def, self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('/,+,*,-,color,[],vie_styles');
  
  
  $def(self, '$vie_styles', function $$vie_styles() {
    var action_height = nil, toolbox_with = nil, inspector_with = nil, navigation_height = nil, margin = nil, smooth = nil;

    
    action_height = 39;
    toolbox_with = 52;
    inspector_with = 120;
    navigation_height = 30;
    margin = 9;
    smooth = 3;
    return (new Map([["margin", margin], ["toolbox_with", 60], ["inspector_with", inspector_with], ["navigation_height", 30], ["text_color", (new Map([["red", 0.6], ["green", 0.6], ["blue", 0.6], ["id", "text_color"]]))], ["list_style", (new Map([["visual", (new Map([["size", 15]]))], ["width", 99], ["left", 9], ["attached", ["inactive_color"]]]))], ["back_color", (new Map([["red", 0.1], ["green", 0.1], ["blue", 0.1], ["id", "back_color"]]))], ["title", (new Map([["id", "title"], ["visual", (new Map([["size", 21]]))], ["width", "auto"], ["left", 25], ["center", "horizontal"], ["top", 9], ["attached", ["inactive_color"]]]))], ["toolbox_color", (new Map([["red", 0.1], ["green", 0.1], ["blue", 0.1], ["id", "toolbox_color"]]))], ["center_color", (new Map([["red", 0], ["green", 0], ["blue", 0], ["alpha", 0], ["id", "center_color"]]))], ["action_color", (new Map([["red", 0], ["green", 0], ["blue", 0], ["alpha", 0], ["id", "action_color"]]))], ["inspector_color", (new Map([["red", 0.12], ["green", 0.12], ["blue", 0.12], ["id", "inspector_color"]]))], ["active_color", (new Map([["red", 0.8], ["green", 0.36], ["blue", 0.07], ["id", "active_color"]]))], ["inactive_color", (new Map([["red", 0.3], ["green", 0.3], ["blue", 0.3], ["id", "inactive_color"]]))], ["dark_color", (new Map([["red", 0.127], ["green", 0.127], ["blue", 0.127], ["id", "dark_color"]]))], ["invisible_color", (new Map([["red", 0], ["green", 0], ["blue", 0], ["alpha", 0], ["id", "invisible_color"]]))], ["darker_color", (new Map([["red", 0.127], ["green", 0.127], ["blue", 0.127], ["id", "darker_color"]]))], ["cell_color", (new Map([["red", 0.17], ["green", 0.15], ["blue", 0.13], ["id", "cell_color"]]))], ["cell_connected", (new Map([["red", $rb_divide(154, 255)], ["green", $rb_divide(205, 255)], ["blue", $rb_divide(50, 255)], ["id", "cell_connected"]]))], ["cell_shadow", (new Map([["blur", 9], ["left", 3], ["top", 3], ["id", "cell_shadow"], ["red", 0], ["green", 0], ["blue", 0], ["alpha", 0.3]]))], ["toolbox_style", (new Map([["id", "toolbox"], ["overflow", "hidden"], ["left", margin], ["top", $rb_plus(action_height, margin)], ["smooth", smooth], ["width", toolbox_with], ["bottom", 30], ["height", 420], ["attached", ["toolbox_color"]]]))], ["inspector_style", (new Map([["id", "inspector"], ["left", $rb_plus(toolbox_with, $rb_times(margin, 2))], ["top", $rb_plus(action_height, margin)], ["smooth", smooth], ["width", inspector_with], ["bottom", 0], ["height", 420], ["overflow", "auto"], ["attached", ["cell_shadow", "inspector_color"]]]))], ["action_style", (new Map([["id", "action"], ["left", toolbox_with], ["top", 0], ["width", "auto"], ["right", 0], ["height", action_height], ["attached", ["action_color"]]]))], ["filer", (new Map([["id", "filer"], ["top", 12], ["bottom", 36], ["left", 6], ["width", $rb_minus(inspector_with, 12)], ["overflow", "auto"], ["height", "auto"], ["attached", ["darker_color"]], ["smooth", 6]]))], ["support_style", (new Map([["left", 6], ["width", 23], ["height", 23], ["attached", ["invisible_color"]]]))], ["center_style", (new Map([["id", "center"], ["left", $rb_plus($rb_plus(toolbox_with, inspector_with), $rb_times(margin, 3))], ["bottom", navigation_height], ["top", action_height], ["right", 0], ["width", "auto"], ["height", "auto"], ["attached", ["center_color"]]]))], ["matrix_style", (new Map())]]));
  });
  self.$color(self.$vie_styles()['$[]']("back_color"));
  self.$color(self.$vie_styles()['$[]']("toolbox_color"));
  self.$color(self.$vie_styles()['$[]']("action_color"));
  self.$color(self.$vie_styles()['$[]']("inspector_color"));
  self.$color(self.$vie_styles()['$[]']("center_color"));
  self.$color(self.$vie_styles()['$[]']("darker_color"));
  self.$color(self.$vie_styles()['$[]']("dark_color"));
  self.$color(self.$vie_styles()['$[]']("text_color"));
  self.$color(self.$vie_styles()['$[]']("active_color"));
  self.$color(self.$vie_styles()['$[]']("inactive_color"));
  self.$color(self.$vie_styles()['$[]']("cell_connected"));
  return self.$color(self.$vie_styles()['$[]']("invisible_color"));
};

Opal.modules["sliders"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $send = Opal.send, $rb_times = Opal.rb_times, $rb_divide = Opal.rb_divide, self = Opal.top, nil = Opal.nil, button = nil, slider = nil, cursor = nil, label = nil, support = nil, in_box = nil;

  Opal.add_stubs('box,shadow,touch,controller,circle,left,top,text,drag,puts,*,/,data,import,input_box');
  
  button = self.$box((new Map([["smooth", 6], ["left", 12], ["top", 120], ["color", (new Map([["red", 0.3], ["green", 0.3], ["blue", 0.3]]))], ["id", "my_box"]])));
  button.$shadow((new Map([["id", "s1"], ["left", 3], ["top", 3], ["blur", 9], ["invert", true], ["red", 0], ["green", 0], ["blue", 0], ["alpha", 0.7]])));
  $send(button, 'touch', [true], function $$1(){
    return button.$controller("hello")});
  slider = self.$box((new Map([["width", 333], ["height", 25], ["top", 45], ["left", 12], ["smooth", 9], ["color", (new Map([["red", 0.3], ["green", 0.3], ["blue", 0.3]]))]])));
  slider.$shadow((new Map([["id", "s2"], ["left", 3], ["top", 3], ["blur", 9], ["invert", true], ["red", 0], ["green", 0], ["blue", 0], ["alpha", 0.7]])));
  cursor = slider.$circle((new Map([["width", 30], ["height", 30], ["left", 2], ["top", 1], ["color", (new Map([["red", 0.3], ["green", 0.3], ["blue", 0.3]]))]])));
  cursor.$left(0);
  cursor.$top(0);
  cursor.$shadow((new Map([["id", "s4"], ["left", 1], ["top", 1], ["blur", 3], ["option", "natural"], ["red", 0], ["green", 0], ["blue", 0], ["alpha", 0.6]])));
  label = self.$text((new Map([["data", 0], ["top", 69], ["left", 30], ["component", (new Map([["size", 12]]))], ["color", "gray"]])));
  $send(cursor, 'drag', [(new Map([["restrict", (new Map([["max", (new Map([["left", 309], ["top", 0]]))]]))]]))], function $$2(event){var self = $$2.$$s == null ? this : $$2.$$s, value = nil;

    
    if (event == null) event = nil;
    self.$puts(cursor.$left());
    value = $rb_times($rb_divide(cursor.$left(), 309), 100);
    label.$data(value);
    return cursor.$controller((new Map([["action", "setModuleParameterValue"], ["params", (new Map([["moduleId", 6456549897], ["parameterId", 9846546], ["value", value]]))]])));}, {$$s: self});
  support = self.$box((new Map([["top", 250], ["left", 12], ["width", 300], ["height", 40], ["smooth", 9], ["color", (new Map([["red", 0.3], ["green", 0.3], ["blue", 0.3]]))], ["id", "support"]])));
  support.$shadow((new Map([["id", "s3"], ["left", 3], ["top", 3], ["blur", 9], ["invert", true], ["red", 0], ["green", 0], ["blue", 0], ["alpha", 0.7]])));
  $send(support, 'import', [true], function $$3(content){var self = $$3.$$s == null ? this : $$3.$$s;

    
    if (content == null) content = nil;
    return self.$puts("add code here, content:  " + (content));}, {$$s: self});
  return (in_box = self.$input_box());
};

Opal.modules["tool_box"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $return_val = Opal.return_val, $def = Opal.def, self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('fill_toolzone');
  
  
  $def(self, '$fill_toolzone', $return_val(nil));
  return self.$fill_toolzone(["files", "edition", "select", "group", "link", "copy", "undo", "settings"]);
};

Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('require,console');
  
  self.$require("version");
  self.$require("eVe_add_on");
  self.$require("styles");
  self.$require("sliders");
  self.$require("tool_box");
  return self.$console(true);
});
