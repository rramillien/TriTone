Opal.modules["native"] = function(Opal) {/* Generated by Opal 1.5.0 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $defs = Opal.defs, $truthy = Opal.truthy, $send = Opal.send, $Kernel = Opal.Kernel, $hash2 = Opal.hash2, $range = Opal.range, $to_a = Opal.to_a, $def = Opal.def, $return_ivar = Opal.return_ivar, $alias = Opal.alias, $klass = Opal.klass, $rb_minus = Opal.rb_minus, $return_val = Opal.return_val, $send2 = Opal.send2, $find_super = Opal.find_super, $eqeqeq = Opal.eqeqeq, $rb_ge = Opal.rb_ge, $return_self = Opal.return_self, $gvars = Opal.gvars;

  Opal.add_stubs('try_convert,native?,respond_to?,to_n,raise,inspect,Native,proc,map!,end_with?,define_method,[],convert,call,to_proc,new,each,native_reader,native_writer,extend,warn,include,is_a?,map,Array,to_a,_Array,method_missing,bind,instance_method,[]=,slice,-,length,has_key?,enum_for,===,>=,<<,each_pair,method_defined?,initialize,_initialize,name,native_module');
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Native');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $defs(self, '$is_a?', function $Native_is_a$ques$1(object, klass) {
      var self = this;

      
      try {
        return object instanceof self.$try_convert(klass);
      }
      catch (e) {
        return false;
      }
    
    }, 2);
    $defs(self, '$try_convert', function $$try_convert(value, default$) {
      var self = this;

      
      
      if (default$ == null) default$ = nil;;
      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        return default$;
      }
    ;
    }, -2);
    $defs(self, '$convert', function $$convert(value) {
      var self = this;

      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        self.$raise($$('ArgumentError'), "" + (value.$inspect()) + " isn't native");
      }
    
    }, 1);
    $defs(self, '$call', function $$call(obj, key, $a) {
      var block = $$call.$$p || nil, $post_args, args, self = this;

      delete $$call.$$p;
      
      ;
      
      $post_args = Opal.slice.call(arguments, 2);
      
      args = $post_args;;
      
      var prop = obj[key];

      if (prop instanceof Function) {
        var converted = new Array(args.length);

        for (var i = 0, l = args.length; i < l; i++) {
          var item = args[i],
              conv = self.$try_convert(item);

          converted[i] = conv === nil ? item : conv;
        }

        if (block !== nil) {
          converted.push(block);
        }

        return self.$Native(prop.apply(obj, converted));
      }
      else {
        return self.$Native(prop);
      }
    ;
    }, -3);
    $defs(self, '$proc', function $$proc() {
      var block = $$proc.$$p || nil, self = this;

      delete $$proc.$$p;
      
      ;
      if (!$truthy(block)) {
        self.$raise($$('LocalJumpError'), "no block given")
      };
      return $send($Kernel, 'proc', [], function $$2($a){var $post_args, args, self = $$2.$$s == null ? this : $$2.$$s, instance = nil;

        
        
        $post_args = Opal.slice.call(arguments);
        
        args = $post_args;;
        $send(args, 'map!', [], function $$3(arg){var self = $$3.$$s == null ? this : $$3.$$s;

          
          
          if (arg == null) arg = nil;;
          return self.$Native(arg);}, {$$arity: 1, $$s: self});
        instance = self.$Native(this);
        
        // if global is current scope, run the block in the scope it was defined
        if (this === Opal.global) {
          return block.apply(self, args);
        }

        var self_ = block.$$s;
        block.$$s = null;

        try {
          return block.apply(instance, args);
        }
        finally {
          block.$$s = self_;
        }
      ;}, {$$arity: -1, $$s: self});
    }, 0);
    (function($base, $parent_nesting) {
      var self = $module($base, 'Helpers');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      
      $def(self, '$alias_native', function $$alias_native(new$, $a, $b) {
        var $post_args, $kwargs, old, as, $yield = $$alias_native.$$p || nil, self = this;

        delete $$alias_native.$$p;
        
        
        $post_args = Opal.slice.call(arguments, 1);
        
        $kwargs = Opal.extract_kwargs($post_args);
        
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expected kwargs');
        };
        
        if ($post_args.length > 0) old = $post_args.shift();
        if (old == null) old = new$;;
        
        as = $kwargs.$$smap["as"];
        if (as == null) as = nil;
        if ($truthy(old['$end_with?']("="))) {
          return $send(self, 'define_method', [new$], function $$4(value){var self = $$4.$$s == null ? this : $$4.$$s;
            if (self["native"] == null) self["native"] = nil;

            
            
            if (value == null) value = nil;;
            self["native"][old['$[]']($range(0, -2, false))] = $$('Native').$convert(value);
            return value;}, {$$arity: 1, $$s: self})
        } else if ($truthy(as)) {
          return $send(self, 'define_method', [new$], function $$5($c){var block = $$5.$$p || nil, $post_args, args, self = $$5.$$s == null ? this : $$5.$$s, value = nil;
            if (self["native"] == null) self["native"] = nil;

            delete $$5.$$p;
            
            ;
            
            $post_args = Opal.slice.call(arguments);
            
            args = $post_args;;
            value = $send($$('Native'), 'call', [self["native"], old].concat($to_a(args)), block.$to_proc());
            if ($truthy(value)) {
              return as.$new(value.$to_n())
            } else {
              return nil
            };}, {$$arity: -1, $$s: self})
        } else {
          return $send(self, 'define_method', [new$], function $$6($c){var block = $$6.$$p || nil, $post_args, args, self = $$6.$$s == null ? this : $$6.$$s;
            if (self["native"] == null) self["native"] = nil;

            delete $$6.$$p;
            
            ;
            
            $post_args = Opal.slice.call(arguments);
            
            args = $post_args;;
            return $send($$('Native'), 'call', [self["native"], old].concat($to_a(args)), block.$to_proc());}, {$$arity: -1, $$s: self})
        };
      }, -2);
      
      $def(self, '$native_reader', function $$native_reader($a) {
        var $post_args, names, self = this;

        
        
        $post_args = Opal.slice.call(arguments);
        
        names = $post_args;;
        return $send(names, 'each', [], function $$7(name){var self = $$7.$$s == null ? this : $$7.$$s;

          
          
          if (name == null) name = nil;;
          return $send(self, 'define_method', [name], function $$8(){var self = $$8.$$s == null ? this : $$8.$$s;
            if (self["native"] == null) self["native"] = nil;

            return self.$Native(self["native"][name])}, {$$arity: 0, $$s: self});}, {$$arity: 1, $$s: self});
      }, -1);
      
      $def(self, '$native_writer', function $$native_writer($a) {
        var $post_args, names, self = this;

        
        
        $post_args = Opal.slice.call(arguments);
        
        names = $post_args;;
        return $send(names, 'each', [], function $$9(name){var self = $$9.$$s == null ? this : $$9.$$s;

          
          
          if (name == null) name = nil;;
          return $send(self, 'define_method', ["" + (name) + "="], function $$10(value){var self = $$10.$$s == null ? this : $$10.$$s;
            if (self["native"] == null) self["native"] = nil;

            
            
            if (value == null) value = nil;;
            return self.$Native(self["native"][name] = value);}, {$$arity: 1, $$s: self});}, {$$arity: 1, $$s: self});
      }, -1);
      return $def(self, '$native_accessor', function $$native_accessor($a) {
        var $post_args, names, self = this;

        
        
        $post_args = Opal.slice.call(arguments);
        
        names = $post_args;;
        $send(self, 'native_reader', $to_a(names));
        return $send(self, 'native_writer', $to_a(names));
      }, -1);
    })($nesting[0], $nesting);
    (function($base, $parent_nesting) {
      var self = $module($base, 'Wrapper');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      
      $def(self, '$initialize', function $$initialize(native$) {
        var self = this;

        
        if (!$truthy($Kernel['$native?'](native$))) {
          $Kernel.$raise($$('ArgumentError'), "" + (native$.$inspect()) + " isn't native")
        };
        return (self["native"] = native$);
      }, 1);
      
      $def(self, '$to_n', $return_ivar("native"), 0);
      return $defs(self, '$included', function $$included(klass) {
        
        return klass.$extend($$('Helpers'))
      }, 1);
    })($nesting[0], $nesting);
    return $defs(self, '$included', function $$included(base) {
      var self = this;

      
      self.$warn("Including ::Native is deprecated. Please include Native::Wrapper instead.");
      return base.$include($$('Wrapper'));
    }, 1);
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$native?', function $Kernel_native$ques$11(value) {
      
      return value == null || !value.$$class;
    }, 1);
    
    $def(self, '$Native', function $$Native(obj) {
      var $yield = $$Native.$$p || nil, self = this;

      delete $$Native.$$p;
      if ($truthy(obj == null)) {
        return nil
      } else if ($truthy(self['$native?'](obj))) {
        return $$$($$('Native'), 'Object').$new(obj)
      } else if ($truthy(obj['$is_a?']($$('Array')))) {
        return $send(obj, 'map', [], function $$12(o){var self = $$12.$$s == null ? this : $$12.$$s;

          
          
          if (o == null) o = nil;;
          return self.$Native(o);}, {$$arity: 1, $$s: self})
      } else if ($truthy(obj['$is_a?']($$('Proc')))) {
        return $send(self, 'proc', [], function $$13($a){var block = $$13.$$p || nil, $post_args, args, self = $$13.$$s == null ? this : $$13.$$s;

          delete $$13.$$p;
          
          ;
          
          $post_args = Opal.slice.call(arguments);
          
          args = $post_args;;
          return self.$Native($send(obj, 'call', $to_a(args), block.$to_proc()));}, {$$arity: -1, $$s: self})
      } else {
        return obj
      }
    }, 1);
    $alias(self, "_Array", "Array");
    return $def(self, '$Array', function $$Array(object, $a) {
      var block = $$Array.$$p || nil, $post_args, args, self = this;

      delete $$Array.$$p;
      
      ;
      
      $post_args = Opal.slice.call(arguments, 1);
      
      args = $post_args;;
      if ($truthy(self['$native?'](object))) {
        return $send($$$($$('Native'), 'Array'), 'new', [object].concat($to_a(args)), block.$to_proc()).$to_a()
      };
      return self.$_Array(object);
    }, -2);
  })($nesting[0], $nesting);
  (function($base, $super) {
    var self = $klass($base, $super, 'Object');

    var $proto = self.$$prototype;

    $proto["native"] = nil;
    
    self.$include($$$($$$('Native'), 'Wrapper'));
    
    $def(self, '$==', function $Object_$eq_eq$14(other) {
      var self = this;

      return self["native"] === $$$('Native').$try_convert(other)
    }, 1);
    
    $def(self, '$has_key?', function $Object_has_key$ques$15(name) {
      var self = this;

      return Opal.hasOwnProperty.call(self["native"], name)
    }, 1);
    
    $def(self, '$each', function $$each($a) {
      var $post_args, args, $yield = $$each.$$p || nil, self = this;

      delete $$each.$$p;
      
      
      $post_args = Opal.slice.call(arguments);
      
      args = $post_args;;
      if (($yield !== nil)) {
        
        
        for (var key in self["native"]) {
          Opal.yieldX($yield, [key, self["native"][key]])
        }
      ;
        return self;
      } else {
        return $send(self, 'method_missing', ["each"].concat($to_a(args)))
      };
    }, -1);
    
    $def(self, '$[]', function $Object_$$$16(key) {
      var self = this;

      
      var prop = self["native"][key];

      if (prop instanceof Function) {
        return prop;
      }
      else {
        return $$$('Native').$call(self["native"], key)
      }
    
    }, 1);
    
    $def(self, '$[]=', function $Object_$$$eq$17(key, value) {
      var self = this, native$ = nil;

      
      native$ = $$$('Native').$try_convert(value);
      if ($truthy(native$ === nil)) {
        return self["native"][key] = value
      } else {
        return self["native"][key] = native$
      };
    }, 2);
    
    $def(self, '$merge!', function $Object_merge$excl$18(other) {
      var self = this;

      
      
      other = $$$('Native').$convert(other);

      for (var prop in other) {
        self["native"][prop] = other[prop];
      }
    ;
      return self;
    }, 1);
    
    $def(self, '$respond_to?', function $Object_respond_to$ques$19(name, include_all) {
      var self = this;

      
      
      if (include_all == null) include_all = false;;
      return $Kernel.$instance_method("respond_to?").$bind(self).$call(name, include_all);
    }, -2);
    
    $def(self, '$respond_to_missing?', function $Object_respond_to_missing$ques$20(name, include_all) {
      var self = this;

      
      
      if (include_all == null) include_all = false;;
      return Opal.hasOwnProperty.call(self["native"], name);
    }, -2);
    
    $def(self, '$method_missing', function $$method_missing(mid, $a) {
      var block = $$method_missing.$$p || nil, $post_args, args, $b, self = this;

      delete $$method_missing.$$p;
      
      ;
      
      $post_args = Opal.slice.call(arguments, 1);
      
      args = $post_args;;
      
      if (mid.charAt(mid.length - 1) === '=') {
        return ($b = [mid.$slice(0, $rb_minus(mid.$length(), 1)), args['$[]'](0)], $send(self, '[]=', $b), $b[$b.length - 1]);
      }
      else {
        return $send($$$('Native'), 'call', [self["native"], mid].concat($to_a(args)), block.$to_proc());
      }
    ;
    }, -2);
    
    $def(self, '$nil?', $return_val(false), 0);
    
    $def(self, '$is_a?', function $Object_is_a$ques$21(klass) {
      var self = this;

      return Opal.is_a(self, klass);
    }, 1);
    
    $def(self, '$instance_of?', function $Object_instance_of$ques$22(klass) {
      var self = this;

      return self.$$class === klass;
    }, 1);
    
    $def(self, '$class', function $Object_class$23() {
      var self = this;

      return self.$$class;
    }, 0);
    
    $def(self, '$to_a', function $$to_a(options) {
      var block = $$to_a.$$p || nil, self = this;

      delete $$to_a.$$p;
      
      ;
      
      if (options == null) options = $hash2([], {});;
      return $send($$$($$$('Native'), 'Array'), 'new', [self["native"], options], block.$to_proc()).$to_a();
    }, -1);
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      return "#<Native:" + (String(self["native"])) + ">"
    }, 0);
    $alias(self, "include?", "has_key?");
    $alias(self, "key?", "has_key?");
    $alias(self, "kind_of?", "is_a?");
    return $alias(self, "member?", "has_key?");
  })($$('Native'), $$('BasicObject'));
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Array');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.named = $proto["native"] = $proto.get = $proto.block = $proto.set = $proto.length = nil;
    
    self.$include($$$($$('Native'), 'Wrapper'));
    self.$include($$('Enumerable'));
    
    $def(self, '$initialize', function $$initialize(native$, options) {
      var block = $$initialize.$$p || nil, self = this, $ret_or_1 = nil;

      delete $$initialize.$$p;
      
      ;
      
      if (options == null) options = $hash2([], {});;
      $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [native$], null);
      self.get = ($truthy(($ret_or_1 = options['$[]']("get"))) ? ($ret_or_1) : (options['$[]']("access")));
      self.named = options['$[]']("named");
      self.set = ($truthy(($ret_or_1 = options['$[]']("set"))) ? ($ret_or_1) : (options['$[]']("access")));
      self.length = ($truthy(($ret_or_1 = options['$[]']("length"))) ? ($ret_or_1) : ("length"));
      self.block = block;
      if ($truthy(self.$length() == null)) {
        return self.$raise($$('ArgumentError'), "no length found on the array-like object")
      } else {
        return nil
      };
    }, -2);
    
    $def(self, '$each', function $$each() {
      var block = $$each.$$p || nil, self = this;

      delete $$each.$$p;
      
      ;
      if (!$truthy(block)) {
        return self.$enum_for("each")
      };
      
      for (var i = 0, length = self.$length(); i < length; i++) {
        Opal.yield1(block, self['$[]'](i));
      }
    ;
      return self;
    }, 0);
    
    $def(self, '$[]', function $Array_$$$24(index) {
      var self = this, result = nil, $ret_or_1 = nil;

      
      result = (($eqeqeq($$('String'), ($ret_or_1 = index)) || ($eqeqeq($$('Symbol'), $ret_or_1))) ? (($truthy(self.named) ? (self["native"][self.named](index)) : (self["native"][index]))) : ($eqeqeq($$('Integer'), $ret_or_1) ? (($truthy(self.get) ? (self["native"][self.get](index)) : (self["native"][index]))) : (nil)));
      if ($truthy(result)) {
        if ($truthy(self.block)) {
          return self.block.$call(result)
        } else {
          return self.$Native(result)
        }
      } else {
        return nil
      };
    }, 1);
    
    $def(self, '$[]=', function $Array_$$$eq$25(index, value) {
      var self = this;

      if ($truthy(self.set)) {
        return self["native"][self.set](index, $$('Native').$convert(value))
      } else {
        return self["native"][index] = $$('Native').$convert(value)
      }
    }, 2);
    
    $def(self, '$last', function $$last(count) {
      var $a, self = this, index = nil, result = nil;

      
      
      if (count == null) count = nil;;
      if ($truthy(count)) {
        
        index = $rb_minus(self.$length(), 1);
        result = [];
        while ($truthy($rb_ge(index, 0))) {
          
          result['$<<'](self['$[]'](index));
          index = $rb_minus(index, 1);
        };
        return result;
      } else {
        return self['$[]']($rb_minus(self.$length(), 1))
      };
    }, -1);
    
    $def(self, '$length', function $$length() {
      var self = this;

      return self["native"][self.length]
    }, 0);
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      return self.$to_a().$inspect()
    }, 0);
    return $alias(self, "to_ary", "to_a");
  })($$('Native'), null, $nesting);
  (function($base, $super) {
    var self = $klass($base, $super, 'Numeric');

    
    return $def(self, '$to_n', function $$to_n() {
      var self = this;

      return self.valueOf();
    }, 0)
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'Proc');

    
    return $def(self, '$to_n', $return_self, 0)
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'String');

    
    return $def(self, '$to_n', function $$to_n() {
      var self = this;

      return self.valueOf();
    }, 0)
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'Regexp');

    
    return $def(self, '$to_n', function $$to_n() {
      var self = this;

      return self.valueOf();
    }, 0)
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'MatchData');

    
    return $def(self, '$to_n', $return_ivar("matches"), 0)
  })($nesting[0], null);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Struct');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return $def(self, '$to_n', function $$to_n() {
      var self = this, result = nil;

      
      result = {};
      $send(self, 'each_pair', [], function $$26(name, value){
        
        
        if (name == null) name = nil;;
        
        if (value == null) value = nil;;
        return result[name] = $$('Native').$try_convert(value, value);}, 2);
      return result;
    }, 0)
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Array');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return $def(self, '$to_n', function $$to_n() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var obj = self[i];

        result.push($$('Native').$try_convert(obj, obj));
      }

      return result;
    
    }, 0)
  })($nesting[0], null, $nesting);
  (function($base, $super) {
    var self = $klass($base, $super, 'Boolean');

    
    return $def(self, '$to_n', function $$to_n() {
      var self = this;

      return self.valueOf();
    }, 0)
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'Time');

    
    return $def(self, '$to_n', $return_self, 0)
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'NilClass');

    
    return $def(self, '$to_n', function $$to_n() {
      
      return null;
    }, 0)
  })($nesting[0], null);
  if (!$truthy($$('Hash')['$method_defined?']("_initialize"))) {
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Hash');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      $alias(self, "_initialize", "initialize");
      
      $def(self, '$initialize', function $$initialize(defaults) {
        var block = $$initialize.$$p || nil, self = this;

        delete $$initialize.$$p;
        
        ;
        ;
        
        if (defaults != null &&
             (defaults.constructor === undefined ||
               defaults.constructor === Object)) {
          var smap = self.$$smap,
              keys = self.$$keys,
              key, value;

          for (key in defaults) {
            value = defaults[key];

            if (value &&
                 (value.constructor === undefined ||
                   value.constructor === Object)) {
              smap[key] = $$('Hash').$new(value);
            } else if (value && value.$$is_array) {
              value = value.map(function(item) {
                if (item &&
                     (item.constructor === undefined ||
                       item.constructor === Object)) {
                  return $$('Hash').$new(item);
                }

                return self.$Native(item);
              });
              smap[key] = value
            } else {
              smap[key] = self.$Native(value);
            }

            keys.push(key);
          }

          return self;
        }

        return $send(self, '_initialize', [defaults], block.$to_proc());
      ;
      }, -1);
      return $def(self, '$to_n', function $$to_n() {
        var self = this;

        
        var result = {},
            keys = self.$$keys,
            smap = self.$$smap,
            key, value;

        for (var i = 0, length = keys.length; i < length; i++) {
          key = keys[i];

          if (key.$$is_string) {
            value = smap[key];
          } else {
            key = key.key;
            value = key.value;
          }

          result[key] = $$('Native').$try_convert(value, value);
        }

        return result;
      
      }, 0);
    })($nesting[0], null, $nesting)
  };
  (function($base, $super) {
    var self = $klass($base, $super, 'Module');

    
    return $def(self, '$native_module', function $$native_module() {
      var self = this;

      return Opal.global[self.$name()] = self
    }, 0)
  })($nesting[0], null);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Class');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$native_alias', function $$native_alias(new_jsid, existing_mid) {
      var self = this;

      
      var aliased = self.prototype['$' + existing_mid];
      if (!aliased) {
        self.$raise($$('NameError').$new("undefined method `" + (existing_mid) + "' for class `" + (self.$inspect()) + "'", existing_mid));
      }
      self.prototype[new_jsid] = aliased;
    
    }, 2);
    return $def(self, '$native_class', function $$native_class() {
      var self = this;

      
      self.$native_module();
      return self["new"] = self.$new;;
    }, 0);
  })($nesting[0], null, $nesting);
  return ($gvars.$ = ($gvars.global = self.$Native(Opal.global)));
};

Opal.modules["opal/jquery/constants"] = function(Opal) {/* Generated by Opal 1.5.0 */
  var $a, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $truthy = Opal.truthy, $const_set = Opal.const_set;

  Opal.add_stubs('require,raise');
  
  self.$require("native");
  if ($truthy((($a = $$('JQUERY_CLASS', 'skip_raise')) ? 'constant' : nil))) {
    return nil
  } else if ($truthy(!!Opal.global.jQuery)) {
    return $const_set($nesting[0], 'JQUERY_CLASS', $const_set($nesting[0], 'JQUERY_SELECTOR', Opal.global.jQuery))
  } else if ($truthy(!!Opal.global.Zepto)) {
    
    $const_set($nesting[0], 'JQUERY_SELECTOR', Opal.global.Zepto);
    return $const_set($nesting[0], 'JQUERY_CLASS', Opal.global.Zepto.zepto.Z);
  } else {
    return self.$raise($$('NameError'), "Can't find jQuery or Zepto. jQuery must be included before opal-jquery")
  };
};

Opal.modules["opal/jquery/element"] = function(Opal) {/* Generated by Opal 1.5.0 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $klass = Opal.klass, $defs = Opal.defs, $send = Opal.send, $to_a = Opal.to_a, $def = Opal.def, $alias = Opal.alias, $return_self = Opal.return_self, $truthy = Opal.truthy, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs('require,to_n,include,each,alias_native,attr_reader,call,next,append,nil?,raise,is_a?,has_key?,delete,from_object,gsub,upcase,[],compact,map,respond_to?,<<,Native,none?,arity,new,length');
  
  self.$require("native");
  self.$require("opal/jquery/constants");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Element');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    var $ = $$('JQUERY_SELECTOR').$to_n();
    self.$include($$('Enumerable'));
    $defs(self, '$find', function $$find(selector) {
      
      return $(selector)
    }, 1);
    $defs(self, '$[]', function $Element_$$$1(selector) {
      
      return $(selector)
    }, 1);
    $defs(self, '$id', function $$id(id) {
      
      
      var el = document.getElementById(id);

      if (!el) {
        return nil;
      }

      return $(el);
    
    }, 1);
    $defs(self, '$new', function $Element_new$2(tag) {
      
      
      
      if (tag == null) tag = "div";;
      return $(document.createElement(tag));;
    }, -1);
    $defs(self, '$parse', function $$parse(str) {
      
      return $.parseHTML ? $($.parseHTML(str)) : $(str);
    }, 1);
    $defs(self, '$expose', function $$expose($a) {
      var $post_args, methods, self = this;

      
      
      $post_args = Opal.slice.call(arguments);
      
      methods = $post_args;;
      return $send(methods, 'each', [], function $$3(method){var self = $$3.$$s == null ? this : $$3.$$s;

        
        
        if (method == null) method = nil;;
        return self.$alias_native(method);}, {$$arity: 1, $$s: self});
    }, -1);
    self.$attr_reader("selector");
    self.$alias_native("after");
    self.$alias_native("before");
    self.$alias_native("parent");
    self.$alias_native("parents");
    self.$alias_native("prev");
    self.$alias_native("remove");
    self.$alias_native("hide");
    self.$alias_native("show");
    self.$alias_native("toggle");
    self.$alias_native("children");
    self.$alias_native("blur");
    self.$alias_native("closest");
    self.$alias_native("detach");
    self.$alias_native("focus");
    self.$alias_native("find");
    self.$alias_native("next");
    self.$alias_native("siblings");
    self.$alias_native("text");
    self.$alias_native("trigger");
    self.$alias_native("append");
    self.$alias_native("prepend");
    self.$alias_native("serialize");
    self.$alias_native("is");
    self.$alias_native("filter");
    self.$alias_native("not");
    self.$alias_native("last");
    self.$alias_native("wrap");
    self.$alias_native("stop");
    self.$alias_native("clone");
    self.$alias_native("empty");
    self.$alias_native("get");
    
    $def(self, '$prop', function $$prop($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments);
      
      args = $post_args;;
      return $send($$('Native'), 'call', [self, "prop"].concat($to_a(args)));
    }, -1);
    $alias(self, "succ", "next");
    $alias(self, "<<", "append");
    self.$alias_native("add_class", "addClass");
    self.$alias_native("append_to", "appendTo");
    self.$alias_native("has_class?", "hasClass");
    self.$alias_native("html=", "html");
    self.$alias_native("index");
    self.$alias_native("is?", "is");
    self.$alias_native("remove_attr", "removeAttr");
    self.$alias_native("remove_class", "removeClass");
    self.$alias_native("replace_all", "replaceAll");
    self.$alias_native("replace_with", "replaceWith");
    self.$alias_native("select");
    self.$alias_native("submit");
    self.$alias_native("click");
    self.$alias_native("text=", "text");
    self.$alias_native("toggle_class", "toggleClass");
    self.$alias_native("value=", "val");
    self.$alias_native("scroll_top=", "scrollTop");
    self.$alias_native("scroll_top", "scrollTop");
    self.$alias_native("scroll_left=", "scrollLeft");
    self.$alias_native("scroll_left", "scrollLeft");
    self.$alias_native("remove_attribute", "removeAttr");
    self.$alias_native("slide_down", "slideDown");
    self.$alias_native("slide_up", "slideUp");
    self.$alias_native("slide_toggle", "slideToggle");
    self.$alias_native("fade_toggle", "fadeToggle");
    self.$alias_native("height=", "height");
    self.$alias_native("width=", "width");
    self.$alias_native("outer_width", "outerWidth");
    self.$alias_native("outer_height", "outerHeight");
    
    $def(self, '$to_n', $return_self, 0);
    
    $def(self, '$[]', function $Element_$$$4(name) {
      var self = this;

      
      var value = self.attr(name);
      if(value === undefined) return nil;
      return value;
    
    }, 1);
    
    $def(self, '$[]=', function $Element_$$$eq$5(name, value) {
      var self = this;

      
      if ($truthy(value['$nil?']())) {
        return self.removeAttr(name)
      };
      return self.attr(name, value);;
    }, 2);
    
    $def(self, '$attr', function $$attr($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments);
      
      args = $post_args;;
      
      var size = args.length;
      switch (size) {
      case 1:
        var result = self.attr(args[0]);
        return( (result == null) ? nil : result );
        break;
      case 2:
        return self.attr(args[0], args[1]);
        break;
      default:
        self.$raise($$('ArgumentError'), "#attr only accepts 1 or 2 arguments")
      }
    ;
    }, -1);
    
    $def(self, '$has_attribute?', function $Element_has_attribute$ques$6(name) {
      var self = this;

      return self.attr(name) !== undefined;
    }, 1);
    
    $def(self, '$append_to_body', function $$append_to_body() {
      var self = this;

      return self.appendTo(document.body);
    }, 0);
    
    $def(self, '$append_to_head', function $$append_to_head() {
      var self = this;

      return self.appendTo(document.head);
    }, 0);
    
    $def(self, '$at', function $$at(index) {
      var self = this;

      
      var length = self.length;

      if (index < 0) {
        index += length;
      }

      if (index < 0 || index >= length) {
        return nil;
      }

      return $(self[index]);
    
    }, 1);
    
    $def(self, '$class_name', function $$class_name() {
      var self = this;

      
      var first = self[0];
      return (first && first.className) || "";
    
    }, 0);
    
    $def(self, '$class_name=', function $Element_class_name$eq$7(name) {
      var self = this;

      
      
      for (var i = 0, length = self.length; i < length; i++) {
        self[i].className = name;
      }
    ;
      return self;
    }, 1);
    
    $def(self, '$css', function $$css(name, value) {
      var self = this;

      
      
      if (value == null) value = nil;;
      if (($truthy(value['$nil?']()) && ($truthy(name['$is_a?']($$('String')))))) {
        return self.css(name)
      } else if ($truthy(name['$is_a?']($$('Hash')))) {
        self.css(name.$to_n())
      } else {
        self.css(name, value)
      };
      return self;
    }, -2);
    
    $def(self, '$animate', function $$animate(params) {
      var block = $$animate.$$p || nil, self = this, speed = nil;

      delete $$animate.$$p;
      
      ;
      speed = ($truthy(params['$has_key?']("speed")) ? (params.$delete("speed")) : (400));
      if ((block !== nil)) {
        return self.animate(params.$to_n(), speed, block)
      } else {
        return self.animate(params.$to_n(), speed)
      };
    }, 1);
    
    $def(self, '$data', function $$data($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments);
      
      args = $post_args;;
      
      var result = self.data.apply(self, args);
      if (
        (typeof(result) === 'object') && !(result instanceof $$('JQUERY_CLASS'))
      ) {
        result = $$('JSON').$from_object(result);
      }
      return result == null ? nil : result;
    ;
    }, -1);
    
    $def(self, '$effect', function $$effect(name, $a) {
      var block = $$effect.$$p || nil, $post_args, args, self = this;

      delete $$effect.$$p;
      
      ;
      
      $post_args = Opal.slice.call(arguments, 1);
      
      args = $post_args;;
      name = $send(name, 'gsub', [/_\w/], function $$8(match){
        
        
        if (match == null) match = nil;;
        return match['$[]'](1).$upcase();}, 1);
      args = $send(args, 'map', [], function $$9(a){
        
        
        if (a == null) a = nil;;
        if ($truthy(a['$respond_to?']("to_n"))) {
          return a.$to_n()
        } else {
          return nil
        };}, 1).$compact();
      args['$<<'](function() { ((block !== nil) ? (block.$call()) : nil) });
      return self[name].apply(self, args);
    }, -2);
    
    $def(self, '$visible?', function $Element_visible$ques$10() {
      var self = this;

      return self.is(':visible');
    }, 0);
    
    $def(self, '$offset', function $$offset() {
      var self = this;

      return self.$Native(self.offset())
    }, 0);
    
    $def(self, '$each', function $$each() {
      var $yield = $$each.$$p || nil, self = this;

      delete $$each.$$p;
      
      for (var i = 0, length = self.length; i < length; i++) {;
      Opal.yield1($yield, $(self[i]));
      };
      return self;
    }, 0);
    
    $def(self, '$first', function $$first() {
      var self = this;

      return self.length ? self.first() : nil;
    }, 0);
    
    $def(self, '$html', function $$html(content) {
      var self = this;

      
      ;
      
      if (content != null) {
        return self.html(content);
      }

      return self.html() || '';
    ;
    }, -1);
    
    $def(self, '$id', function $$id() {
      var self = this;

      
      var first = self[0];
      return (first && first.id) || "";
    
    }, 0);
    
    $def(self, '$id=', function $Element_id$eq$11(id) {
      var self = this;

      
      var first = self[0];

      if (first) {
        first.id = id;
      }

      return self;
    
    }, 1);
    
    $def(self, '$tag_name', function $$tag_name() {
      var self = this;

      return self.length > 0 ? self[0].tagName.toLowerCase() : nil
    }, 0);
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      
      if      (self[0] === document) return '#<Element [document]>'
      else if (self[0] === window  ) return '#<Element [window]>'

      var val, el, str, result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        el  = self[i];
        if (!el.tagName) { return '#<Element ['+el.toString()+']'; }

        str = "<" + el.tagName.toLowerCase();

        if (val = el.id) str += (' id="' + val + '"');
        if (val = el.className) str += (' class="' + val + '"');

        result.push(str + '>');
      }

      return '#<Element [' + result.join(', ') + ']>';
    
    }, 0);
    
    $def(self, '$to_s', function $$to_s() {
      var self = this;

      
      var val, el, result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        el  = self[i];

        result.push(el.outerHTML)
      }

      return result.join(', ');
    
    }, 0);
    
    $def(self, '$length', function $$length() {
      var self = this;

      return self.length;
    }, 0);
    
    $def(self, '$any?', function $Element_any$ques$12() {
      var self = this;

      return self.length > 0;
    }, 0);
    
    $def(self, '$empty?', function $Element_empty$ques$13() {
      var self = this;

      return self.length === 0;
    }, 0);
    $alias(self, "empty?", "none?");
    
    $def(self, '$on', function $$on(name, sel) {
      var block = $$on.$$p || nil, self = this;

      delete $$on.$$p;
      
      ;
      
      if (sel == null) sel = nil;;
      
      var has_args = block.$arity() !== 0;

      var wrapper = function() {
        for(var args = new Array(arguments.length), i = 0, ii = args.length; i < ii; i++) {
          args[i] = arguments[i];
        }

        // Use preventDefault as a canary for native events
        if (has_args && args[0].preventDefault) {
          args[0] = $$('Event').$new(args[0]);
        }

        return block.apply(null, args);
      };

      block.$$jqwrap = wrapper;

      if (sel == nil) {
        self.on(name, wrapper);
      }
      else {
        self.on(name, sel, wrapper);
      }
    ;
      return block;
    }, -2);
    
    $def(self, '$one', function $$one(name, sel) {
      var block = $$one.$$p || nil, self = this;

      delete $$one.$$p;
      
      ;
      
      if (sel == null) sel = nil;;
      
      var has_args = block.$arity() !== 0;

      var wrapper = function() {
        for(var args = new Array(arguments.length), i = 0, ii = args.length; i < ii; i++) {
          args[i] = arguments[i];
        }

        // Use preventDefault as a canary for native events
        if (has_args && args[0].preventDefault) {
          args[0] = $$('Event').$new(args[0]);
        }

        return block.apply(null, args);
      };

      block.$$jqwrap = wrapper;

      if (sel == nil) {
        self.one(name, wrapper);
      }
      else {
        self.one(name, sel, wrapper);
      }
    ;
      return block;
    }, -2);
    
    $def(self, '$off', function $$off(name, sel, block) {
      var self = this;

      
      
      if (block == null) block = nil;;
      
      if (sel == null) {
        return self.off(name);
      }
      else if (block === nil) {
        return self.off(name, sel.$$jqwrap);
      }
      else {
        return self.off(name, sel, block.$$jqwrap);
      }
    ;
    }, -3);
    
    $def(self, '$serialize_array', function $$serialize_array() {
      var self = this;

      return $send((self.serializeArray()), 'map', [], function $$14(e){
        
        
        if (e == null) e = nil;;
        return $$('Hash').$new(e);}, 1)
    }, 0);
    $alias(self, "size", "length");
    
    $def(self, '$value', function $$value() {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = self.val()))) {
        return $ret_or_1
      } else {
        return ""
      }
    }, 0);
    
    $def(self, '$height', function $$height() {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = self.height()))) {
        return $ret_or_1
      } else {
        return nil
      }
    }, 0);
    
    $def(self, '$width', function $$width() {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = self.width()))) {
        return $ret_or_1
      } else {
        return nil
      }
    }, 0);
    
    $def(self, '$position', function $$position() {
      var self = this;

      return self.$Native(self.position())
    }, 0);
    
    $def(self, '$==', function $Element_$eq_eq$15(other) {
      var self = this;

      return self.is(other);
    }, 1);
    
    $def(self, '$respond_to_missing?', function $Element_respond_to_missing$ques$16(name, _) {
      var $yield = $Element_respond_to_missing$ques$16.$$p || nil, self = this;

      delete $Element_respond_to_missing$ques$16.$$p;
      
      var method = self[name];
      if (typeof(method) === 'function') {
        return true;
      } else {
        return $send2(self, $find_super(self, 'respond_to_missing?', $Element_respond_to_missing$ques$16, false, true), 'respond_to_missing?', [name, _], $yield);
      }
    
    }, 2);
    return $def(self, '$method_missing', function $$method_missing(name, $a) {
      var block = $$method_missing.$$p || nil, $post_args, args, self = this;

      delete $$method_missing.$$p;
      
      ;
      
      $post_args = Opal.slice.call(arguments, 1);
      
      args = $post_args;;
      if ((block !== nil)) {
        args['$<<'](block)
      };
      
      var method = self[name];
      if (typeof(method) === 'function') {
        return method.apply(self, args.$to_n());
      } else {
        return $send2(self, $find_super(self, 'method_missing', $$method_missing, false, true), 'method_missing', [name].concat($to_a(args)), block);
      }
    ;
    }, -2);
  })($nesting[0], $$('JQUERY_CLASS').$to_n(), $nesting);
};

Opal.modules["opal/jquery/window"] = function(Opal) {/* Generated by Opal 1.5.0 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $def = Opal.def, $send = Opal.send, $to_a = Opal.to_a, $const_set = Opal.const_set, $gvars = Opal.gvars;

  Opal.add_stubs('require,include,find,on,element,to_proc,off,trigger,new');
  
  self.$require("opal/jquery/element");
  (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Window');

      var $a, $b, $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.element = nil;
      
      self.$include(($truthy((($b = $$('Native', 'skip_raise')) && ($a = $$$($b, 'Wrapper', 'skip_raise')) ? 'constant' : nil)) ? ($$$($$('Native'), 'Wrapper')) : ($$('Native'))));
      
      $def(self, '$element', function $$element() {
        var self = this, $ret_or_1 = nil;

        return (self.element = ($truthy(($ret_or_1 = self.element)) ? ($ret_or_1) : ($$('Element').$find(window))))
      }, 0);
      
      $def(self, '$on', function $$on($a) {
        var block = $$on.$$p || nil, $post_args, args, self = this;

        delete $$on.$$p;
        
        ;
        
        $post_args = Opal.slice.call(arguments);
        
        args = $post_args;;
        return $send(self.$element(), 'on', $to_a(args), block.$to_proc());
      }, -1);
      
      $def(self, '$off', function $$off($a) {
        var block = $$off.$$p || nil, $post_args, args, self = this;

        delete $$off.$$p;
        
        ;
        
        $post_args = Opal.slice.call(arguments);
        
        args = $post_args;;
        return $send(self.$element(), 'off', $to_a(args), block.$to_proc());
      }, -1);
      return $def(self, '$trigger', function $$trigger($a) {
        var $post_args, args, self = this;

        
        
        $post_args = Opal.slice.call(arguments);
        
        args = $post_args;;
        return $send(self.$element(), 'trigger', $to_a(args));
      }, -1);
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
  $const_set($nesting[0], 'Window', $$$($$('Browser'), 'Window').$new(window));
  return ($gvars.window = $$('Window'));
};

Opal.modules["opal/jquery/document"] = function(Opal) {/* Generated by Opal 1.5.0 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $class_variable_set = Opal.class_variable_set, $truthy = Opal.truthy, $class_variable_get = Opal.class_variable_get, $def = Opal.def, $send = Opal.send, $const_set = Opal.const_set, $gvars = Opal.gvars;

  Opal.add_stubs('require,to_n,call,new,ready?,resolve,module_function,find,extend');
  
  self.$require("opal/jquery/constants");
  self.$require("opal/jquery/element");
  (function($base, $parent_nesting) {
    var self = $module($base, 'Browser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'DocumentMethods');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      $class_variable_set($nesting[0], '@@__isReady', false);
      var $ = $$('JQUERY_SELECTOR').$to_n();
      
      $def(self, '$ready?', function $DocumentMethods_ready$ques$1() {
        var block = $DocumentMethods_ready$ques$1.$$p || nil;

        delete $DocumentMethods_ready$ques$1.$$p;
        
        ;
        if ((block !== nil)) {
          if ($truthy($class_variable_get($nesting[0], '@@__isReady', false))) {
            return block.$call()
          } else {
            return $(block)
          }
        } else {
          return nil
        };
      }, 0);
      
      $def(self, '$ready', function $$ready() {
        var promise = nil;

        
        promise = $$('Promise').$new();
        $send($$('Document'), 'ready?', [], function $$2(){
          return promise.$resolve()}, 0);
        return promise;
      }, 0);
      self.$module_function("ready?");
      $send(self, 'ready?', [], function $DocumentMethods$3(){
        return $class_variable_set($nesting[0], '@@__isReady', true)}, 0);
      
      $def(self, '$title', function $$title() {
        
        return document.title;
      }, 0);
      
      $def(self, '$title=', function $DocumentMethods_title$eq$4(title) {
        
        return document.title = title;
      }, 1);
      
      $def(self, '$head', function $$head() {
        
        return $$('Element').$find(document.head)
      }, 0);
      return $def(self, '$body', function $$body() {
        
        return $$('Element').$find(document.body)
      }, 0);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
  $const_set($nesting[0], 'Document', $$('Element').$find(document));
  $$('Document').$extend($$$($$('Browser'), 'DocumentMethods'));
  return ($gvars.document = $$('Document'));
};

Opal.modules["opal/jquery/event"] = function(Opal) {/* Generated by Opal 1.5.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $klass = Opal.klass, $assign_ivar = Opal.assign_ivar, $def = Opal.def, $return_ivar = Opal.return_ivar, $alias = Opal.alias;

  Opal.add_stubs('require,to_n,element,stop,prevent,prevented?,stopped?,stop_immediate');
  
  self.$require("opal/jquery/constants");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Event');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto["native"] = nil;
    
    var $ = $$('JQUERY_SELECTOR').$to_n();
    
    $def(self, '$initialize', $assign_ivar("native"), 0);
    
    $def(self, '$to_n', $return_ivar("native"), 0);
    
    $def(self, '$[]', function $Event_$$$1(name) {
      var self = this;

      return self["native"][name]
    }, 1);
    
    $def(self, '$type', function $$type() {
      var self = this;

      return self["native"].type
    }, 0);
    
    $def(self, '$element', function $$element() {
      var self = this;

      return $(self["native"].currentTarget)
    }, 0);
    $alias(self, "current_target", "element");
    
    $def(self, '$target', function $$target() {
      var self = this;

      return $(self["native"].target)
    }, 0);
    
    $def(self, '$prevented?', function $Event_prevented$ques$2() {
      var self = this;

      return self["native"].isDefaultPrevented()
    }, 0);
    
    $def(self, '$prevent', function $$prevent() {
      var self = this;

      return self["native"].preventDefault()
    }, 0);
    
    $def(self, '$stopped?', function $Event_stopped$ques$3() {
      var self = this;

      return self["native"].isPropagationStopped()
    }, 0);
    
    $def(self, '$stop', function $$stop() {
      var self = this;

      return self["native"].stopPropagation()
    }, 0);
    
    $def(self, '$stop_immediate', function $$stop_immediate() {
      var self = this;

      return self["native"].stopImmediatePropagation()
    }, 0);
    
    $def(self, '$kill', function $$kill() {
      var self = this;

      
      self.$stop();
      return self.$prevent();
    }, 0);
    
    $def(self, '$page_x', function $$page_x() {
      var self = this;

      return self["native"].pageX
    }, 0);
    
    $def(self, '$page_y', function $$page_y() {
      var self = this;

      return self["native"].pageY
    }, 0);
    
    $def(self, '$touch_x', function $$touch_x() {
      var self = this;

      return self["native"].originalEvent.touches[0].pageX
    }, 0);
    
    $def(self, '$touch_y', function $$touch_y() {
      var self = this;

      return self["native"].originalEvent.touches[0].pageY
    }, 0);
    
    $def(self, '$ctrl_key', function $$ctrl_key() {
      var self = this;

      return self["native"].ctrlKey
    }, 0);
    
    $def(self, '$meta_key', function $$meta_key() {
      var self = this;

      return self["native"].metaKey
    }, 0);
    
    $def(self, '$alt_key', function $$alt_key() {
      var self = this;

      return self["native"].altKey
    }, 0);
    
    $def(self, '$shift_key', function $$shift_key() {
      var self = this;

      return self["native"].shiftKey
    }, 0);
    
    $def(self, '$key_code', function $$key_code() {
      var self = this;

      return self["native"].keyCode
    }, 0);
    
    $def(self, '$which', function $$which() {
      var self = this;

      return self["native"].which
    }, 0);
    $alias(self, "default_prevented?", "prevented?");
    $alias(self, "prevent_default", "prevent");
    $alias(self, "propagation_stopped?", "stopped?");
    $alias(self, "stop_propagation", "stop");
    return $alias(self, "stop_immediate_propagation", "stop_immediate");
  })($nesting[0], null, $nesting);
};

Opal.modules["json"] = function(Opal) {/* Generated by Opal 1.5.0 */
  var $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $Object = Opal.Object, $hash2 = Opal.hash2, $eqeqeq = Opal.eqeqeq, $defs = Opal.defs, $truthy = Opal.truthy, $def = Opal.def, $return_val = Opal.return_val;

  Opal.add_stubs('raise,new,push,[]=,[],create_id,json_create,const_get,attr_accessor,create_id=,===,parse,generate,from_object,merge,to_json,responds_to?,to_io,write,to_s,to_a,strftime');
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'JSON');

    var $a, $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $klass($nesting[0], $$('StandardError'), 'JSONError');
    $klass($nesting[0], $$('JSONError'), 'ParserError');
    
    var $hasOwn = Opal.hasOwnProperty;

    function $parse(source) {
      try {
        return JSON.parse(source);
      } catch (e) {
        self.$raise($$$($$('JSON'), 'ParserError'), e.message);
      }
    };

    function to_opal(value, options) {
      var klass, arr, hash, i, ii, k;

      switch (typeof value) {
        case 'string':
          return value;

        case 'number':
          return value;

        case 'boolean':
          return !!value;

        case 'undefined':
          return nil;

        case 'object':
          if (!value) return nil;

          if (value.$$is_array) {
            arr = (options.array_class).$new();

            for (i = 0, ii = value.length; i < ii; i++) {
              (arr).$push(to_opal(value[i], options));
            }

            return arr;
          }
          else {
            hash = (options.object_class).$new();

            for (k in value) {
              if ($hasOwn.call(value, k)) {
                ($a = [k, to_opal(value[k], options)], $send((hash), '[]=', $a), $a[$a.length - 1]);
              }
            }

            if (!options.parse && (klass = (hash)['$[]']($$('JSON').$create_id())) != nil) {
              return $Object.$const_get(klass).$json_create(hash);
            }
            else {
              return hash;
            }
          }
        }
    };
  ;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("create_id")
    })(Opal.get_singleton_class(self), $nesting);
    self['$create_id=']("json_class");
    $defs(self, '$[]', function $JSON_$$$1(value, options) {
      var self = this;

      
      
      if (options == null) options = $hash2([], {});;
      if ($eqeqeq($$('String'), value)) {
        return self.$parse(value, options)
      } else {
        return self.$generate(value, options)
      };
    }, -2);
    $defs(self, '$parse', function $$parse(source, options) {
      var self = this;

      
      
      if (options == null) options = $hash2([], {});;
      return self.$from_object($parse(source), options.$merge($hash2(["parse"], {"parse": true})));
    }, -2);
    $defs(self, '$parse!', function $JSON_parse$excl$2(source, options) {
      var self = this;

      
      
      if (options == null) options = $hash2([], {});;
      return self.$parse(source, options);
    }, -2);
    $defs(self, '$load', function $$load(source, options) {
      var self = this;

      
      
      if (options == null) options = $hash2([], {});;
      return self.$from_object($parse(source), options);
    }, -2);
    $defs(self, '$from_object', function $$from_object(js_object, options) {
      var $ret_or_1 = nil;

      
      
      if (options == null) options = $hash2([], {});;
      if ($truthy(($ret_or_1 = options['$[]']("object_class")))) {
        $ret_or_1
      } else {
        options['$[]=']("object_class", $$('Hash'))
      };
      if ($truthy(($ret_or_1 = options['$[]']("array_class")))) {
        $ret_or_1
      } else {
        options['$[]=']("array_class", $$('Array'))
      };
      return to_opal(js_object, options.$$smap);;
    }, -2);
    $defs(self, '$generate', function $$generate(obj, options) {
      
      
      
      if (options == null) options = $hash2([], {});;
      return obj.$to_json(options);
    }, -2);
    return $defs(self, '$dump', function $$dump(obj, io, limit) {
      var self = this, string = nil;

      
      
      if (io == null) io = nil;;
      
      if (limit == null) limit = nil;;
      string = self.$generate(obj);
      if ($truthy(io)) {
        
        if ($truthy(io['$responds_to?']("to_io"))) {
          io = io.$to_io()
        };
        io.$write(string);
        return io;
      } else {
        return string
      };
    }, -2);
  })($nesting[0], $nesting);
  (function($base, $super) {
    var self = $klass($base, $super, 'Object');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      return self.$to_s().$to_json()
    }, 0)
  })($nesting[0], null);
  (function($base) {
    var self = $module($base, 'Enumerable');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      return self.$to_a().$to_json()
    }, 0)
  })($nesting[0]);
  (function($base, $super) {
    var self = $klass($base, $super, 'Array');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        result.push((self[i]).$to_json());
      }

      return '[' + result.join(',') + ']';
    
    }, 0)
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'Boolean');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      return (self == true) ? 'true' : 'false';
    }, 0)
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'Hash');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push((key).$to_s().$to_json() + ':' + (value).$to_json());
      }

      return '{' + result.join(',') + '}';
    
    }, 0)
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'NilClass');

    
    return $def(self, '$to_json', $return_val("null"), 0)
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'Numeric');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      return self.toString();
    }, 0)
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'String');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      return JSON.stringify(self);
    }, 0)
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'Time');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      return self.$strftime("%FT%T%z").$to_json()
    }, 0)
  })($nesting[0], null);
  return (function($base, $super) {
    var self = $klass($base, $super, 'Date');

    
    
    
    $def(self, '$to_json', function $$to_json() {
      var self = this;

      return self.$to_s().$to_json()
    }, 0);
    return $def(self, '$as_json', function $$as_json() {
      var self = this;

      return self.$to_s()
    }, 0);
  })($nesting[0], null);
};

Opal.modules["promise"] = function(Opal) {/* Generated by Opal 1.5.0 */
  var $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $klass = Opal.klass, $defs = Opal.defs, $hash2 = Opal.hash2, $def = Opal.def, $eqeqeq = Opal.eqeqeq, $truthy = Opal.truthy, $return_ivar = Opal.return_ivar, $not = Opal.not, $send = Opal.send, $to_a = Opal.to_a, $rb_plus = Opal.rb_plus, $alias = Opal.alias, $send2 = Opal.send2, $find_super = Opal.find_super, $rb_le = Opal.rb_le, $rb_minus = Opal.rb_minus, $const_set = Opal.const_set;

  Opal.add_stubs('resolve,new,reject,attr_reader,===,value,key?,keys,!=,==,<<,>>,exception?,[],resolved?,rejected?,!,error,include?,action,realized?,raise,^,call,resolve!,exception!,any?,each,reject!,there_can_be_only_one!,then,to_proc,fail,always,trace,class,object_id,+,inspect,rescue,fail!,then!,always!,to_v2,itself,nil?,prev,act?,push,concat,it,proc,reverse,pop,<=,length,shift,-,wait,map,reduce,try,tap,all?,find,collect,inject');
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Promise');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.value = $proto.action = $proto.realized = $proto.next = $proto.delayed = $proto.error = $proto.prev = nil;
    
    $defs(self, '$value', function $$value(value) {
      var self = this;

      return self.$new().$resolve(value)
    }, 1);
    $defs(self, '$error', function $$error(value) {
      var self = this;

      return self.$new().$reject(value)
    }, 1);
    $defs(self, '$when', function $$when($a) {
      var $post_args, promises;

      
      
      $post_args = Opal.slice.call(arguments);
      
      promises = $post_args;;
      return $$('When').$new(promises);
    }, -1);
    self.$attr_reader("error", "prev", "next");
    
    $def(self, '$initialize', function $$initialize(action) {
      var self = this;

      
      
      if (action == null) action = $hash2([], {});;
      self.action = action;
      self.realized = false;
      self.exception = false;
      self.value = nil;
      self.error = nil;
      self.delayed = false;
      self.prev = nil;
      return (self.next = []);
    }, -1);
    
    $def(self, '$value', function $$value() {
      var self = this;

      if ($eqeqeq($$('Promise'), self.value)) {
        return self.value.$value()
      } else {
        return self.value
      }
    }, 0);
    
    $def(self, '$act?', function $Promise_act$ques$1() {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = self.action['$key?']("success")))) {
        return $ret_or_1
      } else {
        return self.action['$key?']("always")
      }
    }, 0);
    
    $def(self, '$action', function $$action() {
      var self = this;

      return self.action.$keys()
    }, 0);
    
    $def(self, '$exception?', $return_ivar("exception"), 0);
    
    $def(self, '$realized?', function $Promise_realized$ques$2() {
      var self = this;

      return self.realized['$!='](false)
    }, 0);
    
    $def(self, '$resolved?', function $Promise_resolved$ques$3() {
      var self = this;

      return self.realized['$==']("resolve")
    }, 0);
    
    $def(self, '$rejected?', function $Promise_rejected$ques$4() {
      var self = this;

      return self.realized['$==']("reject")
    }, 0);
    
    $def(self, '$^', function $Promise_$$5(promise) {
      var self = this;

      
      promise['$<<'](self);
      self['$>>'](promise);
      return promise;
    }, 1);
    
    $def(self, '$<<', function $Promise_$lt$lt$6(promise) {
      var self = this;

      
      self.prev = promise;
      return self;
    }, 1);
    
    $def(self, '$>>', function $Promise_$gt$gt$7(promise) {
      var self = this;

      
      self.next['$<<'](promise);
      if ($truthy(self['$exception?']())) {
        promise.$reject(self.delayed['$[]'](0))
      } else if ($truthy(self['$resolved?']())) {
        promise.$resolve(($truthy(self.delayed) ? (self.delayed['$[]'](0)) : (self.$value())))
      } else if ($truthy(self['$rejected?']())) {
        if (($not(self.action['$key?']("failure")) || ($eqeqeq($$('Promise'), ($truthy(self.delayed) ? (self.delayed['$[]'](0)) : (self.error)))))) {
          promise.$reject(($truthy(self.delayed) ? (self.delayed['$[]'](0)) : (self.$error())))
        } else if ($truthy(promise.$action()['$include?']("always"))) {
          promise.$reject(($truthy(self.delayed) ? (self.delayed['$[]'](0)) : (self.$error())))
        }
      };
      return self;
    }, 1);
    
    $def(self, '$resolve', function $$resolve(value) {
      var self = this, block = nil, $ret_or_1 = nil, e = nil;

      
      
      if (value == null) value = nil;;
      if ($truthy(self['$realized?']())) {
        self.$raise($$('ArgumentError'), "the promise has already been realized")
      };
      if ($eqeqeq($$('Promise'), value)) {
        return value['$<<'](self.prev)['$^'](self)
      };
      
      try {
        
        block = ($truthy(($ret_or_1 = self.action['$[]']("success"))) ? ($ret_or_1) : (self.action['$[]']("always")));
        if ($truthy(block)) {
          value = block.$call(value)
        };
        self['$resolve!'](value);
      } catch ($err) {
        if (Opal.rescue($err, [$$('Exception')])) {(e = $err)
          try {
            self['$exception!'](e)
          } finally { Opal.pop_exception(); }
        } else { throw $err; }
      };;
      return self;
    }, -1);
    
    $def(self, '$resolve!', function $Promise_resolve$excl$8(value) {
      var self = this;

      
      self.realized = "resolve";
      self.value = value;
      if ($truthy(self.next['$any?']())) {
        return $send(self.next, 'each', [], function $$9(p){
          
          
          if (p == null) p = nil;;
          return p.$resolve(value);}, 1)
      } else {
        return (self.delayed = [value])
      };
    }, 1);
    
    $def(self, '$reject', function $$reject(value) {
      var self = this, block = nil, $ret_or_1 = nil, e = nil;

      
      
      if (value == null) value = nil;;
      if ($truthy(self['$realized?']())) {
        self.$raise($$('ArgumentError'), "the promise has already been realized")
      };
      if ($eqeqeq($$('Promise'), value)) {
        return value['$<<'](self.prev)['$^'](self)
      };
      
      try {
        
        block = ($truthy(($ret_or_1 = self.action['$[]']("failure"))) ? ($ret_or_1) : (self.action['$[]']("always")));
        if ($truthy(block)) {
          value = block.$call(value)
        };
        if ($truthy(self.action['$key?']("always"))) {
          self['$resolve!'](value)
        } else {
          self['$reject!'](value)
        };
      } catch ($err) {
        if (Opal.rescue($err, [$$('Exception')])) {(e = $err)
          try {
            self['$exception!'](e)
          } finally { Opal.pop_exception(); }
        } else { throw $err; }
      };;
      return self;
    }, -1);
    
    $def(self, '$reject!', function $Promise_reject$excl$10(value) {
      var self = this;

      
      self.realized = "reject";
      self.error = value;
      if ($truthy(self.next['$any?']())) {
        return $send(self.next, 'each', [], function $$11(p){
          
          
          if (p == null) p = nil;;
          return p.$reject(value);}, 1)
      } else {
        return (self.delayed = [value])
      };
    }, 1);
    
    $def(self, '$exception!', function $Promise_exception$excl$12(error) {
      var self = this;

      
      self.exception = true;
      return self['$reject!'](error);
    }, 1);
    
    $def(self, '$then', function $$then() {
      var block = $$then.$$p || nil, self = this;

      delete $$then.$$p;
      
      ;
      return self['$^']($$('Promise').$new($hash2(["success"], {"success": block})));
    }, 0);
    
    $def(self, '$then!', function $Promise_then$excl$13() {
      var block = $Promise_then$excl$13.$$p || nil, self = this;

      delete $Promise_then$excl$13.$$p;
      
      ;
      self['$there_can_be_only_one!']();
      return $send(self, 'then', [], block.$to_proc());
    }, 0);
    
    $def(self, '$fail', function $$fail() {
      var block = $$fail.$$p || nil, self = this;

      delete $$fail.$$p;
      
      ;
      return self['$^']($$('Promise').$new($hash2(["failure"], {"failure": block})));
    }, 0);
    
    $def(self, '$fail!', function $Promise_fail$excl$14() {
      var block = $Promise_fail$excl$14.$$p || nil, self = this;

      delete $Promise_fail$excl$14.$$p;
      
      ;
      self['$there_can_be_only_one!']();
      return $send(self, 'fail', [], block.$to_proc());
    }, 0);
    
    $def(self, '$always', function $$always() {
      var block = $$always.$$p || nil, self = this;

      delete $$always.$$p;
      
      ;
      return self['$^']($$('Promise').$new($hash2(["always"], {"always": block})));
    }, 0);
    
    $def(self, '$always!', function $Promise_always$excl$15() {
      var block = $Promise_always$excl$15.$$p || nil, self = this;

      delete $Promise_always$excl$15.$$p;
      
      ;
      self['$there_can_be_only_one!']();
      return $send(self, 'always', [], block.$to_proc());
    }, 0);
    
    $def(self, '$trace', function $$trace(depth) {
      var block = $$trace.$$p || nil, self = this;

      delete $$trace.$$p;
      
      ;
      
      if (depth == null) depth = nil;;
      return self['$^']($$('Trace').$new(depth, block));
    }, -1);
    
    $def(self, '$trace!', function $Promise_trace$excl$16($a) {
      var block = $Promise_trace$excl$16.$$p || nil, $post_args, args, self = this;

      delete $Promise_trace$excl$16.$$p;
      
      ;
      
      $post_args = Opal.slice.call(arguments);
      
      args = $post_args;;
      self['$there_can_be_only_one!']();
      return $send(self, 'trace', $to_a(args), block.$to_proc());
    }, -1);
    
    $def(self, '$there_can_be_only_one!', function $Promise_there_can_be_only_one$excl$17() {
      var self = this;

      if ($truthy(self.next['$any?']())) {
        return self.$raise($$('ArgumentError'), "a promise has already been chained")
      } else {
        return nil
      }
    }, 0);
    
    $def(self, '$inspect', function $$inspect() {
      var self = this, result = nil, $ret_or_1 = nil;

      
      result = "#<" + (self.$class()) + "(" + (self.$object_id()) + ")";
      if ($truthy(self.next['$any?']())) {
        result = $rb_plus(result, " >> " + (self.next.$inspect()))
      };
      result = $rb_plus(result, ($truthy(self['$realized?']()) ? (": " + (($truthy(($ret_or_1 = self.value)) ? ($ret_or_1) : (self.error)).$inspect()) + ">") : (">")));
      return result;
    }, 0);
    
    $def(self, '$to_v2', function $$to_v2() {
      var self = this, v2 = nil;

      
      v2 = $$('PromiseV2').$new();
      $send($send(self, 'then', [], function $$18(i){
        
        
        if (i == null) i = nil;;
        return v2.$resolve(i);}, 1), 'rescue', [], function $$19(i){
        
        
        if (i == null) i = nil;;
        return v2.$reject(i);}, 1);
      return v2;
    }, 0);
    $alias(self, "catch", "fail");
    $alias(self, "catch!", "fail!");
    $alias(self, "do", "then");
    $alias(self, "do!", "then!");
    $alias(self, "ensure", "always");
    $alias(self, "ensure!", "always!");
    $alias(self, "finally", "always");
    $alias(self, "finally!", "always!");
    $alias(self, "rescue", "fail");
    $alias(self, "rescue!", "fail!");
    $alias(self, "to_n", "to_v2");
    $alias(self, "to_v1", "itself");
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Trace');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      $defs(self, '$it', function $$it(promise) {
        var self = this, current = nil, prev = nil;

        
        current = [];
        if (($truthy(promise['$act?']()) || ($truthy(promise.$prev()['$nil?']())))) {
          current.$push(promise.$value())
        };
        prev = promise.$prev();
        if ($truthy(prev)) {
          return current.$concat(self.$it(prev))
        } else {
          return current
        };
      }, 1);
      return $def(self, '$initialize', function $$initialize(depth, block) {
        var $yield = $$initialize.$$p || nil, self = this;

        delete $$initialize.$$p;
        
        self.depth = depth;
        return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [$hash2(["success"], {"success": $send(self, 'proc', [], function $$20(){var self = $$20.$$s == null ? this : $$20.$$s, trace = nil;

          
          trace = $$('Trace').$it(self).$reverse();
          trace.$pop();
          if (($truthy(depth) && ($truthy($rb_le(depth, trace.$length()))))) {
            trace.$shift($rb_minus(trace.$length(), depth))
          };
          return $send(block, 'call', $to_a(trace));}, {$$arity: 0, $$s: self})})], null);
      }, 2);
    })($nesting[0], self, $nesting);
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'When');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.wait = nil;
      
      
      $def(self, '$initialize', function $$initialize(promises) {
        var $yield = $$initialize.$$p || nil, self = this;

        delete $$initialize.$$p;
        
        
        if (promises == null) promises = [];;
        $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [], null);
        self.wait = [];
        return $send(promises, 'each', [], function $$21(promise){var self = $$21.$$s == null ? this : $$21.$$s;

          
          
          if (promise == null) promise = nil;;
          return self.$wait(promise);}, {$$arity: 1, $$s: self});
      }, -1);
      
      $def(self, '$each', function $$each() {
        var block = $$each.$$p || nil, self = this;

        delete $$each.$$p;
        
        ;
        if (!$truthy(block)) {
          self.$raise($$('ArgumentError'), "no block given")
        };
        return $send(self, 'then', [], function $$22(values){
          
          
          if (values == null) values = nil;;
          return $send(values, 'each', [], block.$to_proc());}, 1);
      }, 0);
      
      $def(self, '$collect', function $$collect() {
        var block = $$collect.$$p || nil, self = this;

        delete $$collect.$$p;
        
        ;
        if (!$truthy(block)) {
          self.$raise($$('ArgumentError'), "no block given")
        };
        return $send(self, 'then', [], function $$23(values){
          
          
          if (values == null) values = nil;;
          return $$('When').$new($send(values, 'map', [], block.$to_proc()));}, 1);
      }, 0);
      
      $def(self, '$inject', function $$inject($a) {
        var block = $$inject.$$p || nil, $post_args, args, self = this;

        delete $$inject.$$p;
        
        ;
        
        $post_args = Opal.slice.call(arguments);
        
        args = $post_args;;
        return $send(self, 'then', [], function $$24(values){
          
          
          if (values == null) values = nil;;
          return $send(values, 'reduce', $to_a(args), block.$to_proc());}, 1);
      }, -1);
      
      $def(self, '$wait', function $$wait(promise) {
        var self = this;

        
        if (!$eqeqeq($$('Promise'), promise)) {
          promise = $$('Promise').$value(promise)
        };
        if ($truthy(promise['$act?']())) {
          promise = promise.$then()
        };
        self.wait['$<<'](promise);
        $send(promise, 'always', [], function $$25(){var self = $$25.$$s == null ? this : $$25.$$s;
          if (self.next == null) self.next = nil;

          if ($truthy(self.next['$any?']())) {
            return self.$try()
          } else {
            return nil
          }}, {$$arity: 0, $$s: self});
        return self;
      }, 1);
      
      $def(self, '$>>', function $When_$gt$gt$26($a) {
        var $post_args, $rest_arg, $yield = $When_$gt$gt$26.$$p || nil, self = this;

        delete $When_$gt$gt$26.$$p;
        
        
        $post_args = Opal.slice.call(arguments);
        
        $rest_arg = $post_args;;
        return $send($send2(self, $find_super(self, '>>', $When_$gt$gt$26, false, true), '>>', $to_a($rest_arg), $yield), 'tap', [], function $$27(){var self = $$27.$$s == null ? this : $$27.$$s;

          return self.$try()}, {$$arity: 0, $$s: self});
      }, -1);
      
      $def(self, '$try', function $When_try$28() {
        var self = this, promise = nil;

        if ($truthy($send(self.wait, 'all?', [], "realized?".$to_proc()))) {
          
          promise = $send(self.wait, 'find', [], "rejected?".$to_proc());
          if ($truthy(promise)) {
            return self.$reject(promise.$error())
          } else {
            return self.$resolve($send(self.wait, 'map', [], "value".$to_proc()))
          };
        } else {
          return nil
        }
      }, 0);
      $alias(self, "map", "collect");
      $alias(self, "reduce", "inject");
      return $alias(self, "and", "wait");
    })($nesting[0], self, $nesting);
  })($nesting[0], null, $nesting);
  return $const_set($nesting[0], 'PromiseV1', $$('Promise'));
};

Opal.modules["opal/jquery/http"] = function(Opal) {/* Generated by Opal 1.5.0 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $klass = Opal.klass, $const_set = Opal.const_set, $send = Opal.send, $hash2 = Opal.hash2, $defs = Opal.defs, $def = Opal.def, $truthy = Opal.truthy, $return_ivar = Opal.return_ivar;

  Opal.add_stubs('require,to_n,each,define_singleton_method,send,new,define_method,attr_reader,delete,update,upcase,succeed,fail,promise,parse,private,tap,proc,ok?,resolve,reject,from_object,call');
  
  self.$require("json");
  self.$require("native");
  self.$require("promise");
  self.$require("opal/jquery/constants");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'HTTP');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.settings = $proto.payload = $proto.url = $proto.method = $proto.handler = $proto.json = $proto.body = $proto.xhr = $proto.promise = $proto.status_code = nil;
    
    var $ = $$('JQUERY_SELECTOR').$to_n();
    $const_set($nesting[0], 'ACTIONS', ["get", "post", "put", "delete", "patch", "head"]);
    $send($$('ACTIONS'), 'each', [], function $HTTP$1(action){var self = $HTTP$1.$$s == null ? this : $HTTP$1.$$s;

      
      
      if (action == null) action = nil;;
      $send(self, 'define_singleton_method', [action], function $$2(url, options){var block = $$2.$$p || nil, self = $$2.$$s == null ? this : $$2.$$s;

        delete $$2.$$p;
        
        ;
        
        if (url == null) url = nil;;
        
        if (options == null) options = $hash2([], {});;
        return self.$new().$send(action, url, options, block);}, {$$arity: -2, $$s: self});
      return $send(self, 'define_method', [action], function $$4(url, options){var block = $$4.$$p || nil, self = $$4.$$s == null ? this : $$4.$$s;

        delete $$4.$$p;
        
        ;
        
        if (url == null) url = nil;;
        
        if (options == null) options = $hash2([], {});;
        return self.$send(action, url, options, block);}, {$$arity: -2, $$s: self});}, {$$arity: 1, $$s: self});
    $defs(self, '$setup', function $$setup() {
      
      return $$('Hash').$new($.ajaxSetup())
    }, 0);
    $defs(self, '$setup=', function $HTTP_setup$eq$5(settings) {
      
      return $.ajaxSetup(settings.$to_n())
    }, 1);
    self.$attr_reader("body", "error_message", "method", "status_code", "url", "xhr");
    
    $def(self, '$initialize', function $$initialize() {
      var self = this;

      
      self.settings = $hash2([], {});
      return (self.ok = true);
    }, 0);
    
    $def(self, '$send', function $$send(method, url, options, block) {
      var $a, self = this, settings = nil, payload = nil;

      
      self.method = method;
      self.url = url;
      self.payload = options.$delete("payload");
      self.handler = block;
      self.settings.$update(options);
      $a = [self.settings.$to_n(), self.payload], (settings = $a[0]), (payload = $a[1]), $a;
      
      if (typeof(payload) === 'string') {
        settings.data = payload;
      }
      else if (payload != nil) {
        settings.data = payload.$to_json();
        settings.contentType = 'application/json';
      }

      settings.url  = self.url;
      settings.type = self.method.$upcase();

      settings.success = function(data, status, xhr) {
        return self.$succeed(data, status, xhr);
      };

      settings.error = function(xhr, status, error) {
        return self.$fail(xhr, status, error);
      };

      $.ajax(settings);
    ;
      if ($truthy(self.handler)) {
        return self
      } else {
        return self.$promise()
      };
    }, 4);
    
    $def(self, '$json', function $$json() {
      var self = this, $ret_or_1 = nil;

      return (self.json = ($truthy(($ret_or_1 = self.json)) ? ($ret_or_1) : ($$('JSON').$parse(self.body))))
    }, 0);
    
    $def(self, '$ok?', $return_ivar("ok"), 0);
    
    $def(self, '$get_header', function $$get_header(key) {
      var self = this;

      
      var value = self.xhr.getResponseHeader(key);
      return (value === null) ? nil : value;
    
    }, 1);
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      return "#<HTTP @url=" + (self.url) + " @method=" + (self.method) + ">"
    }, 0);
    self.$private();
    
    $def(self, '$promise', function $$promise() {
      var self = this;

      
      if ($truthy(self.promise)) {
        return self.promise
      };
      return (self.promise = $send($$('Promise').$new(), 'tap', [], function $$6(promise){var self = $$6.$$s == null ? this : $$6.$$s;

        
        
        if (promise == null) promise = nil;;
        return (self.handler = $send(self, 'proc', [], function $$7(res){
          
          
          if (res == null) res = nil;;
          if ($truthy(res['$ok?']())) {
            return promise.$resolve(res)
          } else {
            return promise.$reject(res)
          };}, 1));}, {$$arity: 1, $$s: self}));
    }, 0);
    
    $def(self, '$succeed', function $$succeed(data, status, xhr) {
      var self = this;

      
      
      self.body = data;
      self.xhr  = xhr;
      self.status_code = xhr.status;

      if (typeof(data) === 'object') {
        self.json = $$('JSON').$from_object(data);
      }
    ;
      if ($truthy(self.handler)) {
        return self.handler.$call(self)
      } else {
        return nil
      };
    }, 3);
    return $def(self, '$fail', function $$fail(xhr, status, error) {
      var self = this;

      
      
      self.body = xhr.responseText;
      self.xhr = xhr;
      self.status_code = xhr.status;
    ;
      self.ok = false;
      if ($truthy(self.handler)) {
        return self.handler.$call(self)
      } else {
        return nil
      };
    }, 3);
  })($nesting[0], null, $nesting);
};

Opal.modules["opal/jquery/kernel"] = function(Opal) {/* Generated by Opal 1.5.0 */
  var $nesting = [], nil = Opal.nil, $module = Opal.module, $def = Opal.def;

  return (function($base) {
    var self = $module($base, 'Kernel');

    
    return $def(self, '$alert', function $$alert(msg) {
      
      
      alert(msg);
      return nil;
    }, 1)
  })($nesting[0])
};

Opal.modules["opal/jquery"] = function(Opal) {/* Generated by Opal 1.5.0 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('require');
  
  self.$require("opal/jquery/window");
  self.$require("opal/jquery/document");
  self.$require("opal/jquery/element");
  self.$require("opal/jquery/event");
  self.$require("opal/jquery/http");
  return self.$require("opal/jquery/kernel");
};

Opal.queue(function(Opal) {/* Generated by Opal 1.5.0 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('require');
  return self.$require("opal/jquery")
});
