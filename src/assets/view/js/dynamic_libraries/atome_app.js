Opal.modules["eVe/eVe/lib/eVe/graphics/matrix"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], nil = Opal.nil, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $rb_times = Opal.rb_times, $rb_lt = Opal.rb_lt, $rb_plus = Opal.rb_plus, $send = Opal.send, $def = Opal.def, $rb_minus = Opal.rb_minus, $eqeq = Opal.eqeq, $rb_divide = Opal.rb_divide, $return_ivar = Opal.return_ivar;

  Opal.add_stubs('merge,[],[]=,box,grab,*,<,+,each_with_index,child,image,resize_matrix,to_s,width=,-,height=,==,modulo,x,%,y,instance_of?,/,convert,each,x=,y=,delete,alert,id');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Matrix');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.id = $proto.nb_of_rows = $proto.number_of_cells = $proto.matrix = $proto.matrix_name = $proto.cell_height = $proto.cell_width = $proto.margin = nil;
    
    
    $def(self, '$initialize', function $$initialize(params) {
      var $a, self = this, default$ = nil, nb_of_rows = nil, matrix_size = nil, background = nil, matrix_parent = nil, style = nil, background_color = nil, cell_number = nil;

      
      default$ = $hash2(["nb", "size", "style", "background", "margin", "name", "parent"], {"nb": 4, "size": 666, "style": $hash2(["color"], {"color": "gray"}), "background": nil, "margin": 99, "name": nil, "parent": "view"});
      params = default$.$merge(params);
      nb_of_rows = params['$[]']("nb");
      matrix_size = params['$[]']("size");
      background = params['$[]']("background");
      matrix_parent = params['$[]']("parent");
      self.margin = params['$[]']("margin");
      style = params['$[]']("style");
      if (!$truthy(params['$[]']("name"))) {
        params['$[]=']("name", "matrix")
      };
      if (!$truthy(params['$[]']("id"))) {
        params['$[]=']("id", "matrix")
      };
      background_color = params['$[]']("background_color");
      self.id = params['$[]']("atome_id");
      self.matrix = self.$grab(matrix_parent).$box($hash2(["cursor", "overflow", "color", "atome_id", "name"], {"cursor": "default", "overflow": "auto", "color": background_color, "atome_id": self.id, "name": params['$[]']("name")}));
      self.matrix_name = params['$[]']("name");
      self.nb_of_rows = nb_of_rows;
      self.number_of_cells = $rb_times(self.nb_of_rows, self.nb_of_rows);
      self.cell_width = params['$[]']("cell_width");
      self.cell_height = params['$[]']("cell_height");
      self.background = background;
      cell_number = 0;
      while ($truthy($rb_lt(cell_number, self.number_of_cells))) {
        
        self.matrix.$box($hash2(["cursor", "color", "atome_id", "overflow"], {"cursor": "pointer", "color": "red", "atome_id": $rb_plus(self.matrix_name, "_" + (cell_number)), "overflow": "hidden"}).$merge(style));
        cell_number = $rb_plus(cell_number, 1);
      };
      if ($truthy(background)) {
        $send(self.matrix.$child(), 'each_with_index', [], function $$1(child, index){
          
          
          if (child == null) child = nil;;
          
          if (index == null) index = nil;;
          return child.$image($hash2(["content"], {"content": $rb_plus(background, "_" + (index))}));}, 2)
      };
      return self.$resize_matrix(matrix_size);
    }, 1);
    
    $def(self, '$get_cell', function $$get_cell(atome_id) {
      var self = this;

      return self.$grab($rb_plus($rb_plus(self.matrix_name, "_"), atome_id.$to_s()))
    }, 1);
    
    $def(self, '$resize_matrix', function $$resize_matrix(matrix_size, only_content) {
      var self = this, row = nil, cell_size = nil;

      
      
      if (only_content == null) only_content = false;;
      if (($truthy(self.cell_width) || ($truthy(self.cell_height)))) {
        
        self.matrix['$width=']($rb_minus($rb_times($rb_plus(self.cell_width, self.margin), self.nb_of_rows), self.margin));
        self.matrix['$height=']($rb_minus($rb_times($rb_plus(self.cell_height, self.margin), self.nb_of_rows), self.margin));
        row = -1;
        return $send(self.matrix.$child(), 'each_with_index', [], function $$2(cell, index){var self = $$2.$$s == null ? this : $$2.$$s;
          if (self.nb_of_rows == null) self.nb_of_rows = nil;
          if (self.cell_width == null) self.cell_width = nil;
          if (self.cell_height == null) self.cell_height = nil;
          if (self.margin == null) self.margin = nil;

          
          
          if (cell == null) cell = nil;;
          
          if (index == null) index = nil;;
          if ($eqeq(index.$modulo(self.nb_of_rows), 0)) {
            row = $rb_plus(row, 1)
          };
          cell['$width='](self.cell_width);
          cell['$height='](self.cell_height);
          cell.$x($rb_times(index['$%'](self.nb_of_rows), $rb_plus(self.cell_width, self.margin)));
          return cell.$y($rb_times(row, $rb_plus(self.cell_height, self.margin)));}, {$$arity: 2, $$s: self});
      } else {
        
        cell_size = ($truthy(matrix_size['$instance_of?']($$('String'))) ? ($rb_minus($rb_divide(self.matrix.$convert("width"), self.nb_of_rows), self.margin)) : ($rb_minus($rb_divide(matrix_size, self.nb_of_rows), self.margin)));
        if (!$truthy(only_content)) {
          
          self.matrix['$width=']($rb_plus(matrix_size, self.margin));
          self.matrix['$height=']($rb_plus(matrix_size, self.margin));
        };
        row = -1;
        return $send(self.matrix.$child(), 'each_with_index', [], function $$3(cell, index){var self = $$3.$$s == null ? this : $$3.$$s;
          if (self.background == null) self.background = nil;
          if (self.nb_of_rows == null) self.nb_of_rows = nil;
          if (self.margin == null) self.margin = nil;

          
          
          if (cell == null) cell = nil;;
          
          if (index == null) index = nil;;
          cell['$height='](cell_size);
          cell['$width='](cell_size);
          if ($truthy(self.background)) {
            $send(cell.$child(), 'each', [], function $$4(background){var $a, $b;

              
              
              if (background == null) background = nil;;
              if ($truthy(background)) {
                
                background['$x='](($a = [0], $send(background, 'y=', $a), $a[$a.length - 1]));
                return ($a = [($b = [cell_size], $send(background, 'height=', $b), $b[$b.length - 1])], $send(background, 'width=', $a), $a[$a.length - 1]);
              } else {
                return nil
              };}, 1)
          };
          if ($eqeq(index.$modulo(self.nb_of_rows), 0)) {
            row = $rb_plus(row, 1)
          };
          cell.$x($rb_plus($rb_times(index['$%'](self.nb_of_rows), $rb_plus(cell_size, self.margin)), self.margin));
          return cell.$y($rb_plus($rb_times(row, $rb_plus(cell_size, self.margin)), self.margin));}, {$$arity: 2, $$s: self});
      };
    }, -2);
    
    $def(self, '$delete', function $Matrix_delete$5() {
      var self = this;

      return self.matrix.$delete(true)
    }, 0);
    
    $def(self, '$cells', function $$cells() {
      var self = this;

      return self.matrix.$child()
    }, 0);
    
    $def(self, '$matrix', $return_ivar("matrix"), 0);
    
    $def(self, '$zoom', function $$zoom(item, percent) {
      var self = this;

      return self.$alert(self.$id())
    }, 2);
    return $def(self, '$id', $return_ivar("id"), 0);
  })($nesting[0], null, $nesting)
};

Opal.modules["eVe/eVe/lib/eVe/system/photons"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $hash2 = Opal.hash2, $rb_minus = Opal.rb_minus, $rb_divide = Opal.rb_divide, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $def = Opal.def, $neqeq = Opal.neqeq, $not = Opal.not, $rb_plus = Opal.rb_plus, $rb_times = Opal.rb_times, $eqeq = Opal.eqeq, base_size = nil, default_themes = nil;

  Opal.add_stubs('-,/,new,instance_of?,read,each,q_read,send,grab,to_proc,<<,atomise,merge,content,content=,[],!=,authorization,authorization_pre_processor,!,nil?,format_parameters_to_hash,activate,is_a?,instance_exec,set,+,atome_id,theme,status=,status,inactivate,width=,*,width,text,label,delete,alert,child,==,type,[]=,media_pre_processor,touch,inactivation,activation,open,close,tool_getter_processor,tool_pre_processor,tool,image');
  
  base_size = 39;
  default_themes = $hash2(["dark", "light"], {"dark": $hash2(["expand", "icon", "shade", "tool_size", "size", "icon_size", "blur", "back_color", "icon_active", "icon_inactive", "shadow", "open", "orientation", "render", "margin", "noise", "label_color", "label_size"], {"expand": 3, "icon": "impulse", "shade": $hash2(["x", "y", "blur", "color"], {"x": 0, "y": 0, "blur": 9, "color": "rgba(0,0,0,0.6)"}), "tool_size": 39, "size": base_size, "icon_size": $rb_minus(base_size, $rb_divide(base_size, 3)), "blur": $hash2(["value", "invert"], {"value": 9, "invert": true}), "back_color": $hash2(["red", "green", "blue"], {"red": 0.15099, "green": 0.15099, "blue": 0.15099}), "icon_active": $hash2(["color", "opacity", "shadow"], {"color": $hash2(["red", "green", "blue", "alpha"], {"red": 1, "green": 0.5, "blue": 0, "alpha": 1}), "opacity": 1, "shadow": $hash2(["x", "y", "color", "blur"], {"x": 0, "y": 0, "color": $hash2(["red", "green", "blue", "alpha"], {"red": 1, "green": 0.7, "blue": 0.2, "alpha": 0}), "blur": 3})}), "icon_inactive": $hash2(["color", "opacity", "shadow"], {"color": "orange", "opacity": 0.3, "shadow": false}), "shadow": $hash2(["bounding", "add", "x", "y", "color", "blur"], {"bounding": true, "add": "true", "x": 0, "y": 0, "color": "rgba(0,0,0,0.6)", "blur": 9}), "open": 6, "orientation": "y", "render": false, "margin": 3, "noise": $hash2(["opacity", "intensity", "color"], {"opacity": 0.15, "intensity": 39, "color": "black"}), "label_color": "lightgray", "label_size": $rb_divide(base_size, 3)}), "light": $hash2(["back_color", "expand", "icon", "shade", "tool_size", "size", "icon_size", "blur", "icon_active", "icon_inactive", "shadow", "open", "orientation", "render", "margin", "noise", "label_color", "label_size"], {"back_color": $hash2(["red", "green", "blue"], {"red": 0.69, "green": 0.69, "blue": 0.69}), "expand": 3, "icon": "impulse", "shade": $hash2(["x", "y", "blur", "color"], {"x": 0, "y": 0, "blur": 9, "color": "rgba(0,0,0,0.6)"}), "tool_size": 39, "size": base_size, "icon_size": $rb_minus(base_size, $rb_divide(base_size, 3)), "blur": $hash2(["value", "invert"], {"value": 9, "invert": true}), "icon_active": $hash2(["color", "opacity", "shadow"], {"color": $hash2(["red", "green", "blue", "alpha"], {"red": 1, "green": 0.5, "blue": 0, "alpha": 1}), "opacity": 1, "shadow": $hash2(["x", "y", "color", "blur"], {"x": 0, "y": 0, "color": $hash2(["red", "green", "blue", "alpha"], {"red": 1, "green": 0.7, "blue": 0.2, "alpha": 0}), "blur": 3})}), "icon_inactive": $hash2(["color", "opacity", "shadow"], {"color": "orange", "opacity": 0.3, "shadow": false}), "shadow": $hash2(["bounding", "add", "x", "y", "color", "blur"], {"bounding": true, "add": "true", "x": 0, "y": 0, "color": "rgba(0,0,0,0.6)", "blur": 9}), "open": 6, "orientation": "y", "render": false, "margin": 3, "noise": $hash2(["opacity", "intensity", "color"], {"opacity": 0.15, "intensity": 39, "color": "black"}), "label_color": "lightgray", "label_size": $rb_divide(base_size, 3)})});
  $$('Atome').$new($hash2(["atome_id", "content", "render"], {"atome_id": "themes", "content": default_themes, "render": false}));
  (function($base, $parent_nesting) {
    var self = $module($base, 'Batch');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return $def(self, '$tool', function $$tool(value) {
      var proc = $$tool.$$p || nil, self = this, collected_atomes = nil;

      delete $$tool.$$p;
      
      ;
      collected_atomes = [];
      if ($truthy(self.$read()['$instance_of?']($$('Array')))) {
        $send(self.$q_read(), 'each', [], function $$1(atome){var self = $$1.$$s == null ? this : $$1.$$s;

          
          
          if (atome == null) atome = nil;;
          $send(self.$grab(atome), 'send', ["tool", value], proc.$to_proc());
          return collected_atomes['$<<'](atome);}, {$$arity: 1, $$s: self})
      } else {
        
        $send(self.$grab(self.$q_read()), 'send', ["tool", value], proc.$to_proc());
        collected_atomes['$<<'](self.$q_read());
      };
      return $$('ATOME').$atomise("batch", collected_atomes);
    }, 1)
  })($nesting[0], $nesting);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Eve');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$add_theme', function $$add_theme(new_theme) {
      var $a, self = this, theme_holder = nil;

      
      theme_holder = self.$grab("themes");
      theme_holder.$content().$merge($hash2(["content"], {"content": new_theme}));
      return ($a = [self.$grab("themes").$content().$merge($hash2(["content"], {"content": $hash2(["sucette"], {"sucette": "good"})}))], $send(theme_holder, 'content=', $a), $a[$a.length - 1]);
    }, 1);
    
    $def(self, '$set_theme', function $$set_theme(theme_requested) {
      var self = this;

      return (self.theme = self.$atomise("theme", theme_requested))
    }, 1);
    
    $def(self, '$theme', function $$theme() {
      var self = this, theme_found = nil;
      if (self.theme == null) self.theme = nil;

      
      theme_found = self.$grab("themes").$content();
      if (!$truthy(self.theme)) {
        self.theme = self.$atomise("theme", "light")
      };
      return theme_found['$[]'](self.theme.$q_read());
    }, 0);
    
    $def(self, '$activate', function $$activate(value, password) {
      var proc = $$activate.$$p || nil, $a, self = this, val = nil;
      if (self.activate == null) self.activate = nil;

      delete $$activate.$$p;
      
      ;
      
      if (value == null) value = nil;;
      
      if (password == null) password = nil;;
      if (((($truthy(self.$authorization()) && ($neqeq(password, self.$authorization()['$[]']("password")))) && ($neqeq("activate", "type"))) && ($neqeq("activate", "atome_id")))) {
        return $send(self, 'authorization_pre_processor', ["activate", value, self.$authorization()], proc.$to_proc())
      } else if (($truthy(value['$nil?']()) && ($not(proc)))) {
        return ($a = self.activate, ($a === nil || $a == null) ? nil : self.activate.$q_read())
      } else {
        
        val = $send(self, 'format_parameters_to_hash', [value], proc.$to_proc());
        return (self.activate = self.$atomise("activate", val));
      };
    }, -1);
    
    $def(self, '$activation', function $$activation(tool_created) {
      var $a, self = this, proc = nil;

      
      if ($truthy(tool_created.$activate())) {
        
        proc = tool_created.$activate()['$[]']("proc");
        if ($truthy(proc['$is_a?']($$('Proc')))) {
          $send(self, 'instance_exec', [], proc.$to_proc())
        };
      };
      self.$grab($rb_plus(tool_created.$atome_id(), "_icon")).$set(self.$theme()['$[]']("icon_active"));
      return ($a = [tool_created.$status().$merge($hash2(["active"], {"active": true}))], $send(tool_created, 'status=', $a), $a[$a.length - 1]);
    }, 1);
    
    $def(self, '$inactivate', function $$inactivate(value, password) {
      var proc = $$inactivate.$$p || nil, $a, self = this;
      if (self.inactivate == null) self.inactivate = nil;

      delete $$inactivate.$$p;
      
      ;
      
      if (value == null) value = nil;;
      
      if (password == null) password = nil;;
      if (((($truthy(self.$authorization()) && ($neqeq(password, self.$authorization()['$[]']("password")))) && ($neqeq("inactivate", "type"))) && ($neqeq("inactivate", "atome_id")))) {
        return $send(self, 'authorization_pre_processor', ["inactivate", value, self.$authorization()], proc.$to_proc())
      } else if (($truthy(value['$nil?']()) && ($not(proc)))) {
        return ($a = self.inactivate, ($a === nil || $a == null) ? nil : self.inactivate.$q_read())
      } else {
        
        value = $send(self, 'format_parameters_to_hash', [value], proc.$to_proc());
        return (self.inactivate = self.$atomise("inactivate", value));
      };
    }, -1);
    
    $def(self, '$inactivation', function $$inactivation(tool_created) {
      var $a, self = this, proc = nil;

      
      if ($truthy(tool_created.$inactivate())) {
        
        proc = tool_created.$inactivate()['$[]']("proc");
        if ($truthy(proc['$is_a?']($$('Proc')))) {
          $send(self, 'instance_exec', [], proc.$to_proc())
        };
      };
      self.$grab($rb_plus(tool_created.$atome_id(), "_icon")).$set(self.$theme()['$[]']("icon_inactive"));
      return ($a = [tool_created.$status().$merge($hash2(["active"], {"active": false}))], $send(tool_created, 'status=', $a), $a[$a.length - 1]);
    }, 1);
    
    $def(self, '$expand', function $$expand(tool_created) {
      var self = this;

      
      tool_created['$status='](tool_created.$status().$merge($hash2(["detail"], {"detail": true})));
      tool_created['$width=']($rb_times(tool_created.$width(), self.$theme()['$[]']("expand")));
      return tool_created.$text($hash2(["content", "x", "visual", "color", "center", "atome_id", "system"], {"content": tool_created.$label(), "x": self.$theme()['$[]']("tool_size"), "visual": self.$theme()['$[]']("label_size"), "color": self.$theme()['$[]']("label_color"), "center": "y", "atome_id": "" + (tool_created.$atome_id()) + "_label", "system": true}));
    }, 1);
    
    $def(self, '$compact', function $$compact(tool_created) {
      var self = this;

      
      tool_created['$status='](tool_created.$status().$merge($hash2(["detail"], {"detail": false})));
      tool_created['$width=']($rb_divide(tool_created.$width(), self.$theme()['$[]']("expand")));
      return self.$grab("" + (tool_created.$atome_id()) + "_label").$delete(true);
    }, 1);
    
    $def(self, '$open', function $$open(tool_created) {
      var $a, self = this;

      
      self.$alert(tool_created.$content());
      return ($a = [tool_created.$status().$merge($hash2(["open"], {"open": true}))], $send(tool_created, 'status=', $a), $a[$a.length - 1]);
    }, 1);
    
    $def(self, '$close', function $$close(tool_created) {
      var $a;

      return ($a = [tool_created.$status().$merge($hash2(["open"], {"open": false}))], $send(tool_created, 'status=', $a), $a[$a.length - 1])
    }, 1);
    
    $def(self, '$tool_getter_processor', function $$tool_getter_processor() {
      var self = this, child_collected = nil;

      
      child_collected = [];
      $send(self, 'child', [], function $$2(child_found){
        
        
        if (child_found == null) child_found = nil;;
        if ($eqeq(child_found.$type(), "tool")) {
          return child_collected['$<<'](child_found.$atome_id())
        } else {
          return nil
        };}, 1);
      return self.$atomise("temp", child_collected);
    }, 0);
    
    $def(self, '$tool_pre_processor', function $$tool_pre_processor(value, password) {
      var self = this, name = nil, $ret_or_1 = nil, tool_style = nil, apply_style = nil, tool_created = nil;

      
      
      if (password == null) password = nil;;
      name = value['$[]']("name");
      if ($truthy(($ret_or_1 = value['$[]']("icon")))) {
        $ret_or_1
      } else {
        value['$[]=']("icon", name)
      };
      if ($truthy(($ret_or_1 = value['$[]']("visible")))) {
        $ret_or_1
      } else {
        value['$[]=']("visible", ["preset", "specific", "atomes"])
      };
      if (!$truthy(value['$[]']("atome_id"))) {
        value['$[]=']("atome_id", "" + (name) + "_tool")
      };
      tool_style = self.$theme();
      apply_style = $hash2(["color", "width", "height", "shadow", "blur", "system"], {"color": tool_style['$[]']("back_color"), "width": tool_style['$[]']("size"), "height": tool_style['$[]']("size"), "shadow": tool_style['$[]']("shadow"), "blur": tool_style['$[]']("blur"), "system": true});
      value = $hash2(["overflow", "parent", "label"], {"overflow": "visible", "parent": "intuition", "label": name}).$merge($hash2(["orientation"], {"orientation": "top"})).$merge(apply_style).$merge(value);
      tool_created = self.$media_pre_processor("shape", "tool", value, password);
      $send(tool_created, 'touch', [$hash2(["stop", "option"], {"stop": true, "option": "up"})], function $$3(evt){var self = $$3.$$s == null ? this : $$3.$$s;
        if (self.allow_click == null) self.allow_click = nil;

        
        
        if (evt == null) evt = nil;;
        if (!$eqeq(self.allow_click, "stop")) {
          
          if ($eqeq(tool_created.$status()['$[]']("active"), true)) {
            self.$inactivation(tool_created)
          } else {
            self.$activation(tool_created)
          };
          tool_created;
        };
        return (self.allow_click = true);}, {$$arity: 1, $$s: self});
      return $send(tool_created, 'touch', [$hash2(["stop", "option"], {"stop": true, "option": "long"})], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;

        
        if ($eqeq(tool_created.$status()['$[]']("open"), false)) {
          self.$open(tool_created)
        } else {
          self.$close(tool_created)
        };
        tool_created;
        return (self.allow_click = "stop");}, {$$arity: 0, $$s: self});
    }, -2);
    
    $def(self, '$tool', function $$tool(value, password) {
      var proc = $$tool.$$p || nil, self = this;

      delete $$tool.$$p;
      
      ;
      
      if (value == null) value = nil;;
      
      if (password == null) password = nil;;
      if (((($truthy(self.$authorization()) && ($neqeq(password, self.$authorization()['$[]']("password")))) && ($neqeq("tool", "type"))) && ($neqeq("tool", "atome_id")))) {
        return $send(self, 'authorization_pre_processor', ["tool", value, self.$authorization()], proc.$to_proc())
      } else if (($truthy(value['$nil?']()) && ($not(proc)))) {
        return self.$tool_getter_processor()
      } else {
        
        value = $send(self, 'format_parameters_to_hash', [value], proc.$to_proc());
        return $send(self, 'tool_pre_processor', [value, password], proc.$to_proc());
      };
    }, -1);
    
    $def(self, '$tool=', function $Eve_tool$eq$5(value) {
      var proc = $Eve_tool$eq$5.$$p || nil, self = this;

      delete $Eve_tool$eq$5.$$p;
      
      ;
      return $send(self, 'tool', [value], proc.$to_proc());
    }, 1);
    
    $def(self, '$icon', function $$icon(value, password) {
      var proc = $$icon.$$p || nil, self = this, style = nil;

      delete $$icon.$$p;
      
      ;
      
      if (value == null) value = nil;;
      
      if (password == null) password = nil;;
      style = self.$theme();
      return self.$image($hash2(["content", "xx", "x", "y", "yy", "atome_id", "size", "system"], {"content": value, "xx": 0, "x": $rb_divide(style['$[]']("size"), 6), "y": 0, "yy": $rb_divide(style['$[]']("size"), 6), "atome_id": $rb_plus(self.$atome_id(), "_icon"), "size": style['$[]']("icon_size"), "system": true}).$merge(style['$[]']("icon_inactive")));
    }, -1);
    
    $def(self, '$label', function $$label(value, password) {
      var proc = $$label.$$p || nil, $a, self = this;
      if (self.label == null) self.label = nil;

      delete $$label.$$p;
      
      ;
      
      if (value == null) value = nil;;
      
      if (password == null) password = nil;;
      if (((($truthy(self.$authorization()) && ($neqeq(password, self.$authorization()['$[]']("password")))) && ($neqeq("label", "type"))) && ($neqeq("label", "atome_id")))) {
        return $send(self, 'authorization_pre_processor', ["label", value, self.$authorization()], proc.$to_proc())
      } else if (($truthy(value['$nil?']()) && ($not(proc)))) {
        return ($a = self.label, ($a === nil || $a == null) ? nil : self.label.$q_read())
      } else {
        
        value = $send(self, 'format_parameters_to_hash', [value], proc.$to_proc());
        return (self.label = self.$atomise("label", value));
      };
    }, -1);
    return $def(self, '$visible', function $$visible(value, password) {
      var proc = $$visible.$$p || nil, $a, self = this;
      if (self.visible == null) self.visible = nil;

      delete $$visible.$$p;
      
      ;
      
      if (value == null) value = nil;;
      
      if (password == null) password = nil;;
      if (((($truthy(self.$authorization()) && ($neqeq(password, self.$authorization()['$[]']("password")))) && ($neqeq("visible", "type"))) && ($neqeq("visible", "atome_id")))) {
        return $send(self, 'authorization_pre_processor', ["visible", value, self.$authorization()], proc.$to_proc())
      } else if (($truthy(value['$nil?']()) && ($not(proc)))) {
        return ($a = self.visible, ($a === nil || $a == null) ? nil : self.visible.$q_read())
      } else {
        
        value = $send(self, 'format_parameters_to_hash', [value], proc.$to_proc());
        return (self.visible = self.$atomise("visible", value));
      };
    }, -1);
  })($nesting[0], $nesting);
};

Opal.queue(function(Opal) {/* Generated by Opal 1.5.1 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $gvars = Opal.gvars, $klass = Opal.klass;

  Opal.add_stubs('require,include');
  
  self.$require("./eVe/eVe/lib/eVe/graphics/matrix.rb");
  self.$require("./eVe/eVe/lib/eVe/system/photons.rb");
  $gvars.environment = "eVe";
  $gvars.current_script = "./medias/e_app/app.rb";
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return self.$include($$('Eve'))
  })($nesting[0], null, $nesting);
});

Opal.modules["www/public/medias/projects/vie/vie_utils"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $hash2 = Opal.hash2, $def = Opal.def, $truthy = Opal.truthy, $rb_times = Opal.rb_times, $send = Opal.send, $rb_plus = Opal.rb_plus, $rb_divide = Opal.rb_divide, $rb_gt = Opal.rb_gt, $eqeq = Opal.eqeq, $rb_minus = Opal.rb_minus, $to_ary = Opal.to_ary;

  Opal.add_stubs('grab,box,merge,[],data,over,cells,child,atome_id,color,selected,animate,*,wait,+,set,clear,text,each,get_cell,activate_cell,convert,/,>,==,-,size=,resize_matrix,center,matrix,resize_html,resize_action,new,drop,fill_cell,touch,nil?,call,delete,x=,deactivate_cell,drag,virtual_event,to_n,resize_playground,image,size,new_playground,list,each_with_index');
  
  
  $def(self, '$init_vie', function $$init_vie() {
    var self = this, style = nil;

    
    style = self.$grab("vie_style");
    self.$box($hash2(["atome_id"], {"atome_id": "matrix_shell"}).$merge(style['$[]']("matrix_shell")));
    self.$box($hash2(["atome_id"], {"atome_id": "inspector"}).$merge(style['$[]']("inspector")));
    self.$box($hash2(["atome_id"], {"atome_id": "navigator"}).$merge(style['$[]']("navigator")));
    self.$box($hash2(["atome_id"], {"atome_id": "action"}).$merge(style['$[]']("action")));
    self.$box($hash2(["atome_id"], {"atome_id": "details"}).$merge(style['$[]']("details")));
    return self.$box($hash2(["atome_id"], {"atome_id": "title"}).$merge(style['$[]']("title")));
  }, 0);
  
  $def(self, '$activate_cell', function $$activate_cell() {
    var self = this, style = nil, duration = nil, vie_playground = nil, child_found = nil;

    
    style = self.$grab("vie_style");
    duration = style['$[]']("animation_duration");
    style = self.$grab("vie_style");
    vie_playground = self.$grab("vie_matrix").$data();
    vie_playground.$cells().$over(false);
    child_found = self.$grab(self.$atome_id()).$child();
    if ($truthy(child_found)) {
      child_found.$color(style['$[]']("selected_label")['$[]']("color"))
    };
    self.$selected(true);
    self.$animate($hash2(["start", "end", "duration", "loop", "curve", "target"], {"start": $hash2(["color"], {"color": style['$[]']("cell")['$[]']("color")}), "end": $hash2(["color"], {"color": style['$[]']("cell_selected")['$[]']("color")}), "duration": $rb_times(duration, 1000), "loop": 0, "curve": "easing", "target": self.$atome_id()}));
    return $send(self, 'wait', [$rb_plus(duration, 0.1)], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

      return self.$set(style['$[]']("cell_selected"))}, {$$arity: 0, $$s: self});
  }, 0);
  
  $def(self, '$deactivate_cell', function $$deactivate_cell() {
    var self = this, style = nil, duration = nil, vie_playground = nil, child_found = nil;

    
    style = self.$grab("vie_style");
    duration = style['$[]']("animation_duration");
    style = self.$grab("vie_style");
    vie_playground = self.$grab("vie_matrix").$data();
    vie_playground.$cells().$over(false);
    child_found = self.$grab(self.$atome_id()).$child();
    if ($truthy(child_found)) {
      child_found.$color(style['$[]']("label")['$[]']("color"))
    };
    self.$selected(false);
    self.$animate($hash2(["start", "end", "duration", "loop", "curve", "target"], {"start": $hash2(["color"], {"color": style['$[]']("cell_selected")['$[]']("color")}), "end": $hash2(["color"], {"color": style['$[]']("cell")['$[]']("color")}), "duration": $rb_times(duration, 1000), "loop": 0, "curve": "easing", "target": self.$atome_id()}));
    return $send(self, 'wait', [$rb_plus(duration, 0.1)], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;

      return self.$set(style['$[]']("cell"))}, {$$arity: 0, $$s: self});
  }, 0);
  
  $def(self, '$fill_cell', function $$fill_cell(current_cell, module_id, vie_style) {
    var cell_label = nil, style_to_apply = nil, label_style = nil;

    
    if ($truthy(current_cell.$data())) {
      current_cell.$clear()
    };
    current_cell.$data(module_id);
    cell_label = current_cell.$text($hash2(["content"], {"content": module_id}));
    style_to_apply = vie_style['$[]']("cell");
    label_style = vie_style['$[]']("label");
    cell_label.$set(style_to_apply);
    return cell_label.$set(label_style);
  }, 3);
  
  $def(self, '$select_cells', function $$select_cells(vie_playground, array_of_object, color) {
    
    
    
    if (color == null) color = nil;;
    return $send(array_of_object, 'each', [], function $$3(nb){var my_cell = nil;

      
      
      if (nb == null) nb = nil;;
      my_cell = vie_playground.$get_cell(nb);
      return my_cell.$activate_cell();}, 1);
  }, -3);
  
  $def(self, '$resize_action', function $$resize_action(prent_object, playground, matrix_holder, ref_size) {
    var parent_height = nil, parent_width = nil, ratio = nil, view_format = nil, size_to_apply = nil;

    
    parent_height = prent_object.$convert("width");
    parent_width = prent_object.$convert("height");
    ratio = $rb_divide(parent_width, parent_height);
    if ($truthy($rb_gt(ratio, 1))) {
      view_format = "landscape"
    } else {
      view_format = "portrait"
    };
    if ($eqeq(view_format, "landscape")) {
      
      size_to_apply = $rb_minus(parent_height, $rb_times(ref_size, 2));
      matrix_holder['$size='](size_to_apply);
      playground.$resize_matrix(size_to_apply);
      playground.$matrix().$center(true);
      return matrix_holder.$center(true);
    } else {
      
      size_to_apply = $rb_minus(parent_width, $rb_times(ref_size, 2));
      matrix_holder['$size='](size_to_apply);
      playground.$resize_matrix(size_to_apply);
      playground.$matrix().$center(true);
      return matrix_holder.$center(true);
    };
  }, 4);
  
  $def(self, '$resize_playground', function $$resize_playground(playground) {
    var self = this, ref_size = nil, prent_object = nil, matrix_holder = nil;

    
    ref_size = self.$grab("vie_style")['$[]']("ref_size");
    prent_object = self.$grab("view");
    matrix_holder = self.$grab("matrix_shell");
    $send($$('ATOME'), 'resize_html', [], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;

      return self.$resize_action(prent_object, playground, matrix_holder, ref_size)}, {$$arity: 0, $$s: self});
    return self.$resize_action(prent_object, playground, matrix_holder, ref_size);
  }, 1);
  
  $def(self, '$playground_alert', function $$playground_alert(matrix, alert_color) {
    
    
    
    if (alert_color == null) alert_color = "red";;
    return matrix.$cells().$color(alert_color);
  }, -2);
  
  $def(self, '$new_playground', function $$new_playground(playground_id) {
    var proc = $$new_playground.$$p || nil, self = this, cell_back = nil, style = nil, ref_size = nil, background_color = nil, matrix_parent = nil, vie_playground = nil, duration = nil, flash_color = nil, vie_logo = nil;

    delete $$new_playground.$$p;
    
    ;
    cell_back = self.$grab("color_theme")['$[]']("cell_color");
    style = self.$grab("vie_style");
    ref_size = style['$[]']("ref_size");
    background_color = style['$[]']("matrix_background");
    matrix_parent = "matrix_shell";
    vie_playground = $$('Matrix').$new($hash2(["parent", "nb", "size", "background_color", "background", "atome_id", "name", "margin", "style"], {"parent": matrix_parent, "nb": 8, "size": 666, "background_color": background_color, "background": nil, "atome_id": playground_id, "name": playground_id, "margin": 9, "style": $hash2(["color", "smooth", "shadow"], {"color": cell_back, "smooth": 3, "shadow": $hash2(["bounding"], {"bounding": true})})}));
    $$('Atome').$new($hash2(["atome_id", "data"], {"atome_id": "vie_matrix", "data": vie_playground}));
    vie_playground.$matrix().$center(true);
    style = self.$grab("vie_style");
    duration = style['$[]']("animation_duration");
    flash_color = style['$[]']("flash_color");
    $send(vie_playground.$cells(), 'drop', [true], function $$5(_evt, ui, current_cell){var self = $$5.$$s == null ? this : $$5.$$s, dropped_element = nil, module_id = nil;

      
      
      if (_evt == null) _evt = nil;;
      
      if (ui == null) ui = nil;;
      
      if (current_cell == null) current_cell = nil;;
      dropped_element = $(ui.draggable).attr('id');
      module_id = self.$grab(dropped_element).$data();
      self.$fill_cell(current_cell, module_id, style);
      self.$animate($hash2(["start", "end", "duration", "loop", "curve", "target"], {"start": $hash2(["color"], {"color": current_cell.$color()}), "end": $hash2(["color"], {"color": flash_color}), "duration": $rb_times(duration, 1000), "loop": 0, "curve": "easing", "target": current_cell.$atome_id()}));
      return $send(self, 'wait', [$rb_times(duration, 1.3)], function $$6(){var self = $$6.$$s == null ? this : $$6.$$s;

        return self.$animate($hash2(["start", "end", "duration", "loop", "curve", "target"], {"start": $hash2(["color"], {"color": flash_color}), "end": $hash2(["color"], {"color": current_cell.$color()}), "duration": $rb_times(duration, 1000), "loop": 0, "curve": "easing", "target": current_cell.$atome_id()}))}, {$$arity: 0, $$s: self});}, {$$arity: 3, $$s: self});
    $send(vie_playground.$cells(), 'touch', [$hash2(["option"], {"option": "down"})], function $$7(){var self = $$7.$$s == null ? this : $$7.$$s, index = nil, details_bar = nil;

      
      if ($truthy(self.$selected())) {
        self.previous_state = "selected"
      } else {
        
        self.previous_state = "unselected";
        if ($truthy(self.$grab("module_list")['$nil?']())) {
          proc.$call()
        };
        self.$activate_cell();
      };
      index = 0;
      details_bar = self.$grab("details");
      if ($truthy(details_bar.$child())) {
        details_bar.$child().$delete()
      };
      return $send(vie_playground.$cells(), 'each', [], function $$8(found_cell){var new_detail = nil;

        
        
        if (found_cell == null) found_cell = nil;;
        if (($truthy(found_cell.$selected()) && ($truthy(found_cell.$data())))) {
          
          new_detail = details_bar.$text(found_cell.$data());
          new_detail['$x=']($rb_plus($rb_times(99, index), 99));
          return (index = $rb_plus(index, 1));
        } else {
          return nil
        };}, 1);}, {$$arity: 0, $$s: self});
    $send(vie_playground.$cells(), 'touch', [$hash2(["option"], {"option": "up"})], function $$9(ev){var self = $$9.$$s == null ? this : $$9.$$s;
      if (self.previous_state == null) self.previous_state = nil;

      
      
      if (ev == null) ev = nil;;
      if ($eqeq(self.previous_state, "selected")) {
        return self.$deactivate_cell()
      } else {
        return nil
      };}, {$$arity: 1, $$s: self});
    $send(vie_playground.$cells(), 'touch', [$hash2(["option"], {"option": "long"})], function $$10(ev){var self = $$10.$$s == null ? this : $$10.$$s, color1 = nil, color2 = nil;

      
      
      if (ev == null) ev = nil;;
      $send(vie_playground.$cells(), 'touch', [$hash2(["option"], {"option": "up"})], function $$11(){
        return vie_playground.$cells().$over(false)}, 0);
      color1 = "green";
      color2 = self.$grab("color_theme")['$[]']("base_color");
      if ($truthy(self.$child())) {
        if ($truthy(self.$drag())) {
          
          self.$drag($hash2(["option"], {"option": "remove"}));
          return vie_playground.$cells().$over(false);
        } else {
          
          self.$color("black");
          self.$virtual_event($hash2(["event"], {"event": ev.$to_n()}));
          $send(vie_playground.$cells(), 'over', ["enter"], function $$12(){var self = $$12.$$s == null ? this : $$12.$$s;

            return self.$color(color1)}, {$$arity: 0, $$s: self});
          return $send(vie_playground.$cells(), 'over', ["exit"], function $$13(){var self = $$13.$$s == null ? this : $$13.$$s;

            return self.$color(color2)}, {$$arity: 0, $$s: self});
        }
      } else {
        return nil
      };}, {$$arity: 1, $$s: self});
    self.$resize_playground(vie_playground);
    vie_logo = self.$image($hash2(["atome_id", "content", "xx", "y", "shadow", "z"], {"atome_id": "vie_logo", "content": "vie_logo", "xx": 9, "y": 9, "shadow": true, "z": 6}));
    vie_logo.$size($rb_divide(ref_size, 1.2));
    return vie_playground;
  }, 1);
  return $def(self, '$new_project', function $$new_project(data) {
    var self = this, style = nil, matrix_name = nil, vie_playground = nil;

    
    
    if (data == null) data = $hash2([], {});;
    style = self.$grab("vie_style");
    self.language = data['$[]']("language");
    if ($truthy(self.$grab("vie_matrix"))) {
      self.$grab("vie_matrix").$data().$delete()
    };
    if ($truthy(self.$grab("title"))) {
      self.$grab("title").$clear()
    };
    matrix_name = data['$[]']("matrix");
    self.$grab("title").$text($hash2(["content"], {"content": data['$[]']("title")}).$merge(style['$[]']("title_label")));
    vie_playground = $send(self, 'new_playground', [matrix_name], function $$14(){var self = $$14.$$s == null ? this : $$14.$$s;

      return self.$list(data['$[]']("modules"), data['$[]']("modules_style"))}, {$$arity: 0, $$s: self});
    $send(data['$[]']("actions"), 'each_with_index', [], function $$15($mlhs_tmp1, index){var $a, $b, self = $$15.$$s == null ? this : $$15.$$s, action_id = nil, action_label = nil, new_action = nil;
      if (self.language == null) self.language = nil;

      
      
      if ($mlhs_tmp1 == null) $mlhs_tmp1 = nil;;
      
      if (index == null) index = nil;;
      $b = $mlhs_tmp1, $a = $to_ary($b), (action_id = ($a[0] == null ? nil : $a[0])), (action_label = ($a[1] == null ? nil : $a[1])), $b;
      new_action = self.$text($hash2(["cursor", "id", "content"], {"cursor": "pointer", "id": action_id, "content": action_label['$[]'](self.language)}));
      new_action.$set(data['$[]']("actions_style"));
      return ($a = [$rb_plus($rb_times(99, index), 99)], $send(new_action, 'x=', $a), $a[$a.length - 1]);}, {$$arity: 2, $$s: self, $$has_top_level_mlhs_arg: true});
    $send(data['$[]']("modules"), 'each', [], function $$16(module_id, module_data){
      
      
      if (module_id == null) module_id = nil;;
      
      if (module_data == null) module_data = nil;;
      return $$('Atome').$new($hash2(["atome_id", "data"], {"atome_id": module_id, "data": module_data}));}, 2);
    $$('Atome').$new($hash2(["atome_id", "data"], {"atome_id": "vie_matrix", "data": vie_playground}));
    return vie_playground;
  }, -1);
};

Opal.modules["www/public/medias/projects/vie/vie_add_on"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $def = Opal.def, $eqeq = Opal.eqeq, $to_ary = Opal.to_ary, $rb_minus = Opal.rb_minus, $rb_times = Opal.rb_times, $rb_plus = Opal.rb_plus, $rb_divide = Opal.rb_divide, $neqeq = Opal.neqeq;

  Opal.add_stubs('inspect,delete,[],[]=,to_i,each,new,cloner,grab,atome_id,state,merge,box,alert,==,each_with_index,data,shadow,height,width,-,*,center,y,+,color,text,/,image,touch,animate,cells,!=,selected,fill_cell,child,drag,start,end');
  
  
  $def(self, '$cloner', function $$cloner(atome_to_clone, attach_to_parent) {
    var self = this, atome_properties = nil, children = nil, visual_found = nil, size_found = nil, filtered_properties = nil, new_clone = nil;

    
    
    if (attach_to_parent == null) attach_to_parent = nil;;
    atome_properties = atome_to_clone.$inspect();
    atome_properties.$delete("atome_id");
    children = atome_properties.$delete("child");
    visual_found = atome_properties.$delete("visual");
    if ($truthy(visual_found)) {
      
      size_found = visual_found['$[]']("size");
      atome_properties['$[]=']("visual", size_found.$to_i());
    };
    if ($truthy(attach_to_parent)) {
      
      atome_properties.$delete("parent");
      atome_properties['$[]=']("parent", attach_to_parent);
    };
    filtered_properties = $hash2([], {});
    $send(atome_properties, 'each', [], function $$1(prop, value){var $a;

      
      
      if (prop == null) prop = nil;;
      
      if (value == null) value = nil;;
      if ($truthy(value)) {
        return ($a = [prop, value], $send(filtered_properties, '[]=', $a), $a[$a.length - 1])
      } else {
        return nil
      };}, 2);
    new_clone = $$('Atome').$new(filtered_properties);
    if ($truthy(children)) {
      $send(children, 'each', [], function $$2(child_found){var self = $$2.$$s == null ? this : $$2.$$s;

        
        
        if (child_found == null) child_found = nil;;
        return self.$cloner(self.$grab(child_found), new_clone.$atome_id());}, {$$arity: 1, $$s: self})
    };
    return new_clone.$state(false);
  }, -2);
  return $def(self, '$list', function $$list(items, style) {
    var self = this, list = nil;

    
    
    if (style == null) style = $hash2([], {});;
    style = $hash2(["atome_id", "background", "line_background", "label_color", "parent", "line_height", "line_spacing", "margin", "width"], {"atome_id": "my_list", "background": "transparent", "line_background": "white", "label_color": "orange", "parent": "view", "line_height": 33, "line_spacing": 9, "margin": 3, "width": 99}).$merge(style);
    list = self.$box($hash2(["color", "parent", "atome_id", "width"], {"color": style['$[]']("background"), "parent": style['$[]']("parent"), "atome_id": style['$[]']("atome_id"), "width": style['$[]']("width")}));
    if ($truthy(style['$[]']("title"))) {
      self.$alert("style is " + (style['$[]']("title")))
    };
    if (($truthy(style['$[]']("line_shadow")) && ($eqeq(style['$[]']("line_shadow"), true)))) {
      style['$[]=']("line_shadow", $hash2(["bounding"], {"bounding": true}))
    };
    return $send(items, 'each_with_index', [], function $$3($mlhs_tmp1, index){var $a, $b, self = $$3.$$s == null ? this : $$3.$$s, data_id = nil, content = nil, item = nil, vie_style = nil, current_color = nil;
      if (self.language == null) self.language = nil;

      
      
      if ($mlhs_tmp1 == null) $mlhs_tmp1 = nil;;
      
      if (index == null) index = nil;;
      $b = $mlhs_tmp1, $a = $to_ary($b), (data_id = ($a[0] == null ? nil : $a[0])), (content = ($a[1] == null ? nil : $a[1])), $b;
      item = list.$box($hash2(["cursor"], {"cursor": "pointer"}));
      item.$data(data_id);
      item.$shadow(style['$[]']("line_shadow"));
      item.$height(style['$[]']("line_height"));
      item.$width($rb_minus(list.$width(), $rb_times(style['$[]']("margin"), 2)));
      item.$center("x");
      item.$y($rb_plus($rb_times($rb_plus(style['$[]']("line_height"), style['$[]']("line_spacing")), index), style['$[]']("line_spacing")));
      item.$color(style['$[]']("line_background"));
      item.$text($hash2(["cursor", "color", "content", "xx", "y", "visual"], {"cursor": "pointer", "color": style['$[]']("label_color"), "content": content['$[]']("label")['$[]'](self.language), "xx": 6, "y": 6, "visual": $rb_divide(style['$[]']("line_height"), 3)}));
      item.$image($hash2(["cursor", "content", "size", "center", "x", "z", "color"], {"cursor": "pointer", "content": content['$[]']("icon"), "size": $rb_times(style['$[]']("line_height"), 0.6), "center": "y", "x": 3, "z": 6, "color": "orange"}));
      $send(item, 'touch', [$hash2(["option"], {"option": "down"})], function $$4(ev){var self = $$4.$$s == null ? this : $$4.$$s, vie_style = nil, duration = nil, flash_color = nil, current_color = nil;

        
        
        if (ev == null) ev = nil;;
        vie_style = self.$grab("vie_style");
        duration = vie_style['$[]']("animation_duration");
        flash_color = vie_style['$[]']("flash_color");
        current_color = vie_style['$[]']("cell")['$[]']("color");
        return self.$animate($hash2(["start", "end", "duration", "loop", "curve", "target"], {"start": $hash2(["color"], {"color": flash_color}), "end": $hash2(["color"], {"color": current_color}), "duration": $rb_times(duration, 1000), "loop": 0, "curve": "easing", "target": self.$atome_id()}));}, {$$arity: 1, $$s: self});
      $send(item, 'touch', [$hash2(["option"], {"option": "up"})], function $$5(){var self = $$5.$$s == null ? this : $$5.$$s, vie_style = nil;

        
        vie_style = self.$grab("vie_style");
        $send(self.$grab("vie_matrix").$data().$cells(), 'each', [], function $$6(cell){var self = $$6.$$s == null ? this : $$6.$$s, child_found = nil;

          
          
          if (cell == null) cell = nil;;
          if (($truthy(cell.$selected()) && ($neqeq(self.$state(), "dragged")))) {
            
            self.$fill_cell(cell, data_id, vie_style);
            style = self.$grab("vie_style");
            child_found = cell.$child();
            if ($truthy(child_found)) {
              return child_found.$color(style['$[]']("selected_label")['$[]']("color"))
            } else {
              return nil
            };
          } else {
            return nil
          };}, {$$arity: 1, $$s: self});
        return self.$state(false);}, {$$arity: 0, $$s: self});
      vie_style = self.$grab("vie_style");
      current_color = vie_style['$[]']("cell")['$[]']("color");
      return $send(item, 'drag', [], function $$7(ev){var self = $$7.$$s == null ? this : $$7.$$s;

        
        
        if (ev == null) ev = nil;;
        if ($truthy(ev.$start())) {
          
          self.$state("dragged");
          self.$color(current_color);
          self.$cloner(self);
        };
        if ($truthy(ev.$end())) {
          
          self.$delete();
          return self.$state(false);
        } else {
          return nil
        };}, {$$arity: 1, $$s: self});}, {$$arity: 2, $$s: self, $$has_top_level_mlhs_arg: true});
  }, -2);
};

Opal.modules["www/public/medias/projects/vie/vie_style"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $hash2 = Opal.hash2, $rb_divide = Opal.rb_divide, ref_size = nil, color_theme = nil, vie_style = nil;

  Opal.add_stubs('[],/,new');
  
  ref_size = 69;
  color_theme = $hash2(["back_color", "base_color", "cell_color", "selected_color", "flash_color", "matrix_background", "text_color", "text_color_selected"], {"back_color": $hash2(["red", "green", "blue", "alpha"], {"red": 0.2, "green": 0.2, "blue": 0.2, "alpha": 0.6}), "base_color": $hash2(["red", "green", "blue", "alpha"], {"red": 0.15, "green": 0.15, "blue": 0.15, "alpha": 1}), "cell_color": $hash2(["red", "green", "blue", "alpha"], {"red": 0.18, "green": 0.18, "blue": 0.18, "alpha": 1}), "selected_color": $hash2(["red", "green", "blue", "alpha"], {"red": 1, "green": 0.6, "blue": 0.1, "alpha": 0.6}), "flash_color": $hash2(["red", "green", "blue", "alpha"], {"red": 1, "green": 0.6, "blue": 0.1, "alpha": 0.6}), "matrix_background": $hash2(["red", "green", "blue", "alpha"], {"red": 1, "green": 0.3, "blue": 0.3, "alpha": 0}), "text_color": $hash2(["red", "green", "blue", "alpha"], {"red": 1, "green": 0.6, "blue": 0.1, "alpha": 1}), "text_color_selected": $hash2(["red", "green", "blue", "alpha"], {"red": 0.3, "green": 0.3, "blue": 0.3, "alpha": 1})});
  vie_style = $hash2(["ref_size", "animation_duration", "matrix_background", "matrix", "cell", "label", "selected_label", "cell_selected", "flash_color", "lines", "alternated_lines", "navigator", "inspector", "details", "action", "matrix_shell", "title", "title_label", "module", "module_selected"], {"ref_size": ref_size, "animation_duration": 0.3, "matrix_background": color_theme['$[]']("matrix_background"), "matrix": $hash2(["color"], {"color": color_theme['$[]']("back_color")}), "cell": $hash2(["color"], {"color": color_theme['$[]']("cell_color")}), "label": $hash2(["color", "visual", "z", "center"], {"color": color_theme['$[]']("text_color"), "visual": 12, "z": 3, "center": true}), "selected_label": $hash2(["color", "visual", "z", "center"], {"color": color_theme['$[]']("text_color_selected"), "visual": 12, "z": 3, "center": true}), "cell_selected": $hash2(["color"], {"color": color_theme['$[]']("selected_color")}), "flash_color": color_theme['$[]']("flash_color"), "lines": $hash2(["height", "color"], {"height": 33, "color": color_theme['$[]']("base_color")}), "alternated_lines": $hash2(["height", "color"], {"height": 33, "color": color_theme['$[]']("selected_color")}), "navigator": $hash2(["width", "height", "x", "y", "yy", "color", "shadow", "z"], {"width": ref_size, "height": "auto", "x": 0, "y": ref_size, "yy": ref_size, "color": color_theme['$[]']("base_color"), "shadow": $hash2(["bounding"], {"bounding": true}), "z": 1}), "inspector": $hash2(["width", "height", "xx", "y", "yy", "color", "shadow", "z"], {"width": ref_size, "height": "auto", "xx": 0, "y": ref_size, "yy": ref_size, "color": color_theme['$[]']("base_color"), "shadow": $hash2(["bounding"], {"bounding": true}), "z": 1}), "details": $hash2(["width", "height", "x", "yy", "xx", "color", "shadow", "z"], {"width": "auto", "height": ref_size, "x": 0, "yy": 0, "xx": 0, "color": color_theme['$[]']("base_color"), "shadow": $hash2(["bounding"], {"bounding": true}), "z": 2}), "action": $hash2(["width", "height", "x", "y", "xx", "color", "shadow", "z"], {"width": "auto", "height": ref_size, "x": 0, "y": 0, "xx": 0, "color": color_theme['$[]']("base_color"), "shadow": $hash2(["bounding"], {"bounding": true}), "z": 2}), "matrix_shell": $hash2(["center", "y", "yy", "xx", "color", "z"], {"center": true, "y": ref_size, "yy": ref_size, "xx": ref_size, "color": color_theme['$[]']("base_color"), "z": 0}), "title": $hash2(["width", "height", "center", "y", "color", "shadow", "z", "smooth"], {"width": 333, "height": $rb_divide(ref_size, 3), "center": $hash2(["axis", "dynamic"], {"axis": "x", "dynamic": true}), "y": 0, "color": color_theme['$[]']("base_color"), "shadow": $hash2(["bounding"], {"bounding": true}), "z": 3, "smooth": [0, 0, 9, 9]}), "title_label": $hash2(["visual", "y", "center", "color"], {"visual": 15, "y": 3, "center": "x", "color": color_theme['$[]']("text_color")}), "module": $hash2(["color"], {"color": color_theme['$[]']("base_color")}), "module_selected": $hash2(["color", "shadow"], {"color": color_theme['$[]']("selected_color"), "shadow": $hash2(["bounding"], {"bounding": true})})});
  $$('Atome').$new($hash2(["atome_id", "content"], {"atome_id": "vie_style", "content": vie_style}));
  return $$('Atome').$new($hash2(["atome_id", "content"], {"atome_id": "color_theme", "content": color_theme}));
};

Opal.modules["www/public/medias/projects/vie/index"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var self = Opal.top, nil = Opal.nil, $hash2 = Opal.hash2, $def = Opal.def, $send = Opal.send, $truthy = Opal.truthy, $hash = Opal.hash, $to_ary = Opal.to_ary, $rb_plus = Opal.rb_plus, $rb_times = Opal.rb_times, $range = Opal.range, modules = nil, modules_style = nil, cells = nil, actions = nil, actions_style = nil, test_project = nil, test_project2 = nil, projects = nil, new$ = nil, save = nil, load = nil, active_module = nil, set_module_value = nil, link_modules = nil, set_module_name = nil, undo = nil, re_do = nil, actions_list = nil, margin = nil;

  Opal.add_stubs('require,[],grab,init_vie,new_project,puts,send_to_engine,to_json,key,ctrl_key,stop_propagation,stop_immediate_propagation,prevent_default,key_code,data,each,cells,selected,deactivate_cell,activate_cell,alert,postMessage,webview,chrome,window,json,each_with_index,box,+,*,text,center,touch,send_command');
  
  self.$require("./www/public/medias/projects/vie/vie_utils.rb");
  self.$require("./www/public/medias/projects/vie/vie_add_on.rb");
  self.$require("./www/public/medias/projects/vie/vie_style.rb");
  modules = $hash2(["sin_id", "help_id", "action_id"], {"sin_id": $hash2(["data", "icon", "label", "type", "value", "parameter", "ins", "outs"], {"data": "wave", "icon": "wait", "label": $hash2(["english", "french"], {"english": "sin", "french": "arr"}), "type": "unit", "value": 0.2, "parameter": "frequency", "ins": [], "outs": []}), "help_id": $hash2(["data", "icon", "label", "type"], {"data": "filter", "icon": "run", "label": $hash2(["english", "french"], {"english": "help", "french": "aide"}), "type": "unit"}), "action_id": $hash2(["data", "icon", "label", "type", "children", "parameters"], {"data": "hello", "icon": "action", "label": $hash2(["english", "french"], {"english": "action", "french": "utils"}), "type": "container", "children": ["matrix_2", "matrix_3"], "parameters": $hash2(["matrix_2"], {"matrix_2": ["matrix_2_3"]})})});
  modules_style = $hash2(["atome_id", "parent", "width", "background", "line_background", "line_shadow"], {"atome_id": "module_list", "parent": "navigator", "width": self.$grab("vie_style")['$[]']("ref_size"), "background": "transparent", "line_background": self.$grab("color_theme")['$[]']("base_color"), "line_shadow": true});
  cells = $hash2(["basis_1", "basis_6"], {"basis_1": $hash2([], {}), "basis_6": $hash2([], {})});
  actions = $hash2(["deselect", "delete", "link", "copy", "paste", "group", "ungroup", "undo", "redo"], {"deselect": $hash2(["french", "english"], {"french": "deselect", "english": "unselect"}), "delete": $hash2(["english", "french"], {"english": "clear", "french": "suppr"}), "link": $hash2(["english", "french"], {"english": "link", "french": "lier"}), "copy": $hash2(["english", "french"], {"english": "copy", "french": "copier"}), "paste": $hash2(["english", "french"], {"english": "paste", "french": "coller"}), "group": $hash2(["english", "french"], {"english": "group", "french": "grouper"}), "ungroup": $hash2(["english", "french"], {"english": "ungroup", "french": "dégrouper"}), "undo": $hash2(["english", "french"], {"english": "undo", "french": "annuler"}), "redo": $hash2(["english", "french"], {"english": "redo", "french": "retablir"})});
  actions_style = $hash2(["atome_id", "parent", "color", "y", "visual"], {"atome_id": "action_list", "parent": "action", "color": self.$grab("color_theme")['$[]']("text_color"), "y": 33, "visual": 15});
  test_project = $hash2(["title", "language", "matrix", "matrices", "cells", "modules", "modules_style", "actions", "actions_style"], {"title": "SampleMachine", "language": "english", "matrix": "basis", "matrices": ["basis", "matrix2"], "cells": cells, "modules": modules, "modules_style": modules_style, "actions": actions, "actions_style": actions_style});
  test_project2 = $hash2(["title", "language", "matrix", "matrices", "cells", "modules", "modules_style", "actions", "actions_style"], {"title": "SampleModule", "language": "english", "matrix": "basis", "matrices": ["mymat1", "mymat2"], "cells": cells, "modules": modules, "modules_style": modules_style, "actions": actions, "actions_style": actions_style});
  self.$init_vie();
  self.$new_project(test_project);
  
  $def(self, '$send_to_engine', function $$send_to_engine(params) {
    var self = this;

    return self.$puts(params)
  }, 1);
  projects = "get_projects";
  self.$send_to_engine(projects.$to_json());
  new$ = $hash2(["new_project"], {"new_project": "my_project"});
  self.$send_to_engine(new$.$to_json());
  save = $hash2(["save_as"], {"save_as": "my_new_project"});
  self.$send_to_engine(save.$to_json());
  load = $hash2(["load"], {"load": "my_project"});
  self.$send_to_engine(load.$to_json());
  modules = "get_modules";
  self.$send_to_engine(modules.$to_json());
  active_module = $hash2(["sin"], {"sin": "my_matrix_3"});
  self.$send_to_engine(active_module.$to_json());
  set_module_value = $hash2(["my_matrix_3"], {"my_matrix_3": 0.1});
  self.$send_to_engine(set_module_value.$to_json());
  link_modules = $hash2(["my_matrix_3", "my_matrix_6"], {"my_matrix_3": "frequency", "my_matrix_6": "lfo"});
  self.$send_to_engine(link_modules.$to_json());
  set_module_name = "my module";
  self.$send_to_engine(set_module_name.$to_json());
  undo = "undo";
  self.$send_to_engine(undo.$to_json());
  re_do = "redo";
  self.$puts(re_do.$to_json());
  $send(self.$grab("view"), 'key', [$hash2(["options"], {"options": "down"})], function $$1(evt){var self = $$1.$$s == null ? this : $$1.$$s, activated = nil, current_matrix = nil;

    
    
    if (evt == null) evt = nil;;
    if ($truthy(evt.$ctrl_key())) {
      
      evt.$stop_propagation();
      evt.$stop_immediate_propagation();
      evt.$prevent_default();
      
      switch (evt.$key_code()) {
        case 65:
          
          activated = nil;
          current_matrix = self.$grab("vie_matrix").$data();
          $send(current_matrix.$cells(), 'each', [], function $$2(cell){
            
            
            if (cell == null) cell = nil;;
            if ($truthy(cell.$selected())) {
              return (activated = true)
            } else {
              return nil
            };}, 1);
          if ($truthy(activated)) {
            return $send(current_matrix.$cells(), 'each', [], function $$3(cell){
              
              
              if (cell == null) cell = nil;;
              return cell.$deactivate_cell();}, 1)
          } else {
            return $send(current_matrix.$cells(), 'each', [], function $$4(cell){
              
              
              if (cell == null) cell = nil;;
              return cell.$activate_cell();}, 1)
          };
          break;
        default:
          return nil
      };
    } else {
      return nil
    };}, {$$arity: 1, $$s: self});
  
  $def(self, '$send_command', function $$send_command(action, option) {
    var self = this, msg = nil;

    
    
    if (option == null) option = nil;;
    self.$alert("action is : " + (action.$to_json()) + " : " + (option.$to_json()));
    msg = $hash(action, option);
    return self.$window().$chrome().$webview().$postMessage(msg.$json());
  }, -2);
  actions_list = $hash2(["get_projects", "new_project", "save", "save_as", "load", "get_modules", "add_module", "set_module_parameter_value", "link_modules", "set_module_name", "undo", "redo"], {"get_projects": $hash2(["label"], {"label": "projects"}), "new_project": $hash2(["label", "option"], {"label": "new", "option": "project_name"}), "save": $hash2(["label"], {"label": "save"}), "save_as": $hash2(["label"], {"label": "save as"}), "load": $hash2(["label", "option"], {"label": "load", "option": "project_name"}), "get_modules": $hash2(["label", "option"], {"label": "modules", "option": ["module_type", "icon", $hash2(["input_parameters"], {"input_parameters": ["parameter_name", "type", "default_value", "range"]}), $hash2(["output_parameters"], {"output_parameters": ["parameter_name", "type", "default_value", "range"]})]}), "add_module": $hash2(["label", "option"], {"label": "add", "option": ["module_type", "module_id"]}), "set_module_parameter_value": $hash2(["label", "option"], {"label": "set value", "option": ["module_id", "new_value"]}), "link_modules": $hash2(["label", "option"], {"label": "link", "option": ["input_module_name", "input_module_parameter_id", "output_module_name", "output_module_id"]}), "set_module_name": $hash2(["label", "option"], {"label": "module name", "option": "module_name"}), "undo": $hash2(["label"], {"label": "undo"}), "redo": $hash2(["label"], {"label": "redo"})});
  margin = 12;
  return $send(actions_list, 'each_with_index', [], function $$5($mlhs_tmp1, index){var $a, $b, self = $$5.$$s == null ? this : $$5.$$s, action = nil, params = nil, button = nil, label = nil;

    
    
    if ($mlhs_tmp1 == null) $mlhs_tmp1 = nil;;
    
    if (index == null) index = nil;;
    $b = $mlhs_tmp1, $a = $to_ary($b), (action = ($a[0] == null ? nil : $a[0])), (params = ($a[1] == null ? nil : $a[1])), $b;
    button = self.$grab("navigator").$box($hash2(["atome_id", "width", "height", "x", "y", "smooth", "shadow", "color"], {"atome_id": action, "width": 39, "height": 39, "x": margin, "y": $rb_plus($rb_times($rb_plus(39, margin), index), 12), "smooth": 3, "shadow": $hash2(["bounding"], {"bounding": true}), "color": $hash2(["red", "green", "blue", "alpha"], {"red": 0.2, "green": 0.2, "blue": 0.2, "alpha": 0.6})}));
    label = button.$text($hash2(["content", "visual", "color"], {"content": params['$[]']("label")['$[]']($range(0, 6, false)), "visual": 9, "color": "gray"}));
    label.$center(true);
    return $send(button, 'touch', [], function $$6(){var self = $$6.$$s == null ? this : $$6.$$s;

      return self.$send_command(action, params['$[]']("option"))}, {$$arity: 0, $$s: self});}, {$$arity: 2, $$s: self, $$has_top_level_mlhs_arg: true});
};

Opal.queue(function(Opal) {/* Generated by Opal 1.5.1 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('require');
  return self.$require("./www/public/medias/projects/vie/index.rb")
});
