Opal.queue(function(Opal) {/* Generated by Opal 1.7.1 */
  var $hash2 = Opal.hash2, $rb_minus = Opal.rb_minus, $rb_plus = Opal.rb_plus, $truthy = Opal.truthy, $rb_gt = Opal.rb_gt, $send = Opal.send, $gvars = Opal.gvars, $to_ary = Opal.to_ary, $rb_times = Opal.rb_times, $def = Opal.def, $klass = Opal.klass, $assign_ivar = Opal.assign_ivar, $return_val = Opal.return_val, $return_ivar = Opal.return_ivar, self = Opal.top, $nesting = [], nil = Opal.nil, action_height = nil, toolbox_with = nil, inspector_with = nil, navigation_height = nil, back_color = nil, dark_color = nil, darker_color2 = nil, darker_color = nil, cell_color = nil, back_shadow = nil, cell_shadow = nil, default_color = nil, action_color = nil, back_dark = nil, back_dark2 = nil, txt_color = nil, toolbox_style = nil, action_style = nil, inspector_style = nil, list_style = nil, navigation_style = nil, center_style = nil, center = nil, action = nil, toolbox = nil, inspector = nil, navigation = nil, modules = nil, filering = nil, listing = nil, text_list_style = nil, a = nil, svg_color = nil, adress = nil;
  if ($gvars.window == null) $gvars.window = nil;

  Opal.add_stubs('color,attached,grab,id,-,+,box,matrix,>,to_px,width,height,resize,right,on,cell,image,each_with_index,text,top,*,touch,puts,alert,list,value,new,webobject,style,svg_fetch');
  
  action_height = 60;
  toolbox_with = 60;
  inspector_with = 120;
  navigation_height = 30;
  back_color = $hash2(["red", "green", "blue"], {"red": 0.21, "green": 0.21, "blue": 0.21});
  dark_color = $hash2(["red", "green", "blue"], {"red": 0.1, "green": 0.1, "blue": 0.1});
  darker_color2 = $hash2(["red", "green", "blue"], {"red": 0.127, "green": 0.127, "blue": 0.127});
  darker_color = $hash2(["red", "green", "blue"], {"red": 0.127, "green": 0.127, "blue": 0.127});
  cell_color = $hash2(["red", "green", "blue"], {"red": 0.127, "green": 0.127, "blue": 0.127});
  back_shadow = $hash2(["blur", "left", "top"], {"blur": 15, "left": 0, "top": 0});
  cell_shadow = $hash2(["blur", "left", "top", "id"], {"blur": 9, "left": 3, "top": 3, "id": "cell_shadow"});
  default_color = self.$color(back_color);
  action_color = self.$color(dark_color);
  back_dark = self.$color(darker_color);
  back_dark2 = self.$color(darker_color2);
  txt_color = self.$color($hash2(["red", "green", "blue"], {"red": 0.5, "green": 0.5, "blue": 0.5}));
  self.$grab("view").$attached([action_color.$id()]);
  toolbox_style = $hash2(["id", "left", "top", "width", "bottom", "height", "attached"], {"id": "toolbox", "left": 0, "top": 0, "width": toolbox_with, "bottom": 0, "height": "auto", "attached": [action_color.$id()]});
  action_style = $hash2(["id", "left", "top", "width", "right", "height", "attached"], {"id": "action", "left": toolbox_with, "top": 0, "width": "auto", "right": 0, "height": action_height, "attached": [action_color.$id()]});
  inspector_style = $hash2(["id", "left", "top", "width", "bottom", "height", "attached"], {"id": "inspector", "left": toolbox_with, "top": 0, "width": inspector_with, "bottom": 0, "height": "auto", "attached": [action_color.$id()]});
  list_style = $hash2(["id", "top", "bottom", "left", "width", "overflow", "height", "attached", "smooth"], {"id": "filer", "top": 66, "bottom": 36, "left": 6, "width": $rb_minus(inspector_with, 12), "overflow": "auto", "height": "auto", "attached": [back_dark.$id()], "smooth": 6});
  navigation_style = $hash2(["id", "left", "bottom", "top", "width", "right", "height", "attached"], {"id": "navigation", "left": 0, "bottom": 0, "top": "auto", "width": "auto", "right": 0, "height": navigation_height, "attached": [action_color.$id()]});
  center_style = $hash2(["id", "left", "bottom", "top", "right", "width", "height"], {"id": "center", "left": $rb_plus(toolbox_with, inspector_with), "bottom": navigation_height, "top": action_height, "right": 0, "width": "auto", "height": "auto"});
  center = self.$box(center_style);
  action = self.$box(action_style);
  toolbox = self.$box(toolbox_style);
  inspector = self.$box(inspector_style);
  navigation = self.$box(navigation_style);
  modules = center.$matrix($hash2(["id", "top", "left", "smooth", "columns", "rows", "color", "cells"], {"id": "modules", "top": 0, "left": 0, "smooth": 0, "columns": $hash2(["count"], {"count": 8}), "rows": $hash2(["count"], {"count": 8}), "color": $hash2(["alpha"], {"alpha": 0}), "cells": $hash2(["particles"], {"particles": $hash2(["margin", "smooth", "color", "shadow"], {"margin": 9, "smooth": 3, "color": cell_color, "shadow": cell_shadow})})}));
  center.$color(dark_color);
  if ($truthy($rb_gt(center.$width().$to_px(), center.$height().$to_px()))) {
    modules.$resize(center.$height().$to_px(), center.$height().$to_px())
  } else {
    modules.$resize(center.$width().$to_px(), center.$width().$to_px())
  };
  modules.$width("auto");
  modules.$right(0);
  $send($gvars.window, 'on', ["resize"], function $$1(e){
    
    if (e == null) e = nil;
    if ($truthy($rb_gt(center.$width().$to_px(), center.$height().$to_px()))) {
      modules.$resize(center.$height().$to_px(), center.$height().$to_px())
    } else {
      modules.$resize(center.$width().$to_px(), center.$width().$to_px())
    };
    modules.$width("auto");
    return modules.$right(0);});
  modules.$cell(3).$color("orange");
  action.$image($hash2(["path", "left", "right", "top", "size"], {"path": "./medias/images/logos/vie.svg", "left": "auto", "right": 3, "top": 0, "size": 66}));
  filering = toolbox.$box($hash2(["id", "top", "bottom", "left", "width", "overflow", "height", "attached", "smooth"], {"id": "filer_zone", "top": 15, "bottom": 36, "left": 6, "width": 50, "overflow": "auto", "height": "auto", "attached": [back_dark2.$id()], "smooth": 6}));
  self.$grab("filer_zone").$image($hash2(["path", "top", "left", "size"], {"path": "./medias/images/icons/folder.svg", "top": 15, "left": 0, "size": 24}));
  listing = inspector.$box(list_style);
  
  $def(self, '$list', function $$list(parent, style, items) {
    var self = this;

    return $send(items, 'each_with_index', [], function $$2($mlhs_tmp1, index){var $a, $b, self = $$2.$$s == null ? this : $$2.$$s, k = nil, v = nil, item = nil;

      
      if ($mlhs_tmp1 == null) $mlhs_tmp1 = nil;
      if (index == null) index = nil;
      $b = $mlhs_tmp1, $a = $to_ary($b), (k = ($a[0] == null ? nil : $a[0])), (v = ($a[1] == null ? nil : $a[1])), $b;
      item = parent.$text(style);
      item.$top($rb_times(25, index));
      return $send(item, 'touch', [true], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s;

        
        self.$puts(item.$color());
        return item.$color("lightgray");}, {$$s: self});}, {$$s: self, $$has_top_level_mlhs_arg: true})
  });
  
  $def(self, '$my_action', function $$my_action() {
    var self = this;

    return self.$alert("kool")
  });
  text_list_style = $hash2(["visual", "data", "left", "top", "attached"], {"visual": $hash2(["size"], {"size": 15}), "data": "mon projet", "left": 9, "top": 6, "attached": [txt_color.$id()]});
  self.$list(listing, text_list_style, $hash2(["i1", "i2", "i3", "i4"], {"i1": $hash2(["title", "data", "action"], {"title": "mon projet", "data": "item1", "action": "my_action"}), "i2": $hash2(["title", "data", "action"], {"title": "mon projet2", "data": "item1", "action": "my_action"}), "i3": $hash2(["title", "data", "action"], {"title": "autre projet", "data": "item1", "action": "my_action"}), "i4": $hash2(["title", "data", "action"], {"title": "my great song", "data": "item1", "action": "my_action"})}));
  (function($base, $super) {
    var self = $klass($base, $super, 'WebObject');

    
    
    
    $def(self, '$initialize', $assign_ivar("webobject"));
    
    $def(self, '$style', $return_val(nil));
    return $def(self, '$web_object', $return_ivar("webobject"));
  })($nesting[0], null);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Atome');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return $def(self, '$webobject', function $$webobject() {
      var self = this, web_object = nil;

      
      web_object = document.getElementById(self.$id().$value());
      return $$('WebObject').$new(web_object);
    })
  })($nesting[0], null, $nesting);
  a = center.$webobject();
  a.$style();
  svg_color = "cyan";
  
  $def(self, '$svg_fetch', function $$svg_fetch(svg_adress, svg_color) {
    
    
fetch("./medias/images/icons/" +svg_adress +".svg")
    .then(response => response.text())
    .then(svgText => {
        document.getElementById("view").innerHTML = svgText;
//get IDs in svg
        let svg = document.getElementsByTagName("svg")[0]
        let elements = svg.getElementsByTagName("*");
//let's resize now
         svg.style.width=33
//let's colorize now
        let ids = [];
        for (let element of elements) {
            ids.push(element.getAttribute("id"));
        }
        for (let id of ids) {
            let elementFound = document.getElementById(id);
            if (elementFound) {
                if (elementFound.style.fill != "none") {
                    elementFound.style.fill =svg_color;
                }
                elementFound.style.stroke =svg_color;
            }
        }

    });


  });
  adress = "stop";
  return self.$svg_fetch(adress, svg_color);
});
